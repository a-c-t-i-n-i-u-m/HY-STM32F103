
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001716  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d4  00800060  00001716  000017aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800134  00800134  0000187e  2**0
                  ALLOC
  3 .noinit       00000000  00800145  00800145  0000187e  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  0000187e  2**0
                  CONTENTS
  5 .debug_aranges 0000003c  00000000  00000000  0000187e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001e9  00000000  00000000  000018ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000d3a  00000000  00000000  00001aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003b2  00000000  00000000  000027dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000008d4  00000000  00000000  00002b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000422  00000000  00000000  00003463  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00001716  00001716  00003885  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54
       4:	0c 94 45 00 	jmp	0x8a
       8:	0c 94 45 00 	jmp	0x8a
       c:	0c 94 45 00 	jmp	0x8a
      10:	0c 94 45 00 	jmp	0x8a
      14:	0c 94 45 00 	jmp	0x8a
      18:	0c 94 45 00 	jmp	0x8a
      1c:	0c 94 45 00 	jmp	0x8a
      20:	0c 94 45 00 	jmp	0x8a
      24:	0c 94 45 00 	jmp	0x8a
      28:	0c 94 45 00 	jmp	0x8a
      2c:	0c 94 45 00 	jmp	0x8a
      30:	0c 94 45 00 	jmp	0x8a
      34:	0c 94 45 00 	jmp	0x8a
      38:	0c 94 45 00 	jmp	0x8a
      3c:	0c 94 45 00 	jmp	0x8a
      40:	0c 94 45 00 	jmp	0x8a
      44:	0c 94 45 00 	jmp	0x8a
      48:	0c 94 45 00 	jmp	0x8a
      4c:	0c 94 45 00 	jmp	0x8a
      50:	0c 94 45 00 	jmp	0x8a

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 33       	cpi	r26, 0x34	; 52
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e3       	ldi	r26, 0x34	; 52
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 34       	cpi	r26, 0x45	; 69
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e
      86:	0c 94 5a 00 	jmp	0xb4

0000008a <__bad_interrupt>:
      8a:	0c 94 00 00 	jmp	0x0

0000008e <IOInit>:
//Installation der Seriellen Schnittstelle
void IOInit (void)
{
	//Enable TXEN im Register UCR TX-Data Enable
	UCR=(1 << TXEN);
      8e:	88 e0       	ldi	r24, 0x08	; 8
      90:	8a b9       	out	0x0a, r24	; 10
	//Teiler wird gesetzt 
	UBRR=(SYSCLK / (BAUD_RATE * 16L) - 1);
      92:	87 e4       	ldi	r24, 0x47	; 71
      94:	89 b9       	out	0x09, r24	; 9
      96:	08 95       	ret

00000098 <uart_putchar>:
}


//Routine für printf
int uart_putchar (char c)
{
      98:	cf 93       	push	r28
      9a:	c8 2f       	mov	r28, r24
	if (c == '\n')
      9c:	8a 30       	cpi	r24, 0x0A	; 10
      9e:	19 f4       	brne	.+6      	; 0xa6
		uart_putchar('\r');
      a0:	8d e0       	ldi	r24, 0x0D	; 13
      a2:	0e 94 4c 00 	call	0x98
	//Warten solange bis Zeichen gesendet wurde
	loop_until_bit_is_set(USR, UDRE);
      a6:	5d 9b       	sbis	0x0b, 5	; 11
      a8:	fe cf       	rjmp	.-4      	; 0xa6
	UDR = c;
      aa:	cc b9       	out	0x0c, r28	; 12
	return (0);
}
      ac:	80 e0       	ldi	r24, 0x00	; 0
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	cf 91       	pop	r28
      b2:	08 95       	ret

000000b4 <main>:

//Hauptprogramm
int main (void)
{
      b4:	c8 e5       	ldi	r28, 0x58	; 88
      b6:	d6 e0       	ldi	r29, 0x06	; 6
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	cd bf       	out	0x3d, r28	; 61
	//Initzialisierung der seriellen Schnittstelle
	IOInit();
      bc:	0e 94 47 00 	call	0x8e
	
	//öffnet einen kanal für printf
	fdevopen (uart_putchar, NULL, 0);
      c0:	40 e0       	ldi	r20, 0x00	; 0
      c2:	50 e0       	ldi	r21, 0x00	; 0
      c4:	ba 01       	movw	r22, r20
      c6:	8c e4       	ldi	r24, 0x4C	; 76
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	0e 94 18 06 	call	0xc30

	//Initialisierung der MMC/SD-Karte
	printf ("System OK\n\n");	
      ce:	80 e6       	ldi	r24, 0x60	; 96
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	02 c0       	rjmp	.+4      	; 0xd8
	while ( mmc_init() !=0) //ist der Rückgabewert ungleich NULL ist ein Fehler aufgetreten
		{
		printf("** Keine MMC/SD Karte gefunden!! **\n");	
      d4:	8b e6       	ldi	r24, 0x6B	; 107
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	0e 94 7d 06 	call	0xcfa
      dc:	0e 94 69 01 	call	0x2d2
      e0:	88 23       	and	r24, r24
      e2:	c1 f7       	brne	.-16     	; 0xd4
		}
	printf("Karte gefunden!!\n");
      e4:	8f e8       	ldi	r24, 0x8F	; 143
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	0e 94 7d 06 	call	0xcfa
	
	fat_cluster_data_store();//laden Cluster OFFSET und Size ins EEPROM
      ec:	0e 94 84 04 	call	0x908
	//Initialisierung der MMC/SD-Karte ENDE!

	unsigned char Buffer[512];
	unsigned int tmp;
	
	mmc_read_csd (Buffer);
      f0:	ce 01       	movw	r24, r28
      f2:	01 96       	adiw	r24, 0x01	; 1
      f4:	0e 94 f1 02 	call	0x5e2
	
	for (tmp = 0;tmp<16;tmp++)
      f8:	00 e0       	ldi	r16, 0x00	; 0
      fa:	10 e0       	ldi	r17, 0x00	; 0
		{
		printf("%x ",Buffer[tmp]);
      fc:	3e 01       	movw	r6, r28
      fe:	08 94       	sec
     100:	61 1c       	adc	r6, r1
     102:	71 1c       	adc	r7, r1
     104:	f8 01       	movw	r30, r16
     106:	e6 0d       	add	r30, r6
     108:	f7 1d       	adc	r31, r7
     10a:	80 81       	ld	r24, Z
     10c:	99 27       	eor	r25, r25
     10e:	9f 93       	push	r25
     110:	8f 93       	push	r24
     112:	80 ea       	ldi	r24, 0xA0	; 160
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	9f 93       	push	r25
     118:	8f 93       	push	r24
     11a:	0e 94 61 06 	call	0xcc2
     11e:	0f 90       	pop	r0
     120:	0f 90       	pop	r0
     122:	0f 90       	pop	r0
     124:	0f 90       	pop	r0
     126:	0f 5f       	subi	r16, 0xFF	; 255
     128:	1f 4f       	sbci	r17, 0xFF	; 255
     12a:	00 31       	cpi	r16, 0x10	; 16
     12c:	11 05       	cpc	r17, r1
     12e:	30 f3       	brcs	.-52     	; 0xfc
		};


	//Ausgabe des Root Directory
	unsigned int Clustervar;
	unsigned char Dir_Attrib = 0;
     130:	51 e0       	ldi	r21, 0x01	; 1
     132:	85 2e       	mov	r8, r21
     134:	52 e0       	ldi	r21, 0x02	; 2
     136:	95 2e       	mov	r9, r21
     138:	8c 0e       	add	r8, r28
     13a:	9d 1e       	adc	r9, r29
     13c:	f4 01       	movw	r30, r8
     13e:	10 82       	st	Z, r1
	unsigned long Size = 0;
     140:	42 e0       	ldi	r20, 0x02	; 2
     142:	a4 2e       	mov	r10, r20
     144:	b4 2e       	mov	r11, r20
     146:	ac 0e       	add	r10, r28
     148:	bd 1e       	adc	r11, r29
     14a:	f5 01       	movw	r30, r10
     14c:	10 82       	st	Z, r1
     14e:	11 82       	std	Z+1, r1	; 0x01
     150:	12 82       	std	Z+2, r1	; 0x02
     152:	13 82       	std	Z+3, r1	; 0x03
	printf("\nDirectory\n\n");
     154:	84 ea       	ldi	r24, 0xA4	; 164
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	0e 94 7d 06 	call	0xcfa
	for (char a = 1;a < 240;a++)
     15c:	31 e0       	ldi	r19, 0x01	; 1
     15e:	d3 2e       	mov	r13, r19
	{
		Clustervar = fat_read_dir_ent(0,a,&Size,&Dir_Attrib,Buffer);
     160:	8e 01       	movw	r16, r28
     162:	0f 5f       	subi	r16, 0xFF	; 255
     164:	1f 4f       	sbci	r17, 0xFF	; 255
     166:	9e 01       	movw	r18, r28
     168:	2f 5f       	subi	r18, 0xFF	; 255
     16a:	3d 4f       	sbci	r19, 0xFD	; 253
     16c:	ae 01       	movw	r20, r28
     16e:	4e 5f       	subi	r20, 0xFE	; 254
     170:	5d 4f       	sbci	r21, 0xFD	; 253
     172:	6d 2d       	mov	r22, r13
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 ce 03 	call	0x79c
     17c:	26 e0       	ldi	r18, 0x06	; 6
     17e:	e2 2e       	mov	r14, r18
     180:	22 e0       	ldi	r18, 0x02	; 2
     182:	f2 2e       	mov	r15, r18
     184:	ec 0e       	add	r14, r28
     186:	fd 1e       	adc	r15, r29
     188:	f7 01       	movw	r30, r14
     18a:	80 83       	st	Z, r24
     18c:	91 83       	std	Z+1, r25	; 0x01
			if (Clustervar == 0xffff)
     18e:	8f 5f       	subi	r24, 0xFF	; 255
     190:	9f 4f       	sbci	r25, 0xFF	; 255
     192:	51 f1       	breq	.+84     	; 0x1e8
			{
				break;
			}
		tmp = (Size & 0x0000FFFF);
     194:	f5 01       	movw	r30, r10
     196:	00 81       	ld	r16, Z
     198:	11 81       	ldd	r17, Z+1	; 0x01
		printf("Cluster = %4x DirA = %2x Size= %8d FileName = ",Clustervar,Dir_Attrib,tmp);
     19a:	1f 93       	push	r17
     19c:	0f 93       	push	r16
     19e:	f4 01       	movw	r30, r8
     1a0:	80 81       	ld	r24, Z
     1a2:	99 27       	eor	r25, r25
     1a4:	9f 93       	push	r25
     1a6:	8f 93       	push	r24
     1a8:	f7 01       	movw	r30, r14
     1aa:	80 81       	ld	r24, Z
     1ac:	91 81       	ldd	r25, Z+1	; 0x01
     1ae:	9f 93       	push	r25
     1b0:	8f 93       	push	r24
     1b2:	80 eb       	ldi	r24, 0xB0	; 176
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	9f 93       	push	r25
     1b8:	8f 93       	push	r24
     1ba:	0e 94 61 06 	call	0xcc2
		printf(Buffer);
     1be:	7f 92       	push	r7
     1c0:	6f 92       	push	r6
     1c2:	0e 94 61 06 	call	0xcc2
		printf("\n");
     1c6:	8a e0       	ldi	r24, 0x0A	; 10
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 76 06 	call	0xcec
     1ce:	8d b7       	in	r24, 0x3d	; 61
     1d0:	9e b7       	in	r25, 0x3e	; 62
     1d2:	0a 96       	adiw	r24, 0x0a	; 10
     1d4:	0f b6       	in	r0, 0x3f	; 63
     1d6:	f8 94       	cli
     1d8:	9e bf       	out	0x3e, r25	; 62
     1da:	0f be       	out	0x3f, r0	; 63
     1dc:	8d bf       	out	0x3d, r24	; 61
     1de:	d3 94       	inc	r13
     1e0:	9f ee       	ldi	r25, 0xEF	; 239
     1e2:	9d 15       	cp	r25, r13
     1e4:	08 f0       	brcs	.+2      	; 0x1e8
     1e6:	bc cf       	rjmp	.-136    	; 0x160
	}
	printf("\nDirectory Ende\n\n");
     1e8:	8f ed       	ldi	r24, 0xDF	; 223
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	0e 94 7d 06 	call	0xcfa

	//Lade Cluster für das index.htm File in den Speicher 
	Clustervar = 0;//suche im Root Verzeichnis
     1f0:	67 01       	movw	r12, r14
     1f2:	f7 01       	movw	r30, r14
     1f4:	10 82       	st	Z, r1
     1f6:	11 82       	std	Z+1, r1	; 0x01
	if (fat_search_file("mmc.txt",&Clustervar,&Size,&Dir_Attrib,Buffer) == 1)
     1f8:	8e 01       	movw	r16, r28
     1fa:	0f 5f       	subi	r16, 0xFF	; 255
     1fc:	1f 4f       	sbci	r17, 0xFF	; 255
     1fe:	9e 01       	movw	r18, r28
     200:	2f 5f       	subi	r18, 0xFF	; 255
     202:	3d 4f       	sbci	r19, 0xFD	; 253
     204:	ae 01       	movw	r20, r28
     206:	4e 5f       	subi	r20, 0xFE	; 254
     208:	5d 4f       	sbci	r21, 0xFD	; 253
     20a:	b7 01       	movw	r22, r14
     20c:	80 ef       	ldi	r24, 0xF0	; 240
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 d1 05 	call	0xba2
     214:	81 30       	cpi	r24, 0x01	; 1
     216:	59 f5       	brne	.+86     	; 0x26e
		{
		printf("\nFile Found!!\n\n");
     218:	88 ef       	ldi	r24, 0xF8	; 248
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 7d 06 	call	0xcfa
		//Lese File und gibt es auf der seriellen Schnittstelle aus
		for (int b = 0;b<52;b++)
     220:	ee 24       	eor	r14, r14
     222:	ff 24       	eor	r15, r15
			{
			fat_read_file (Clustervar,Buffer,b);
     224:	c7 01       	movw	r24, r14
     226:	aa 27       	eor	r26, r26
     228:	97 fd       	sbrc	r25, 7
     22a:	a0 95       	com	r26
     22c:	ba 2f       	mov	r27, r26
     22e:	9c 01       	movw	r18, r24
     230:	ad 01       	movw	r20, r26
     232:	be 01       	movw	r22, r28
     234:	6f 5f       	subi	r22, 0xFF	; 255
     236:	7f 4f       	sbci	r23, 0xFF	; 255
     238:	f6 01       	movw	r30, r12
     23a:	80 81       	ld	r24, Z
     23c:	91 81       	ldd	r25, Z+1	; 0x01
     23e:	0e 94 cf 04 	call	0x99e
			for (int a = 0;a<512;a++)
     242:	00 e0       	ldi	r16, 0x00	; 0
     244:	10 e0       	ldi	r17, 0x00	; 0
				{
				printf ("%c",Buffer[a]);
     246:	fe 01       	movw	r30, r28
     248:	e0 0f       	add	r30, r16
     24a:	f1 1f       	adc	r31, r17
     24c:	81 81       	ldd	r24, Z+1	; 0x01
     24e:	99 27       	eor	r25, r25
     250:	0e 94 76 06 	call	0xcec
     254:	0f 5f       	subi	r16, 0xFF	; 255
     256:	1f 4f       	sbci	r17, 0xFF	; 255
     258:	f2 e0       	ldi	r31, 0x02	; 2
     25a:	00 30       	cpi	r16, 0x00	; 0
     25c:	1f 07       	cpc	r17, r31
     25e:	9c f3       	brlt	.-26     	; 0x246
     260:	08 94       	sec
     262:	e1 1c       	adc	r14, r1
     264:	f1 1c       	adc	r15, r1
     266:	24 e3       	ldi	r18, 0x34	; 52
     268:	e2 16       	cp	r14, r18
     26a:	f1 04       	cpc	r15, r1
     26c:	dc f2       	brlt	.-74     	; 0x224
				}
			}
		}

	printf("FERTIG!!\n");
     26e:	87 e0       	ldi	r24, 0x07	; 7
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	0e 94 7d 06 	call	0xcfa
	//Hauptprogramm läuft ständig in einer schleife und macht nichts
	while (1)
     276:	ff cf       	rjmp	.-2      	; 0x276

00000278 <mmc_write_byte>:
inline void mmc_write_byte (U08 Byte)
//############################################################################
{
#if SPI_Mode		//Routine für Hardware SPI
	SPDR = Byte; 	//Sendet ein Byte
     278:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF))) //Wartet bis Byte gesendet wurde
     27a:	77 9b       	sbis	0x0e, 7	; 14
     27c:	fe cf       	rjmp	.-4      	; 0x27a
     27e:	08 95       	ret

00000280 <mmc_read_byte>:
     280:	8f ef       	ldi	r24, 0xFF	; 255
     282:	8f b9       	out	0x0f, r24	; 15
     284:	77 9b       	sbis	0x0e, 7	; 14
     286:	fe cf       	rjmp	.-4      	; 0x284
     288:	8f b1       	in	r24, 0x0f	; 15
     28a:	99 27       	eor	r25, r25
     28c:	08 95       	ret

0000028e <mmc_write_command>:
     28e:	fc 01       	movw	r30, r24
     290:	2f ef       	ldi	r18, 0xFF	; 255
     292:	40 e0       	ldi	r20, 0x00	; 0
     294:	50 e0       	ldi	r21, 0x00	; 0
     296:	c3 9a       	sbi	0x18, 3	; 24
     298:	2f b9       	out	0x0f, r18	; 15
     29a:	77 9b       	sbis	0x0e, 7	; 14
     29c:	fe cf       	rjmp	.-4      	; 0x29a
     29e:	c3 98       	cbi	0x18, 3	; 24
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	81 91       	ld	r24, Z+
     2a4:	8f b9       	out	0x0f, r24	; 15
     2a6:	77 9b       	sbis	0x0e, 7	; 14
     2a8:	fe cf       	rjmp	.-4      	; 0x2a6
     2aa:	9f 5f       	subi	r25, 0xFF	; 255
     2ac:	96 30       	cpi	r25, 0x06	; 6
     2ae:	c8 f3       	brcs	.-14     	; 0x2a2
     2b0:	3f ef       	ldi	r19, 0xFF	; 255
     2b2:	3f b9       	out	0x0f, r19	; 15
     2b4:	77 9b       	sbis	0x0e, 7	; 14
     2b6:	fe cf       	rjmp	.-4      	; 0x2b4
     2b8:	8f b1       	in	r24, 0x0f	; 15
     2ba:	28 2f       	mov	r18, r24
     2bc:	ca 01       	movw	r24, r20
     2be:	4f 5f       	subi	r20, 0xFF	; 255
     2c0:	5f 4f       	sbci	r21, 0xFF	; 255
     2c2:	85 5f       	subi	r24, 0xF5	; 245
     2c4:	91 40       	sbci	r25, 0x01	; 1
     2c6:	10 f4       	brcc	.+4      	; 0x2cc
     2c8:	2f 3f       	cpi	r18, 0xFF	; 255
     2ca:	99 f3       	breq	.-26     	; 0x2b2
     2cc:	82 2f       	mov	r24, r18
     2ce:	99 27       	eor	r25, r25
     2d0:	08 95       	ret

000002d2 <mmc_init>:
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	cd b7       	in	r28, 0x3d	; 61
     2da:	de b7       	in	r29, 0x3e	; 62
     2dc:	26 97       	sbiw	r28, 0x06	; 6
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	f8 94       	cli
     2e2:	de bf       	out	0x3e, r29	; 62
     2e4:	0f be       	out	0x3f, r0	; 63
     2e6:	cd bf       	out	0x3d, r28	; 61
     2e8:	10 e0       	ldi	r17, 0x00	; 0
     2ea:	be 98       	cbi	0x17, 6	; 23
     2ec:	bf 9a       	sbi	0x17, 7	; 23
     2ee:	bd 9a       	sbi	0x17, 5	; 23
     2f0:	bb 9a       	sbi	0x17, 3	; 23
     2f2:	bc 9a       	sbi	0x17, 4	; 23
     2f4:	c3 9a       	sbi	0x18, 3	; 24
     2f6:	81 2f       	mov	r24, r17
     2f8:	00 00       	nop
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	88 3c       	cpi	r24, 0xC8	; 200
     2fe:	e0 f3       	brcs	.-8      	; 0x2f8
     300:	83 e5       	ldi	r24, 0x53	; 83
     302:	8d b9       	out	0x0d, r24	; 13
     304:	1e b8       	out	0x0e, r1	; 14
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	9f ef       	ldi	r25, 0xFF	; 255
     30a:	9f b9       	out	0x0f, r25	; 15
     30c:	77 9b       	sbis	0x0e, 7	; 14
     30e:	fe cf       	rjmp	.-4      	; 0x30c
     310:	8f 5f       	subi	r24, 0xFF	; 255
     312:	8f 30       	cpi	r24, 0x0F	; 15
     314:	d0 f3       	brcs	.-12     	; 0x30a
     316:	86 e0       	ldi	r24, 0x06	; 6
     318:	a0 e1       	ldi	r26, 0x10	; 16
     31a:	b1 e0       	ldi	r27, 0x01	; 1
     31c:	fe 01       	movw	r30, r28
     31e:	31 96       	adiw	r30, 0x01	; 1
     320:	0d 90       	ld	r0, X+
     322:	01 92       	st	Z+, r0
     324:	8a 95       	dec	r24
     326:	e1 f7       	brne	.-8      	; 0x320
     328:	07 c0       	rjmp	.+14     	; 0x338
     32a:	81 2f       	mov	r24, r17
     32c:	1f 5f       	subi	r17, 0xFF	; 255
     32e:	89 3c       	cpi	r24, 0xC9	; 201
     330:	18 f0       	brcs	.+6      	; 0x338
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	20 c0       	rjmp	.+64     	; 0x378
     338:	ce 01       	movw	r24, r28
     33a:	01 96       	adiw	r24, 0x01	; 1
     33c:	0e 94 47 01 	call	0x28e
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	99 f7       	brne	.-26     	; 0x32a
     344:	10 e0       	ldi	r17, 0x00	; 0
     346:	81 e4       	ldi	r24, 0x41	; 65
     348:	89 83       	std	Y+1, r24	; 0x01
     34a:	8f ef       	ldi	r24, 0xFF	; 255
     34c:	8e 83       	std	Y+6, r24	; 0x06
     34e:	07 c0       	rjmp	.+14     	; 0x35e
     350:	81 2f       	mov	r24, r17
     352:	1f 5f       	subi	r17, 0xFF	; 255
     354:	85 36       	cpi	r24, 0x65	; 101
     356:	18 f0       	brcs	.+6      	; 0x35e
     358:	82 e0       	ldi	r24, 0x02	; 2
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0d c0       	rjmp	.+26     	; 0x378
     35e:	ce 01       	movw	r24, r28
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	0e 94 47 01 	call	0x28e
     366:	88 23       	and	r24, r24
     368:	99 f7       	brne	.-26     	; 0x350
     36a:	8d b1       	in	r24, 0x0d	; 13
     36c:	8c 7f       	andi	r24, 0xFC	; 252
     36e:	8d b9       	out	0x0d, r24	; 13
     370:	70 9a       	sbi	0x0e, 0	; 14
     372:	c3 9a       	sbi	0x18, 3	; 24
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	26 96       	adiw	r28, 0x06	; 6
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	de bf       	out	0x3e, r29	; 62
     380:	0f be       	out	0x3f, r0	; 63
     382:	cd bf       	out	0x3d, r28	; 61
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	1f 91       	pop	r17
     38a:	08 95       	ret

0000038c <mmc_write_sector>:
	{
	}
#else			//Routine für Software SPI
	for (U08 a=8; a>0; a--) //das Byte wird Bitweise nacheinander Gesendet MSB First
	{
		if (bit_is_set(Byte,(a-1))>0)	//Ist Bit a in Byte gesetzt
				{
				MMC_Write |= (1<<SPI_DO); //Set Output High
				}
			else
				{
				MMC_Write &= ~(1<<SPI_DO); //Set Output Low
				}	
		MMC_Write &= ~(1<<SPI_Clock);	//erzeugt ein Clock Impuls (LOW)
		
		MMC_Write |= (1<<SPI_Clock); //setzt Clock Impuls wieder auf (High)
	}
	MMC_Write |= (1<<SPI_DO);	//setzt Output wieder auf High	
#endif
}

//############################################################################
//Routine zum schreiben eines Blocks(512Byte) auf die MMC/SD-Karte
U08 mmc_write_sector (U32 addr,U08 *Buffer)
//############################################################################
{
     38c:	cf 92       	push	r12
     38e:	df 92       	push	r13
     390:	ef 92       	push	r14
     392:	ff 92       	push	r15
     394:	0f 93       	push	r16
     396:	1f 93       	push	r17
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
     3a0:	26 97       	sbiw	r28, 0x06	; 6
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	6b 01       	movw	r12, r22
     3ae:	7c 01       	movw	r14, r24
     3b0:	8a 01       	movw	r16, r20
	U08 tmp;
	//Commando 24 zum schreiben eines Blocks auf die MMC/SD - Karte
	U08 cmd[] = {0x58,0x00,0x00,0x00,0x00,0xFF}; 
     3b2:	be 01       	movw	r22, r28
     3b4:	6f 5f       	subi	r22, 0xFF	; 255
     3b6:	7f 4f       	sbci	r23, 0xFF	; 255
     3b8:	26 e0       	ldi	r18, 0x06	; 6
     3ba:	46 e1       	ldi	r20, 0x16	; 22
     3bc:	51 e0       	ldi	r21, 0x01	; 1
     3be:	db 01       	movw	r26, r22
     3c0:	fa 01       	movw	r30, r20
     3c2:	01 90       	ld	r0, Z+
     3c4:	0d 92       	st	X+, r0
     3c6:	2a 95       	dec	r18
     3c8:	e1 f7       	brne	.-8      	; 0x3c2
	
	/*Die Adressierung der MMC/SD-Karte wird in Bytes angegeben,
	  addr wird von Blocks zu Bytes umgerechnet danach werden 
	  diese in das Commando eingefügt*/
	  
	addr = addr << 9; //addr = addr * 512
     3ca:	29 e0       	ldi	r18, 0x09	; 9
     3cc:	cc 0c       	add	r12, r12
     3ce:	dd 1c       	adc	r13, r13
     3d0:	ee 1c       	adc	r14, r14
     3d2:	ff 1c       	adc	r15, r15
     3d4:	2a 95       	dec	r18
     3d6:	d1 f7       	brne	.-12     	; 0x3cc
	
	cmd[1] = ((addr & 0xFF000000) >>24 );
     3d8:	2f 2d       	mov	r18, r15
     3da:	33 27       	eor	r19, r19
     3dc:	44 27       	eor	r20, r20
     3de:	55 27       	eor	r21, r21
     3e0:	2a 83       	std	Y+2, r18	; 0x02
	cmd[2] = ((addr & 0x00FF0000) >>16 );
     3e2:	eb 82       	std	Y+3, r14	; 0x03
	cmd[3] = ((addr & 0x0000FF00) >>8 );
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	9f ef       	ldi	r25, 0xFF	; 255
     3e8:	a0 e0       	ldi	r26, 0x00	; 0
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	c8 22       	and	r12, r24
     3ee:	d9 22       	and	r13, r25
     3f0:	ea 22       	and	r14, r26
     3f2:	fb 22       	and	r15, r27
     3f4:	bb 27       	eor	r27, r27
     3f6:	af 2d       	mov	r26, r15
     3f8:	9e 2d       	mov	r25, r14
     3fa:	8d 2d       	mov	r24, r13
     3fc:	8c 83       	std	Y+4, r24	; 0x04

	//Sendet Commando cmd24 an MMC/SD-Karte (Write 1 Block/512 Bytes)
	tmp = mmc_write_command (cmd);
     3fe:	cb 01       	movw	r24, r22
     400:	0e 94 47 01 	call	0x28e
	if (tmp != 0)
     404:	88 23       	and	r24, r24
     406:	11 f0       	breq	.+4      	; 0x40c
		{
		return(tmp);
     408:	99 27       	eor	r25, r25
     40a:	2d c0       	rjmp	.+90     	; 0x466
		}
			
	//Wartet einen Moment und sendet einen Clock an die MMC/SD-Karte
	for (U08 a=0;a<100;a++)
     40c:	98 2f       	mov	r25, r24
     40e:	2f ef       	ldi	r18, 0xFF	; 255
     410:	2f b9       	out	0x0f, r18	; 15
     412:	77 9b       	sbis	0x0e, 7	; 14
     414:	fe cf       	rjmp	.-4      	; 0x412
     416:	8f b1       	in	r24, 0x0f	; 15
     418:	9f 5f       	subi	r25, 0xFF	; 255
     41a:	94 36       	cpi	r25, 0x64	; 100
     41c:	c8 f3       	brcs	.-14     	; 0x410
     41e:	8e ef       	ldi	r24, 0xFE	; 254
     420:	8f b9       	out	0x0f, r24	; 15
     422:	77 9b       	sbis	0x0e, 7	; 14
     424:	fe cf       	rjmp	.-4      	; 0x422
		{
		mmc_read_byte();
		}
	
	//Sendet Start Byte an MMC/SD-Karte
	mmc_write_byte(0xFE);	
	
	//Schreiben des Bolcks (512Bytes) auf MMC/SD-Karte
	for (U16 a=0;a<512;a++)
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	d8 01       	movw	r26, r16
     42c:	8d 91       	ld	r24, X+
     42e:	8d 01       	movw	r16, r26
     430:	8f b9       	out	0x0f, r24	; 15
     432:	77 9b       	sbis	0x0e, 7	; 14
     434:	fe cf       	rjmp	.-4      	; 0x432
     436:	2f 5f       	subi	r18, 0xFF	; 255
     438:	3f 4f       	sbci	r19, 0xFF	; 255
     43a:	b2 e0       	ldi	r27, 0x02	; 2
     43c:	20 30       	cpi	r18, 0x00	; 0
     43e:	3b 07       	cpc	r19, r27
     440:	a0 f3       	brcs	.-24     	; 0x42a
     442:	8f ef       	ldi	r24, 0xFF	; 255
     444:	8f b9       	out	0x0f, r24	; 15
     446:	77 9b       	sbis	0x0e, 7	; 14
     448:	fe cf       	rjmp	.-4      	; 0x446
     44a:	8f ef       	ldi	r24, 0xFF	; 255
     44c:	8f b9       	out	0x0f, r24	; 15
     44e:	77 9b       	sbis	0x0e, 7	; 14
     450:	fe cf       	rjmp	.-4      	; 0x44e
     452:	9f ef       	ldi	r25, 0xFF	; 255
     454:	9f b9       	out	0x0f, r25	; 15
     456:	77 9b       	sbis	0x0e, 7	; 14
     458:	fe cf       	rjmp	.-4      	; 0x456
     45a:	8f b1       	in	r24, 0x0f	; 15
     45c:	8f 3f       	cpi	r24, 0xFF	; 255
     45e:	d1 f7       	brne	.-12     	; 0x454
		{
		mmc_write_byte(*Buffer++);
		}
	
	//CRC-Byte schreiben
	mmc_write_byte(0xFF); //Schreibt Dummy CRC
	mmc_write_byte(0xFF); //CRC Code wird nicht benutzt
	
	//Wartet auf MMC/SD-Karte Bussy
	while (mmc_read_byte() != 0xff){};
	
	//set MMC_Chip_Select to high (MMC/SD-Karte Inaktiv)
	MMC_Disable();
     460:	c3 9a       	sbi	0x18, 3	; 24
	
return(0);
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	26 96       	adiw	r28, 0x06	; 6
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	f8 94       	cli
     46c:	de bf       	out	0x3e, r29	; 62
     46e:	0f be       	out	0x3f, r0	; 63
     470:	cd bf       	out	0x3d, r28	; 61
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	1f 91       	pop	r17
     478:	0f 91       	pop	r16
     47a:	ff 90       	pop	r15
     47c:	ef 90       	pop	r14
     47e:	df 90       	pop	r13
     480:	cf 90       	pop	r12
     482:	08 95       	ret

00000484 <mmc_read_block>:
}

//############################################################################
//Routine zum lesen des CID Registers von der MMC/SD-Karte (16Bytes)
void mmc_read_block(U08 *cmd,U08 *Buffer,U16 Bytes)
//############################################################################
{	
     484:	0f 93       	push	r16
     486:	1f 93       	push	r17
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	8b 01       	movw	r16, r22
     48e:	ea 01       	movw	r28, r20
	//Sendet Commando cmd an MMC/SD-Karte
	if (mmc_write_command (cmd) != 0)
     490:	0e 94 47 01 	call	0x28e
     494:	88 23       	and	r24, r24
     496:	29 f5       	brne	.+74     	; 0x4e2
     498:	9f ef       	ldi	r25, 0xFF	; 255
     49a:	9f b9       	out	0x0f, r25	; 15
     49c:	77 9b       	sbis	0x0e, 7	; 14
     49e:	fe cf       	rjmp	.-4      	; 0x49c
     4a0:	8f b1       	in	r24, 0x0f	; 15
     4a2:	8e 3f       	cpi	r24, 0xFE	; 254
     4a4:	d1 f7       	brne	.-12     	; 0x49a
			{
			 return;
			}

	//Wartet auf Start Byte von der MMC/SD-Karte (FEh/Start Byte)
	
	while (mmc_read_byte() != 0xfe){};

	//Lesen des Bolcks (normal 512Bytes) von MMC/SD-Karte
	for (U16 a=0;a<Bytes;a++)
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	2c 17       	cp	r18, r28
     4ac:	3d 07       	cpc	r19, r29
     4ae:	70 f4       	brcc	.+28     	; 0x4cc
     4b0:	9f ef       	ldi	r25, 0xFF	; 255
     4b2:	f8 01       	movw	r30, r16
     4b4:	0f 5f       	subi	r16, 0xFF	; 255
     4b6:	1f 4f       	sbci	r17, 0xFF	; 255
     4b8:	9f b9       	out	0x0f, r25	; 15
     4ba:	77 9b       	sbis	0x0e, 7	; 14
     4bc:	fe cf       	rjmp	.-4      	; 0x4ba
     4be:	8f b1       	in	r24, 0x0f	; 15
     4c0:	80 83       	st	Z, r24
     4c2:	2f 5f       	subi	r18, 0xFF	; 255
     4c4:	3f 4f       	sbci	r19, 0xFF	; 255
     4c6:	2c 17       	cp	r18, r28
     4c8:	3d 07       	cpc	r19, r29
     4ca:	98 f3       	brcs	.-26     	; 0x4b2
     4cc:	8f ef       	ldi	r24, 0xFF	; 255
     4ce:	8f b9       	out	0x0f, r24	; 15
     4d0:	77 9b       	sbis	0x0e, 7	; 14
     4d2:	fe cf       	rjmp	.-4      	; 0x4d0
     4d4:	8f b1       	in	r24, 0x0f	; 15
     4d6:	8f ef       	ldi	r24, 0xFF	; 255
     4d8:	8f b9       	out	0x0f, r24	; 15
     4da:	77 9b       	sbis	0x0e, 7	; 14
     4dc:	fe cf       	rjmp	.-4      	; 0x4da
     4de:	8f b1       	in	r24, 0x0f	; 15
		{
		*Buffer++ = mmc_read_byte();
		}
	//CRC-Byte auslesen
	mmc_read_byte();//CRC - Byte wird nicht ausgewertet
	mmc_read_byte();//CRC - Byte wird nicht ausgewertet
	
	//set MMC_Chip_Select to high (MMC/SD-Karte Inaktiv)
	MMC_Disable();
     4e0:	c3 9a       	sbi	0x18, 3	; 24
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	08 95       	ret

000004ec <mmc_read_sector>:
	
	return;
}

//############################################################################
//Routine zum lesen eines Blocks(512Byte) von der MMC/SD-Karte
U08 mmc_read_sector (U32 addr,U08 *Buffer)
//############################################################################
{	
     4ec:	cf 92       	push	r12
     4ee:	df 92       	push	r13
     4f0:	ef 92       	push	r14
     4f2:	ff 92       	push	r15
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
     500:	26 97       	sbiw	r28, 0x06	; 6
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	f8 94       	cli
     506:	de bf       	out	0x3e, r29	; 62
     508:	0f be       	out	0x3f, r0	; 63
     50a:	cd bf       	out	0x3d, r28	; 61
     50c:	6b 01       	movw	r12, r22
     50e:	7c 01       	movw	r14, r24
     510:	ba 01       	movw	r22, r20
	//Commando 16 zum lesen eines Blocks von der MMC/SD - Karte
	U08 cmd[] = {0x51,0x00,0x00,0x00,0x00,0xFF}; 
     512:	8e 01       	movw	r16, r28
     514:	0f 5f       	subi	r16, 0xFF	; 255
     516:	1f 4f       	sbci	r17, 0xFF	; 255
     518:	26 e0       	ldi	r18, 0x06	; 6
     51a:	4c e1       	ldi	r20, 0x1C	; 28
     51c:	51 e0       	ldi	r21, 0x01	; 1
     51e:	d8 01       	movw	r26, r16
     520:	fa 01       	movw	r30, r20
     522:	01 90       	ld	r0, Z+
     524:	0d 92       	st	X+, r0
     526:	2a 95       	dec	r18
     528:	e1 f7       	brne	.-8      	; 0x522
	
	/*Die Adressierung der MMC/SD-Karte wird in Bytes angegeben,
	  addr wird von Blocks zu Bytes umgerechnet danach werden 
	  diese in das Commando eingefügt*/
	  
	addr = addr << 9; //addr = addr * 512
     52a:	59 e0       	ldi	r21, 0x09	; 9
     52c:	cc 0c       	add	r12, r12
     52e:	dd 1c       	adc	r13, r13
     530:	ee 1c       	adc	r14, r14
     532:	ff 1c       	adc	r15, r15
     534:	5a 95       	dec	r21
     536:	d1 f7       	brne	.-12     	; 0x52c

	cmd[1] = ((addr & 0xFF000000) >>24 );
     538:	2f 2d       	mov	r18, r15
     53a:	33 27       	eor	r19, r19
     53c:	44 27       	eor	r20, r20
     53e:	55 27       	eor	r21, r21
     540:	2a 83       	std	Y+2, r18	; 0x02
	cmd[2] = ((addr & 0x00FF0000) >>16 );
     542:	eb 82       	std	Y+3, r14	; 0x03
	cmd[3] = ((addr & 0x0000FF00) >>8 );
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	9f ef       	ldi	r25, 0xFF	; 255
     548:	a0 e0       	ldi	r26, 0x00	; 0
     54a:	b0 e0       	ldi	r27, 0x00	; 0
     54c:	c8 22       	and	r12, r24
     54e:	d9 22       	and	r13, r25
     550:	ea 22       	and	r14, r26
     552:	fb 22       	and	r15, r27
     554:	bb 27       	eor	r27, r27
     556:	af 2d       	mov	r26, r15
     558:	9e 2d       	mov	r25, r14
     55a:	8d 2d       	mov	r24, r13
     55c:	8c 83       	std	Y+4, r24	; 0x04

    mmc_read_block(cmd,Buffer,512);
     55e:	40 e0       	ldi	r20, 0x00	; 0
     560:	52 e0       	ldi	r21, 0x02	; 2
     562:	c8 01       	movw	r24, r16
     564:	0e 94 42 02 	call	0x484

	return(0);
}
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	26 96       	adiw	r28, 0x06	; 6
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	f8 94       	cli
     572:	de bf       	out	0x3e, r29	; 62
     574:	0f be       	out	0x3f, r0	; 63
     576:	cd bf       	out	0x3d, r28	; 61
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	ff 90       	pop	r15
     582:	ef 90       	pop	r14
     584:	df 90       	pop	r13
     586:	cf 90       	pop	r12
     588:	08 95       	ret

0000058a <mmc_read_cid>:

//############################################################################
//Routine zum lesen des CID Registers von der MMC/SD-Karte (16Bytes)
U08 mmc_read_cid (U08 *Buffer)
//############################################################################
{
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
     596:	26 97       	sbiw	r28, 0x06	; 6
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	f8 94       	cli
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	cd bf       	out	0x3d, r28	; 61
     5a2:	9c 01       	movw	r18, r24
	//Commando zum lesen des CID Registers
	U08 cmd[] = {0x4A,0x00,0x00,0x00,0x00,0xFF}; 
     5a4:	8e 01       	movw	r16, r28
     5a6:	0f 5f       	subi	r16, 0xFF	; 255
     5a8:	1f 4f       	sbci	r17, 0xFF	; 255
     5aa:	86 e0       	ldi	r24, 0x06	; 6
     5ac:	42 e2       	ldi	r20, 0x22	; 34
     5ae:	51 e0       	ldi	r21, 0x01	; 1
     5b0:	d8 01       	movw	r26, r16
     5b2:	fa 01       	movw	r30, r20
     5b4:	01 90       	ld	r0, Z+
     5b6:	0d 92       	st	X+, r0
     5b8:	8a 95       	dec	r24
     5ba:	e1 f7       	brne	.-8      	; 0x5b4
	
	mmc_read_block(cmd,Buffer,16);
     5bc:	40 e1       	ldi	r20, 0x10	; 16
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	b9 01       	movw	r22, r18
     5c2:	c8 01       	movw	r24, r16
     5c4:	0e 94 42 02 	call	0x484

	return(0);
}
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	26 96       	adiw	r28, 0x06	; 6
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	cd bf       	out	0x3d, r28	; 61
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	1f 91       	pop	r17
     5de:	0f 91       	pop	r16
     5e0:	08 95       	ret

000005e2 <mmc_read_csd>:

//############################################################################
//Routine zum lesen des CSD Registers von der MMC/SD-Karte (16Bytes)
U08 mmc_read_csd (U08 *Buffer)
//############################################################################
{	
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	cd b7       	in	r28, 0x3d	; 61
     5ec:	de b7       	in	r29, 0x3e	; 62
     5ee:	26 97       	sbiw	r28, 0x06	; 6
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	f8 94       	cli
     5f4:	de bf       	out	0x3e, r29	; 62
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	cd bf       	out	0x3d, r28	; 61
     5fa:	9c 01       	movw	r18, r24
	//Commando zum lesen des CSD Registers
	U08 cmd[] = {0x49,0x00,0x00,0x00,0x00,0xFF};
     5fc:	8e 01       	movw	r16, r28
     5fe:	0f 5f       	subi	r16, 0xFF	; 255
     600:	1f 4f       	sbci	r17, 0xFF	; 255
     602:	86 e0       	ldi	r24, 0x06	; 6
     604:	48 e2       	ldi	r20, 0x28	; 40
     606:	51 e0       	ldi	r21, 0x01	; 1
     608:	d8 01       	movw	r26, r16
     60a:	fa 01       	movw	r30, r20
     60c:	01 90       	ld	r0, Z+
     60e:	0d 92       	st	X+, r0
     610:	8a 95       	dec	r24
     612:	e1 f7       	brne	.-8      	; 0x60c
	
	mmc_read_block(cmd,Buffer,16);
     614:	40 e1       	ldi	r20, 0x10	; 16
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	b9 01       	movw	r22, r18
     61a:	c8 01       	movw	r24, r16
     61c:	0e 94 42 02 	call	0x484

	return(0);
}
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	26 96       	adiw	r28, 0x06	; 6
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	f8 94       	cli
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	cd bf       	out	0x3d, r28	; 61
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	1f 91       	pop	r17
     636:	0f 91       	pop	r16
     638:	08 95       	ret

0000063a <fat_addr>:
//############################################################################
//Auslesen der Adresse des Volume Boot Record von MBR
U16 fat_addr (U08 *Buffer)
//############################################################################
{
     63a:	ef 92       	push	r14
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	8c 01       	movw	r16, r24
	U16 volume_boot_record_addr;
    
	//auslesen des Master Boot Record von der MMC/SD Karte (addr = 0)
	mmc_read_sector (MASTER_BOOT_RECORD,Buffer); //Read Master Boot Record
     644:	ac 01       	movw	r20, r24
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	0e 94 76 02 	call	0x4ec
    volume_boot_record_addr = Buffer[VBR_ADDR] + (Buffer[VBR_ADDR+1] << 8);
     652:	0a 53       	subi	r16, 0x3A	; 58
     654:	1e 4f       	sbci	r17, 0xFE	; 254
     656:	f8 01       	movw	r30, r16
     658:	21 91       	ld	r18, Z+
     65a:	8f 01       	movw	r16, r30
     65c:	80 81       	ld	r24, Z
     65e:	07 5c       	subi	r16, 0xC7	; 199
     660:	11 40       	sbci	r17, 0x01	; 1
     662:	99 27       	eor	r25, r25
     664:	f8 2e       	mov	r15, r24
     666:	ee 24       	eor	r14, r14
     668:	e2 0e       	add	r14, r18
     66a:	f1 1c       	adc	r15, r1
	//Berechnet Volume Boot Record 
	mmc_read_sector (volume_boot_record_addr,Buffer); //Read Master Boot Record
     66c:	c7 01       	movw	r24, r14
     66e:	aa 27       	eor	r26, r26
     670:	bb 27       	eor	r27, r27
     672:	a8 01       	movw	r20, r16
     674:	bc 01       	movw	r22, r24
     676:	cd 01       	movw	r24, r26
     678:	0e 94 76 02 	call	0x4ec
    return (volume_boot_record_addr);
}
     67c:	c7 01       	movw	r24, r14
     67e:	1f 91       	pop	r17
     680:	0f 91       	pop	r16
     682:	ff 90       	pop	r15
     684:	ef 90       	pop	r14
     686:	08 95       	ret

00000688 <fat_root_dir_addr>:
//############################################################################
//Auslesen der Adresse des First Root Directory von Volume Boot Record
U16 fat_root_dir_addr (U08 *Buffer) 
//############################################################################
{
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	8c 01       	movw	r16, r24
	struct BootSec *bootp; //Zeiger auf Bootsektor Struktur
	U16 FirstRootDirSecNum;
	//auslesen des Volume Boot Record von der MMC/SD Karte 
	mmc_read_sector (volume_boot_record_addr,Buffer);
     68e:	80 91 34 01 	lds	r24, 0x0134
     692:	90 91 35 01 	lds	r25, 0x0135
     696:	aa 27       	eor	r26, r26
     698:	bb 27       	eor	r27, r27
     69a:	a8 01       	movw	r20, r16
     69c:	bc 01       	movw	r22, r24
     69e:	cd 01       	movw	r24, r26
     6a0:	0e 94 76 02 	call	0x4ec
	bootp=(struct BootSec *)Buffer;

	//berechnet den ersten Sector des Root Directory
	FirstRootDirSecNum = ( bootp->BPB_RsvdSecCnt +
     6a4:	f8 01       	movw	r30, r16
     6a6:	80 89       	ldd	r24, Z+16	; 0x10
     6a8:	28 2f       	mov	r18, r24
     6aa:	33 27       	eor	r19, r19
     6ac:	86 89       	ldd	r24, Z+22	; 0x16
     6ae:	97 89       	ldd	r25, Z+23	; 0x17
     6b0:	28 9f       	mul	r18, r24
     6b2:	a0 01       	movw	r20, r0
     6b4:	29 9f       	mul	r18, r25
     6b6:	50 0d       	add	r21, r0
     6b8:	38 9f       	mul	r19, r24
     6ba:	50 0d       	add	r21, r0
     6bc:	11 24       	eor	r1, r1
     6be:	86 85       	ldd	r24, Z+14	; 0x0e
     6c0:	97 85       	ldd	r25, Z+15	; 0x0f
     6c2:	84 0f       	add	r24, r20
     6c4:	95 1f       	adc	r25, r21
	                       (bootp->BPB_NumFATs * bootp->BPB_FATSz16));

	FirstRootDirSecNum+= volume_boot_record_addr;
     6c6:	20 91 34 01 	lds	r18, 0x0134
     6ca:	30 91 35 01 	lds	r19, 0x0135
	
	return(FirstRootDirSecNum);
}
     6ce:	82 0f       	add	r24, r18
     6d0:	93 1f       	adc	r25, r19
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	08 95       	ret

000006d8 <fat_load>:

//############################################################################
//	Ausgabe des angegebenen Directory Eintrag in Entry_Count
//	ist kein Eintrag vorhanden, ist der Eintrag im 
//	Rückgabe Cluster 0xFFFF. Es wird immer nur ein Eintrag ausgegeben
//	um Speicherplatz zu sparen um es auch für kleine Atmels zu benutzen
U16 fat_read_dir_ent (U16 dir_cluster, //Angabe Dir Cluster
					U08 Entry_Count,   //Angabe welcher Direintrag
					U32 *Size, 		   //Rückgabe der File Größe
					U08 *Dir_Attrib,   //Rückgabe des Dir Attributs
					U08 *Buffer) 	   //Working Buffer
//############################################################################
{
	U08 *pointer;
	U16 TMP_Entry_Count = 0;
	U32 Block = 0;
	struct DirEntry *dir; //Zeiger auf einen Verzeichniseintrag

	pointer = Buffer;

	if (dir_cluster == 0)
		{
		Block = fat_root_dir_addr(Buffer);
		}
	else
		{
		//Berechnung des Blocks aus BlockCount und Cluster aus FATTabelle
		//Berechnung welcher Cluster zu laden ist
		//Auslesen der FAT - Tabelle
		fat_load (dir_cluster,&Block,Buffer);			 
		Block = ((Block-2) * cluster_size) + cluster_offset;
		}

	//auslesen des gesamten Root Directory
	for (U16 blk = Block;;blk++)
	{
		mmc_read_sector (blk,Buffer);	//Lesen eines Blocks des Root Directory
		for (U16 a=0;a<BlockSize; a = a + 32)
		{
		 dir=(struct DirEntry *)&Buffer[a]; //Zeiger auf aktuellen Verzeichniseintrag holen
		 
			if (dir->DIR_Name[0] == 0) //Kein weiterer Eintrag wenn erstes Zeichen des Namens 0 ist
			{
			return (0xFFFF);
			}
			
			//Prüfen ob es ein 8.3 Eintrag ist
			//Das ist der Fall wenn es sich nicht um einen Eintrag für lange Dateinamen
			//oder um einen als gelöscht markierten Eintrag handelt.
   			if ((dir->DIR_Attr != ATTR_LONG_NAME) &&
				(dir->DIR_Name[0] != DIR_ENTRY_IS_FREE)) 
			{
				//Ist es der gewünschte Verzeichniseintrag
				if (TMP_Entry_Count == Entry_Count) 
				{
					//Speichern des Verzeichnis Eintrages in den Rückgabe Buffer
					for(U08 b=0;b<11;b++)
					{
					if (dir->DIR_Name[b] != SPACE)
						{
						if (b == 8)
							{
							*pointer++= '.';
							}
						*pointer++=dir->DIR_Name[b];
						}
					}						
					*pointer++='\0';
					*Dir_Attrib = dir->DIR_Attr;

					//Speichern der Filegröße
					*Size=dir->DIR_FileSize;
					
					//Speichern des Clusters des Verzeichniseintrages
					dir_cluster = dir->DIR_FstClusLO;

					//Eintrag gefunden Rücksprung mit Cluster File Start
					return(dir_cluster);
				}
			TMP_Entry_Count++;
			}
		}
	}
	return (0xFFFF); //Kein Eintrag mehr gefunden Rücksprung mit 0xFFFF
}

//############################################################################
//	Auslesen der Cluster für ein File aus der FAT
//	in den Buffer(512Byte). Bei einer 128MB MMC/SD 
//	Karte ist die Cluster größe normalerweise 16KB groß
//	das bedeutet das File kann max. 4MByte groß sein.
//	Bei größeren Files muß der Buffer größer definiert
//	werden! (Ready)
//	Cluster = Start Clusterangabe aus dem Directory	
void fat_load (	U16 Cluster, 		//Angabe Startcluster
				U32 *Block,
				U08 *TMP_Buffer) 	//Workingbuffer
//############################################################################
{
     6d8:	af 92       	push	r10
     6da:	bf 92       	push	r11
     6dc:	cf 92       	push	r12
     6de:	df 92       	push	r13
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	ec 01       	movw	r28, r24
     6ee:	5b 01       	movw	r10, r22
     6f0:	6a 01       	movw	r12, r20
	//Zum Überprüfen ob der FAT Block schon geladen wurde
	U16 FAT_Block_Store = 0;	
     6f2:	00 e0       	ldi	r16, 0x00	; 0
     6f4:	10 e0       	ldi	r17, 0x00	; 0

	//Byte Adresse innerhalb des Fat Blocks
	U16 FAT_Byte_Addresse;	

	//FAT Block Adresse
	U16 FAT_Block_Addresse;
	
	//Berechnung für den ersten FAT Block (FAT Start Addresse)
	for (U16 a = 0;;a++)
     6f6:	78 01       	movw	r14, r16
	{	
		if (a == *Block)
     6f8:	98 01       	movw	r18, r16
     6fa:	44 27       	eor	r20, r20
     6fc:	55 27       	eor	r21, r21
     6fe:	f5 01       	movw	r30, r10
     700:	80 81       	ld	r24, Z
     702:	91 81       	ldd	r25, Z+1	; 0x01
     704:	a2 81       	ldd	r26, Z+2	; 0x02
     706:	b3 81       	ldd	r27, Z+3	; 0x03
     708:	28 17       	cp	r18, r24
     70a:	39 07       	cpc	r19, r25
     70c:	4a 07       	cpc	r20, r26
     70e:	5b 07       	cpc	r21, r27
     710:	41 f4       	brne	.+16     	; 0x722
			{
			*Block = (0x0000FFFF & Cluster);
     712:	ce 01       	movw	r24, r28
     714:	aa 27       	eor	r26, r26
     716:	bb 27       	eor	r27, r27
     718:	80 83       	st	Z, r24
     71a:	91 83       	std	Z+1, r25	; 0x01
     71c:	a2 83       	std	Z+2, r26	; 0x02
     71e:	b3 83       	std	Z+3, r27	; 0x03
			return;
     720:	32 c0       	rjmp	.+100    	; 0x786
			}
		
		if (Cluster == 0xFFFF)
     722:	ff ef       	ldi	r31, 0xFF	; 255
     724:	cf 3f       	cpi	r28, 0xFF	; 255
     726:	df 07       	cpc	r29, r31
     728:	71 f1       	breq	.+92     	; 0x786
			{
			break; //Ist das Ende des Files erreicht Schleife beenden
			}
		//Berechnung des Bytes innerhalb des FAT Block´s
		FAT_Byte_Addresse = (Cluster*2) % BlockSize;
     72a:	ce 01       	movw	r24, r28
     72c:	8c 0f       	add	r24, r28
     72e:	9d 1f       	adc	r25, r29
     730:	ec 01       	movw	r28, r24
     732:	d1 70       	andi	r29, 0x01	; 1
			
		//Berechnung des Blocks der gelesen werden muß
		FAT_Block_Addresse = ((Cluster*2) / BlockSize) + 
     734:	9c 01       	movw	r18, r24
     736:	23 2f       	mov	r18, r19
     738:	33 27       	eor	r19, r19
     73a:	26 95       	lsr	r18
     73c:	80 91 34 01 	lds	r24, 0x0134
     740:	90 91 35 01 	lds	r25, 0x0135
     744:	28 0f       	add	r18, r24
     746:	39 1f       	adc	r19, r25
     748:	80 91 36 01 	lds	r24, 0x0136
     74c:	90 91 37 01 	lds	r25, 0x0137
     750:	28 0f       	add	r18, r24
     752:	39 1f       	adc	r19, r25
								volume_boot_record_addr + fat_offset;	
		//Lesen des FAT Blocks
		//Überprüfung ob dieser Block schon gelesen wurde
		if (FAT_Block_Addresse != FAT_Block_Store)
     754:	2e 15       	cp	r18, r14
     756:	3f 05       	cpc	r19, r15
     758:	49 f0       	breq	.+18     	; 0x76c
			{
			FAT_Block_Store = FAT_Block_Addresse;
     75a:	79 01       	movw	r14, r18
			//Lesen des FAT Blocks
			mmc_read_sector (FAT_Block_Addresse,TMP_Buffer);	
     75c:	c9 01       	movw	r24, r18
     75e:	aa 27       	eor	r26, r26
     760:	bb 27       	eor	r27, r27
     762:	a6 01       	movw	r20, r12
     764:	bc 01       	movw	r22, r24
     766:	cd 01       	movw	r24, r26
     768:	0e 94 76 02 	call	0x4ec
			}

		//Lesen der nächsten Clusternummer
		Cluster = (TMP_Buffer[FAT_Byte_Addresse + 1] << 8) + 
     76c:	f6 01       	movw	r30, r12
     76e:	ec 0f       	add	r30, r28
     770:	fd 1f       	adc	r31, r29
     772:	81 81       	ldd	r24, Z+1	; 0x01
     774:	99 27       	eor	r25, r25
     776:	d8 2f       	mov	r29, r24
     778:	cc 27       	eor	r28, r28
     77a:	80 81       	ld	r24, Z
     77c:	c8 0f       	add	r28, r24
     77e:	d1 1d       	adc	r29, r1
     780:	0f 5f       	subi	r16, 0xFF	; 255
     782:	1f 4f       	sbci	r17, 0xFF	; 255
     784:	b9 cf       	rjmp	.-142    	; 0x6f8
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	df 90       	pop	r13
     794:	cf 90       	pop	r12
     796:	bf 90       	pop	r11
     798:	af 90       	pop	r10
     79a:	08 95       	ret

0000079c <fat_read_dir_ent>:
     79c:	5f 92       	push	r5
     79e:	6f 92       	push	r6
     7a0:	7f 92       	push	r7
     7a2:	8f 92       	push	r8
     7a4:	9f 92       	push	r9
     7a6:	af 92       	push	r10
     7a8:	bf 92       	push	r11
     7aa:	cf 92       	push	r12
     7ac:	df 92       	push	r13
     7ae:	ef 92       	push	r14
     7b0:	ff 92       	push	r15
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	24 97       	sbiw	r28, 0x04	; 4
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	f8 94       	cli
     7c4:	de bf       	out	0x3e, r29	; 62
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	cd bf       	out	0x3d, r28	; 61
     7ca:	56 2e       	mov	r5, r22
     7cc:	3a 01       	movw	r6, r20
     7ce:	49 01       	movw	r8, r18
     7d0:	68 01       	movw	r12, r16
     7d2:	aa 24       	eor	r10, r10
     7d4:	bb 24       	eor	r11, r11
     7d6:	19 82       	std	Y+1, r1	; 0x01
     7d8:	1a 82       	std	Y+2, r1	; 0x02
     7da:	1b 82       	std	Y+3, r1	; 0x03
     7dc:	1c 82       	std	Y+4, r1	; 0x04
     7de:	00 97       	sbiw	r24, 0x00	; 0
     7e0:	49 f4       	brne	.+18     	; 0x7f4
     7e2:	c8 01       	movw	r24, r16
     7e4:	0e 94 44 03 	call	0x688
     7e8:	aa 27       	eor	r26, r26
     7ea:	bb 27       	eor	r27, r27
     7ec:	25 c0       	rjmp	.+74     	; 0x838
     7ee:	8f ef       	ldi	r24, 0xFF	; 255
     7f0:	9f ef       	ldi	r25, 0xFF	; 255
     7f2:	74 c0       	rjmp	.+232    	; 0x8dc
     7f4:	a8 01       	movw	r20, r16
     7f6:	be 01       	movw	r22, r28
     7f8:	6f 5f       	subi	r22, 0xFF	; 255
     7fa:	7f 4f       	sbci	r23, 0xFF	; 255
     7fc:	0e 94 6c 03 	call	0x6d8
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	9a 81       	ldd	r25, Y+2	; 0x02
     804:	ab 81       	ldd	r26, Y+3	; 0x03
     806:	bc 81       	ldd	r27, Y+4	; 0x04
     808:	02 97       	sbiw	r24, 0x02	; 2
     80a:	a1 09       	sbc	r26, r1
     80c:	b1 09       	sbc	r27, r1
     80e:	20 91 3a 01 	lds	r18, 0x013A
     812:	33 27       	eor	r19, r19
     814:	44 27       	eor	r20, r20
     816:	55 27       	eor	r21, r21
     818:	bc 01       	movw	r22, r24
     81a:	cd 01       	movw	r24, r26
     81c:	0e 94 4a 0b 	call	0x1694
     820:	9b 01       	movw	r18, r22
     822:	ac 01       	movw	r20, r24
     824:	80 91 38 01 	lds	r24, 0x0138
     828:	90 91 39 01 	lds	r25, 0x0139
     82c:	aa 27       	eor	r26, r26
     82e:	bb 27       	eor	r27, r27
     830:	82 0f       	add	r24, r18
     832:	93 1f       	adc	r25, r19
     834:	a4 1f       	adc	r26, r20
     836:	b5 1f       	adc	r27, r21
     838:	89 83       	std	Y+1, r24	; 0x01
     83a:	9a 83       	std	Y+2, r25	; 0x02
     83c:	ab 83       	std	Y+3, r26	; 0x03
     83e:	bc 83       	std	Y+4, r27	; 0x04
     840:	e9 80       	ldd	r14, Y+1	; 0x01
     842:	fa 80       	ldd	r15, Y+2	; 0x02
     844:	c7 01       	movw	r24, r14
     846:	aa 27       	eor	r26, r26
     848:	bb 27       	eor	r27, r27
     84a:	a6 01       	movw	r20, r12
     84c:	bc 01       	movw	r22, r24
     84e:	cd 01       	movw	r24, r26
     850:	0e 94 76 02 	call	0x4ec
     854:	45 2d       	mov	r20, r5
     856:	55 27       	eor	r21, r21
     858:	f6 01       	movw	r30, r12
     85a:	96 01       	movw	r18, r12
     85c:	21 50       	subi	r18, 0x01	; 1
     85e:	3e 4f       	sbci	r19, 0xFE	; 254
     860:	90 81       	ld	r25, Z
     862:	99 23       	and	r25, r25
     864:	21 f2       	breq	.-120    	; 0x7ee
     866:	83 85       	ldd	r24, Z+11	; 0x0b
     868:	8f 30       	cpi	r24, 0x0F	; 15
     86a:	81 f1       	breq	.+96     	; 0x8cc
     86c:	95 3e       	cpi	r25, 0xE5	; 229
     86e:	71 f1       	breq	.+92     	; 0x8cc
     870:	a4 16       	cp	r10, r20
     872:	b5 06       	cpc	r11, r21
     874:	41 f5       	brne	.+80     	; 0x8c6
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	2e e2       	ldi	r18, 0x2E	; 46
     87a:	af 01       	movw	r20, r30
     87c:	da 01       	movw	r26, r20
     87e:	8c 91       	ld	r24, X
     880:	80 32       	cpi	r24, 0x20	; 32
     882:	51 f0       	breq	.+20     	; 0x898
     884:	98 30       	cpi	r25, 0x08	; 8
     886:	19 f4       	brne	.+6      	; 0x88e
     888:	d8 01       	movw	r26, r16
     88a:	2d 93       	st	X+, r18
     88c:	8d 01       	movw	r16, r26
     88e:	da 01       	movw	r26, r20
     890:	8c 91       	ld	r24, X
     892:	d8 01       	movw	r26, r16
     894:	8d 93       	st	X+, r24
     896:	8d 01       	movw	r16, r26
     898:	9f 5f       	subi	r25, 0xFF	; 255
     89a:	4f 5f       	subi	r20, 0xFF	; 255
     89c:	5f 4f       	sbci	r21, 0xFF	; 255
     89e:	9b 30       	cpi	r25, 0x0B	; 11
     8a0:	68 f3       	brcs	.-38     	; 0x87c
     8a2:	d8 01       	movw	r26, r16
     8a4:	1c 92       	st	X, r1
     8a6:	83 85       	ldd	r24, Z+11	; 0x0b
     8a8:	d4 01       	movw	r26, r8
     8aa:	8c 93       	st	X, r24
     8ac:	24 8d       	ldd	r18, Z+28	; 0x1c
     8ae:	35 8d       	ldd	r19, Z+29	; 0x1d
     8b0:	46 8d       	ldd	r20, Z+30	; 0x1e
     8b2:	57 8d       	ldd	r21, Z+31	; 0x1f
     8b4:	d3 01       	movw	r26, r6
     8b6:	2d 93       	st	X+, r18
     8b8:	3d 93       	st	X+, r19
     8ba:	4d 93       	st	X+, r20
     8bc:	5c 93       	st	X, r21
     8be:	13 97       	sbiw	r26, 0x03	; 3
     8c0:	82 8d       	ldd	r24, Z+26	; 0x1a
     8c2:	93 8d       	ldd	r25, Z+27	; 0x1b
     8c4:	0b c0       	rjmp	.+22     	; 0x8dc
     8c6:	08 94       	sec
     8c8:	a1 1c       	adc	r10, r1
     8ca:	b1 1c       	adc	r11, r1
     8cc:	b0 96       	adiw	r30, 0x20	; 32
     8ce:	2e 17       	cp	r18, r30
     8d0:	3f 07       	cpc	r19, r31
     8d2:	30 f6       	brcc	.-116    	; 0x860
     8d4:	08 94       	sec
     8d6:	e1 1c       	adc	r14, r1
     8d8:	f1 1c       	adc	r15, r1
     8da:	b4 cf       	rjmp	.-152    	; 0x844
     8dc:	24 96       	adiw	r28, 0x04	; 4
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	de bf       	out	0x3e, r29	; 62
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	cd bf       	out	0x3d, r28	; 61
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	df 90       	pop	r13
     8f6:	cf 90       	pop	r12
     8f8:	bf 90       	pop	r11
     8fa:	af 90       	pop	r10
     8fc:	9f 90       	pop	r9
     8fe:	8f 90       	pop	r8
     900:	7f 90       	pop	r7
     902:	6f 90       	pop	r6
     904:	5f 90       	pop	r5
     906:	08 95       	ret

00000908 <fat_cluster_data_store>:
					TMP_Buffer[FAT_Byte_Addresse];		
	}
	return;
}

//############################################################################
//Auslesen Cluster Size der MMC/SD Karte und Speichern der größe ins EEprom
//Auslesen Cluster Offset der MMC/SD Karte und Speichern der größe ins EEprom
void fat_cluster_data_store (void)
//############################################################################
{
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
     910:	c0 50       	subi	r28, 0x00	; 0
     912:	d2 40       	sbci	r29, 0x02	; 2
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
     918:	de bf       	out	0x3e, r29	; 62
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	cd bf       	out	0x3d, r28	; 61
	struct BootSec *bootp; //Zeiger auf Bootsektor Struktur

	U08 Buffer[BlockSize];

	volume_boot_record_addr = fat_addr (Buffer);	
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	0e 94 1d 03 	call	0x63a
     926:	90 93 35 01 	sts	0x0135, r25
     92a:	80 93 34 01 	sts	0x0134, r24
   
	mmc_read_sector (volume_boot_record_addr,Buffer);
     92e:	aa 27       	eor	r26, r26
     930:	bb 27       	eor	r27, r27
     932:	ae 01       	movw	r20, r28
     934:	4f 5f       	subi	r20, 0xFF	; 255
     936:	5f 4f       	sbci	r21, 0xFF	; 255
     938:	bc 01       	movw	r22, r24
     93a:	cd 01       	movw	r24, r26
     93c:	0e 94 76 02 	call	0x4ec

    bootp=(struct BootSec *)Buffer;

	cluster_size = bootp->BPB_SecPerClus;
     940:	8e 85       	ldd	r24, Y+14	; 0x0e
     942:	80 93 3a 01 	sts	0x013A, r24

	fat_offset = bootp->BPB_RsvdSecCnt;
     946:	8f 85       	ldd	r24, Y+15	; 0x0f
     948:	98 89       	ldd	r25, Y+16	; 0x10
     94a:	90 93 37 01 	sts	0x0137, r25
     94e:	80 93 36 01 	sts	0x0136, r24

	cluster_offset = ((bootp->BPB_BytesPerSec * 32)/BlockSize);	
     952:	8c 85       	ldd	r24, Y+12	; 0x0c
     954:	9d 85       	ldd	r25, Y+13	; 0x0d
     956:	75 e0       	ldi	r23, 0x05	; 5
     958:	88 0f       	add	r24, r24
     95a:	99 1f       	adc	r25, r25
     95c:	7a 95       	dec	r23
     95e:	e1 f7       	brne	.-8      	; 0x958
     960:	89 2f       	mov	r24, r25
     962:	99 27       	eor	r25, r25
     964:	86 95       	lsr	r24
     966:	90 93 39 01 	sts	0x0139, r25
     96a:	80 93 38 01 	sts	0x0138, r24
	cluster_offset += fat_root_dir_addr(Buffer);
     96e:	ce 01       	movw	r24, r28
     970:	01 96       	adiw	r24, 0x01	; 1
     972:	0e 94 44 03 	call	0x688
     976:	20 91 38 01 	lds	r18, 0x0138
     97a:	30 91 39 01 	lds	r19, 0x0139
     97e:	28 0f       	add	r18, r24
     980:	39 1f       	adc	r19, r25
     982:	30 93 39 01 	sts	0x0139, r19
     986:	20 93 38 01 	sts	0x0138, r18
     98a:	c0 50       	subi	r28, 0x00	; 0
     98c:	de 4f       	sbci	r29, 0xFE	; 254
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	de bf       	out	0x3e, r29	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	cd bf       	out	0x3d, r28	; 61
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <fat_read_file>:
}

//############################################################################
//Lesen eines 512Bytes Blocks von einem File
void fat_read_file (U16 Cluster,//Angabe des Startclusters vom File
				 U08 *Buffer,	  //Workingbuffer
				 U32 BlockCount)	  //Angabe welcher Bock vom File geladen 
										      //werden soll a 512 Bytes
//############################################################################
{
     99e:	4f 92       	push	r4
     9a0:	5f 92       	push	r5
     9a2:	6f 92       	push	r6
     9a4:	7f 92       	push	r7
     9a6:	8f 92       	push	r8
     9a8:	9f 92       	push	r9
     9aa:	af 92       	push	r10
     9ac:	bf 92       	push	r11
     9ae:	cf 92       	push	r12
     9b0:	df 92       	push	r13
     9b2:	ef 92       	push	r14
     9b4:	ff 92       	push	r15
     9b6:	0f 93       	push	r16
     9b8:	1f 93       	push	r17
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
     9c2:	24 97       	sbiw	r28, 0x04	; 4
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	f8 94       	cli
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	cd bf       	out	0x3d, r28	; 61
     9ce:	8c 01       	movw	r16, r24
     9d0:	2b 01       	movw	r4, r22
     9d2:	39 01       	movw	r6, r18
     9d4:	4a 01       	movw	r8, r20
	//Berechnung des Blocks aus BlockCount und Cluster aus FATTabelle
	//Berechnung welcher Cluster zu laden ist
	
	U32 Block = (BlockCount/cluster_size);
     9d6:	80 91 3a 01 	lds	r24, 0x013A
     9da:	28 2f       	mov	r18, r24
     9dc:	33 27       	eor	r19, r19
     9de:	44 27       	eor	r20, r20
     9e0:	55 27       	eor	r21, r21
     9e2:	c4 01       	movw	r24, r8
     9e4:	b3 01       	movw	r22, r6
     9e6:	0e 94 69 0b 	call	0x16d2
     9ea:	29 83       	std	Y+1, r18	; 0x01
     9ec:	3a 83       	std	Y+2, r19	; 0x02
     9ee:	4b 83       	std	Y+3, r20	; 0x03
     9f0:	5c 83       	std	Y+4, r21	; 0x04
	
	//Auslesen der FAT - Tabelle
	fat_load (Cluster,&Block,Buffer);			 
     9f2:	a2 01       	movw	r20, r4
     9f4:	be 01       	movw	r22, r28
     9f6:	6f 5f       	subi	r22, 0xFF	; 255
     9f8:	7f 4f       	sbci	r23, 0xFF	; 255
     9fa:	c8 01       	movw	r24, r16
     9fc:	0e 94 6c 03 	call	0x6d8
	Block = ((Block-2) * cluster_size) + cluster_offset;
     a00:	89 81       	ldd	r24, Y+1	; 0x01
     a02:	9a 81       	ldd	r25, Y+2	; 0x02
     a04:	ab 81       	ldd	r26, Y+3	; 0x03
     a06:	bc 81       	ldd	r27, Y+4	; 0x04
     a08:	02 97       	sbiw	r24, 0x02	; 2
     a0a:	a1 09       	sbc	r26, r1
     a0c:	b1 09       	sbc	r27, r1
     a0e:	20 91 3a 01 	lds	r18, 0x013A
     a12:	a2 2e       	mov	r10, r18
     a14:	bb 24       	eor	r11, r11
     a16:	cc 24       	eor	r12, r12
     a18:	dd 24       	eor	r13, r13
     a1a:	bc 01       	movw	r22, r24
     a1c:	cd 01       	movw	r24, r26
     a1e:	a6 01       	movw	r20, r12
     a20:	95 01       	movw	r18, r10
     a22:	0e 94 4a 0b 	call	0x1694
     a26:	7b 01       	movw	r14, r22
     a28:	8c 01       	movw	r16, r24
     a2a:	80 91 38 01 	lds	r24, 0x0138
     a2e:	90 91 39 01 	lds	r25, 0x0139
     a32:	aa 27       	eor	r26, r26
     a34:	bb 27       	eor	r27, r27
     a36:	e8 0e       	add	r14, r24
     a38:	f9 1e       	adc	r15, r25
     a3a:	0a 1f       	adc	r16, r26
     a3c:	1b 1f       	adc	r17, r27
	//Berechnung des Blocks innerhalb des Cluster
	Block += (BlockCount % cluster_size);
     a3e:	c4 01       	movw	r24, r8
     a40:	b3 01       	movw	r22, r6
     a42:	0e 94 69 0b 	call	0x16d2
     a46:	dc 01       	movw	r26, r24
     a48:	cb 01       	movw	r24, r22
     a4a:	e8 0e       	add	r14, r24
     a4c:	f9 1e       	adc	r15, r25
     a4e:	0a 1f       	adc	r16, r26
     a50:	1b 1f       	adc	r17, r27
     a52:	e9 82       	std	Y+1, r14	; 0x01
     a54:	fa 82       	std	Y+2, r15	; 0x02
     a56:	0b 83       	std	Y+3, r16	; 0x03
     a58:	1c 83       	std	Y+4, r17	; 0x04
	//Read Data Block from Device
	mmc_read_sector (Block,Buffer);	
     a5a:	a2 01       	movw	r20, r4
     a5c:	c8 01       	movw	r24, r16
     a5e:	b7 01       	movw	r22, r14
     a60:	0e 94 76 02 	call	0x4ec
     a64:	24 96       	adiw	r28, 0x04	; 4
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	de bf       	out	0x3e, r29	; 62
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	cd bf       	out	0x3d, r28	; 61
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	ff 90       	pop	r15
     a7a:	ef 90       	pop	r14
     a7c:	df 90       	pop	r13
     a7e:	cf 90       	pop	r12
     a80:	bf 90       	pop	r11
     a82:	af 90       	pop	r10
     a84:	9f 90       	pop	r9
     a86:	8f 90       	pop	r8
     a88:	7f 90       	pop	r7
     a8a:	6f 90       	pop	r6
     a8c:	5f 90       	pop	r5
     a8e:	4f 90       	pop	r4
     a90:	08 95       	ret

00000a92 <fat_write_file>:
	return;
}

//############################################################################
//Lesen eines 512Bytes Blocks von einem File
void fat_write_file (U16 cluster,//Angabe des Startclusters vom File
					U08 *buffer,	  //Workingbuffer
					U32 blockCount)	  //Angabe welcher Bock vom File gespeichert 
									  //werden soll a 512 Bytes
//############################################################################
{
     a92:	2f 92       	push	r2
     a94:	3f 92       	push	r3
     a96:	4f 92       	push	r4
     a98:	5f 92       	push	r5
     a9a:	6f 92       	push	r6
     a9c:	7f 92       	push	r7
     a9e:	8f 92       	push	r8
     aa0:	9f 92       	push	r9
     aa2:	af 92       	push	r10
     aa4:	bf 92       	push	r11
     aa6:	cf 92       	push	r12
     aa8:	df 92       	push	r13
     aaa:	ef 92       	push	r14
     aac:	ff 92       	push	r15
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	c5 50       	subi	r28, 0x05	; 5
     abc:	d2 40       	sbci	r29, 0x02	; 2
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	de bf       	out	0x3e, r29	; 62
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	cd bf       	out	0x3d, r28	; 61
     ac8:	8c 01       	movw	r16, r24
     aca:	1b 01       	movw	r2, r22
     acc:	29 01       	movw	r4, r18
     ace:	3a 01       	movw	r6, r20
	//Berechnung des Blocks aus BlockCount und Cluster aus FATTabelle
	//Berechnung welcher Cluster zu speichern ist
	U08 tmp_buffer[513];	
	U32 block = (blockCount/cluster_size);
     ad0:	80 91 3a 01 	lds	r24, 0x013A
     ad4:	28 2f       	mov	r18, r24
     ad6:	33 27       	eor	r19, r19
     ad8:	44 27       	eor	r20, r20
     ada:	55 27       	eor	r21, r21
     adc:	c3 01       	movw	r24, r6
     ade:	b2 01       	movw	r22, r4
     ae0:	0e 94 69 0b 	call	0x16d2
     ae4:	e2 e0       	ldi	r30, 0x02	; 2
     ae6:	8e 2e       	mov	r8, r30
     ae8:	9e 2e       	mov	r9, r30
     aea:	8c 0e       	add	r8, r28
     aec:	9d 1e       	adc	r9, r29
     aee:	f4 01       	movw	r30, r8
     af0:	20 83       	st	Z, r18
     af2:	31 83       	std	Z+1, r19	; 0x01
     af4:	42 83       	std	Z+2, r20	; 0x02
     af6:	53 83       	std	Z+3, r21	; 0x03
	
	//Auslesen der FAT - Tabelle
	fat_load (cluster,&block,tmp_buffer);			 
     af8:	ae 01       	movw	r20, r28
     afa:	4f 5f       	subi	r20, 0xFF	; 255
     afc:	5f 4f       	sbci	r21, 0xFF	; 255
     afe:	b4 01       	movw	r22, r8
     b00:	c8 01       	movw	r24, r16
     b02:	0e 94 6c 03 	call	0x6d8
	block = ((block-2) * cluster_size) + cluster_offset;
     b06:	f4 01       	movw	r30, r8
     b08:	80 81       	ld	r24, Z
     b0a:	91 81       	ldd	r25, Z+1	; 0x01
     b0c:	a2 81       	ldd	r26, Z+2	; 0x02
     b0e:	b3 81       	ldd	r27, Z+3	; 0x03
     b10:	02 97       	sbiw	r24, 0x02	; 2
     b12:	a1 09       	sbc	r26, r1
     b14:	b1 09       	sbc	r27, r1
     b16:	20 91 3a 01 	lds	r18, 0x013A
     b1a:	a2 2e       	mov	r10, r18
     b1c:	bb 24       	eor	r11, r11
     b1e:	cc 24       	eor	r12, r12
     b20:	dd 24       	eor	r13, r13
     b22:	bc 01       	movw	r22, r24
     b24:	cd 01       	movw	r24, r26
     b26:	a6 01       	movw	r20, r12
     b28:	95 01       	movw	r18, r10
     b2a:	0e 94 4a 0b 	call	0x1694
     b2e:	7b 01       	movw	r14, r22
     b30:	8c 01       	movw	r16, r24
     b32:	80 91 38 01 	lds	r24, 0x0138
     b36:	90 91 39 01 	lds	r25, 0x0139
     b3a:	aa 27       	eor	r26, r26
     b3c:	bb 27       	eor	r27, r27
     b3e:	e8 0e       	add	r14, r24
     b40:	f9 1e       	adc	r15, r25
     b42:	0a 1f       	adc	r16, r26
     b44:	1b 1f       	adc	r17, r27
	//Berechnung des Blocks innerhalb des Cluster
	block += (blockCount % cluster_size);
     b46:	c3 01       	movw	r24, r6
     b48:	b2 01       	movw	r22, r4
     b4a:	0e 94 69 0b 	call	0x16d2
     b4e:	dc 01       	movw	r26, r24
     b50:	cb 01       	movw	r24, r22
     b52:	e8 0e       	add	r14, r24
     b54:	f9 1e       	adc	r15, r25
     b56:	0a 1f       	adc	r16, r26
     b58:	1b 1f       	adc	r17, r27
     b5a:	f4 01       	movw	r30, r8
     b5c:	e0 82       	st	Z, r14
     b5e:	f1 82       	std	Z+1, r15	; 0x01
     b60:	02 83       	std	Z+2, r16	; 0x02
     b62:	13 83       	std	Z+3, r17	; 0x03
	//Write Data Block to Device
	mmc_write_sector (block,buffer);	
     b64:	a1 01       	movw	r20, r2
     b66:	c8 01       	movw	r24, r16
     b68:	b7 01       	movw	r22, r14
     b6a:	0e 94 c6 01 	call	0x38c
     b6e:	cb 5f       	subi	r28, 0xFB	; 251
     b70:	dd 4f       	sbci	r29, 0xFD	; 253
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	f8 94       	cli
     b76:	de bf       	out	0x3e, r29	; 62
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	cd bf       	out	0x3d, r28	; 61
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	ff 90       	pop	r15
     b86:	ef 90       	pop	r14
     b88:	df 90       	pop	r13
     b8a:	cf 90       	pop	r12
     b8c:	bf 90       	pop	r11
     b8e:	af 90       	pop	r10
     b90:	9f 90       	pop	r9
     b92:	8f 90       	pop	r8
     b94:	7f 90       	pop	r7
     b96:	6f 90       	pop	r6
     b98:	5f 90       	pop	r5
     b9a:	4f 90       	pop	r4
     b9c:	3f 90       	pop	r3
     b9e:	2f 90       	pop	r2
     ba0:	08 95       	ret

00000ba2 <fat_search_file>:
	return;
}

//####################################################################################
//Sucht ein File im Directory
U08 fat_search_file (U08 *File_Name,		//Name des zu suchenden Files
							U16 *Cluster, 	//Angabe Dir Cluster welches
											//durchsucht werden soll
											//und Rückgabe des clusters
											//vom File welches gefunden
											//wurde
							U32 *Size, 		//Rückgabe der File Größe
							U08 *Dir_Attrib,//Rückgabe des Dir Attributs
							U08 *Buffer) 	//Working Buffer
//####################################################################################
{
     ba2:	4f 92       	push	r4
     ba4:	5f 92       	push	r5
     ba6:	6f 92       	push	r6
     ba8:	7f 92       	push	r7
     baa:	8f 92       	push	r8
     bac:	9f 92       	push	r9
     bae:	af 92       	push	r10
     bb0:	bf 92       	push	r11
     bb2:	df 92       	push	r13
     bb4:	ef 92       	push	r14
     bb6:	ff 92       	push	r15
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	2c 01       	movw	r4, r24
     bc2:	7b 01       	movw	r14, r22
     bc4:	3a 01       	movw	r6, r20
     bc6:	49 01       	movw	r8, r18
     bc8:	e8 01       	movw	r28, r16
	U16 Dir_Cluster_Store = *Cluster;
     bca:	fb 01       	movw	r30, r22
     bcc:	a0 80       	ld	r10, Z
     bce:	b1 80       	ldd	r11, Z+1	; 0x01
	for (U08 a = 0;a < 100;a++)
     bd0:	dd 24       	eor	r13, r13
	{
		*Cluster = fat_read_dir_ent(Dir_Cluster_Store,a,Size,Dir_Attrib,Buffer);
     bd2:	8e 01       	movw	r16, r28
     bd4:	94 01       	movw	r18, r8
     bd6:	a3 01       	movw	r20, r6
     bd8:	6d 2d       	mov	r22, r13
     bda:	c5 01       	movw	r24, r10
     bdc:	0e 94 ce 03 	call	0x79c
     be0:	f7 01       	movw	r30, r14
     be2:	80 83       	st	Z, r24
     be4:	91 83       	std	Z+1, r25	; 0x01
		if (*Cluster == 0xffff)
     be6:	8f 5f       	subi	r24, 0xFF	; 255
     be8:	9f 4f       	sbci	r25, 0xFF	; 255
     bea:	19 f4       	brne	.+6      	; 0xbf2
			{
			return(0); //File not Found
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0f c0       	rjmp	.+30     	; 0xc10
			}
		if(strcasecmp(File_Name,Buffer) == 0)
     bf2:	be 01       	movw	r22, r28
     bf4:	c2 01       	movw	r24, r4
     bf6:	0e 94 b5 06 	call	0xd6a
     bfa:	89 2b       	or	r24, r25
     bfc:	19 f4       	brne	.+6      	; 0xc04
			{
			return(1); //File Found
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	06 c0       	rjmp	.+12     	; 0xc10
     c04:	d3 94       	inc	r13
     c06:	23 e6       	ldi	r18, 0x63	; 99
     c08:	2d 15       	cp	r18, r13
     c0a:	18 f7       	brcc	.-58     	; 0xbd2
			}
	}
	return(2); //Error
     c0c:	82 e0       	ldi	r24, 0x02	; 2
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	ff 90       	pop	r15
     c1a:	ef 90       	pop	r14
     c1c:	df 90       	pop	r13
     c1e:	bf 90       	pop	r11
     c20:	af 90       	pop	r10
     c22:	9f 90       	pop	r9
     c24:	8f 90       	pop	r8
     c26:	7f 90       	pop	r7
     c28:	6f 90       	pop	r6
     c2a:	5f 90       	pop	r5
     c2c:	4f 90       	pop	r4
     c2e:	08 95       	ret

00000c30 <fdevopen>:
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	8c 01       	movw	r16, r24
     c3a:	eb 01       	movw	r28, r22
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	a1 f1       	breq	.+104    	; 0xca8
     c40:	6c e0       	ldi	r22, 0x0C	; 12
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 c4 09 	call	0x1388
     c4c:	fc 01       	movw	r30, r24
     c4e:	89 2b       	or	r24, r25
     c50:	21 f1       	breq	.+72     	; 0xc9a
     c52:	20 97       	sbiw	r28, 0x00	; 0
     c54:	51 f0       	breq	.+20     	; 0xc6a
     c56:	c2 87       	std	Z+10, r28	; 0x0a
     c58:	d3 87       	std	Z+11, r29	; 0x0b
     c5a:	21 e0       	ldi	r18, 0x01	; 1
     c5c:	23 83       	std	Z+3, r18	; 0x03
     c5e:	80 91 3b 01 	lds	r24, 0x013B
     c62:	90 91 3c 01 	lds	r25, 0x013C
     c66:	89 2b       	or	r24, r25
     c68:	d1 f0       	breq	.+52     	; 0xc9e
     c6a:	01 15       	cp	r16, r1
     c6c:	11 05       	cpc	r17, r1
     c6e:	a9 f0       	breq	.+42     	; 0xc9a
     c70:	00 87       	std	Z+8, r16	; 0x08
     c72:	11 87       	std	Z+9, r17	; 0x09
     c74:	03 81       	ldd	r16, Z+3	; 0x03
     c76:	02 60       	ori	r16, 0x02	; 2
     c78:	03 83       	std	Z+3, r16	; 0x03
     c7a:	a0 91 3d 01 	lds	r26, 0x013D
     c7e:	b0 91 3e 01 	lds	r27, 0x013E
     c82:	ab 2b       	or	r26, r27
     c84:	51 f4       	brne	.+20     	; 0xc9a
     c86:	f0 93 3e 01 	sts	0x013E, r31
     c8a:	e0 93 3d 01 	sts	0x013D, r30
     c8e:	c0 91 3f 01 	lds	r28, 0x013F
     c92:	d0 91 40 01 	lds	r29, 0x0140
     c96:	cd 2b       	or	r28, r29
     c98:	51 f0       	breq	.+20     	; 0xcae
     c9a:	cf 01       	movw	r24, r30
     c9c:	0d c0       	rjmp	.+26     	; 0xcb8
     c9e:	f0 93 3c 01 	sts	0x013C, r31
     ca2:	e0 93 3b 01 	sts	0x013B, r30
     ca6:	e1 cf       	rjmp	.-62     	; 0xc6a
     ca8:	67 2b       	or	r22, r23
     caa:	51 f6       	brne	.-108    	; 0xc40
     cac:	05 c0       	rjmp	.+10     	; 0xcb8
     cae:	f0 93 40 01 	sts	0x0140, r31
     cb2:	e0 93 3f 01 	sts	0x013F, r30
     cb6:	f1 cf       	rjmp	.-30     	; 0xc9a
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	08 95       	ret

00000cc2 <printf>:
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	e5 e0       	ldi	r30, 0x05	; 5
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	ec 0f       	add	r30, r28
     cd0:	fd 1f       	adc	r31, r29
     cd2:	81 91       	ld	r24, Z+
     cd4:	91 91       	ld	r25, Z+
     cd6:	af 01       	movw	r20, r30
     cd8:	bc 01       	movw	r22, r24
     cda:	80 91 3d 01 	lds	r24, 0x013D
     cde:	90 91 3e 01 	lds	r25, 0x013E
     ce2:	0e 94 c7 06 	call	0xd8e
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	08 95       	ret

00000cec <putchar>:
     cec:	60 91 3d 01 	lds	r22, 0x013D
     cf0:	70 91 3e 01 	lds	r23, 0x013E
     cf4:	0e 94 e0 09 	call	0x13c0
     cf8:	08 95       	ret

00000cfa <puts>:
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	dc 01       	movw	r26, r24
     d04:	00 e0       	ldi	r16, 0x00	; 0
     d06:	10 e0       	ldi	r17, 0x00	; 0
     d08:	e0 91 3d 01 	lds	r30, 0x013D
     d0c:	f0 91 3e 01 	lds	r31, 0x013E
     d10:	83 81       	ldd	r24, Z+3	; 0x03
     d12:	81 ff       	sbrs	r24, 1
     d14:	23 c0       	rjmp	.+70     	; 0xd5c
     d16:	8d 91       	ld	r24, X+
     d18:	ed 01       	movw	r28, r26
     d1a:	88 23       	and	r24, r24
     d1c:	29 f4       	brne	.+10     	; 0xd28
     d1e:	13 c0       	rjmp	.+38     	; 0xd46
     d20:	e0 91 3d 01 	lds	r30, 0x013D
     d24:	f0 91 3e 01 	lds	r31, 0x013E
     d28:	00 84       	ldd	r0, Z+8	; 0x08
     d2a:	f1 85       	ldd	r31, Z+9	; 0x09
     d2c:	e0 2d       	mov	r30, r0
     d2e:	09 95       	icall
     d30:	89 2b       	or	r24, r25
     d32:	11 f0       	breq	.+4      	; 0xd38
     d34:	0f ef       	ldi	r16, 0xFF	; 255
     d36:	1f ef       	ldi	r17, 0xFF	; 255
     d38:	89 91       	ld	r24, Y+
     d3a:	88 23       	and	r24, r24
     d3c:	89 f7       	brne	.-30     	; 0xd20
     d3e:	e0 91 3d 01 	lds	r30, 0x013D
     d42:	f0 91 3e 01 	lds	r31, 0x013E
     d46:	00 84       	ldd	r0, Z+8	; 0x08
     d48:	f1 85       	ldd	r31, Z+9	; 0x09
     d4a:	e0 2d       	mov	r30, r0
     d4c:	8a e0       	ldi	r24, 0x0A	; 10
     d4e:	09 95       	icall
     d50:	89 2b       	or	r24, r25
     d52:	11 f0       	breq	.+4      	; 0xd58
     d54:	0f ef       	ldi	r16, 0xFF	; 255
     d56:	1f ef       	ldi	r17, 0xFF	; 255
     d58:	c8 01       	movw	r24, r16
     d5a:	02 c0       	rjmp	.+4      	; 0xd60
     d5c:	8f ef       	ldi	r24, 0xFF	; 255
     d5e:	9f ef       	ldi	r25, 0xFF	; 255
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	1f 91       	pop	r17
     d66:	0f 91       	pop	r16
     d68:	08 95       	ret

00000d6a <strcasecmp>:
     d6a:	fb 01       	movw	r30, r22
     d6c:	dc 01       	movw	r26, r24

00000d6e <.strcasecmp_loop>:
     d6e:	8d 91       	ld	r24, X+
     d70:	61 91       	ld	r22, Z+
     d72:	56 2f       	mov	r21, r22
     d74:	50 62       	ori	r21, 0x20	; 32
     d76:	51 36       	cpi	r21, 0x61	; 97
     d78:	24 f0       	brlt	.+8      	; 0xd82
     d7a:	5b 37       	cpi	r21, 0x7B	; 123
     d7c:	14 f4       	brge	.+4      	; 0xd82
     d7e:	60 62       	ori	r22, 0x20	; 32
     d80:	80 62       	ori	r24, 0x20	; 32

00000d82 <.strcasecmp_tst>:
     d82:	86 1b       	sub	r24, r22
     d84:	11 f4       	brne	.+4      	; 0xd8a
     d86:	66 23       	and	r22, r22
     d88:	91 f7       	brne	.-28     	; 0xd6e

00000d8a <.strcasecmp_done>:
     d8a:	99 0b       	sbc	r25, r25
     d8c:	08 95       	ret

00000d8e <vfprintf>:
     d8e:	2f 92       	push	r2
     d90:	3f 92       	push	r3
     d92:	4f 92       	push	r4
     d94:	5f 92       	push	r5
     d96:	6f 92       	push	r6
     d98:	7f 92       	push	r7
     d9a:	8f 92       	push	r8
     d9c:	9f 92       	push	r9
     d9e:	af 92       	push	r10
     da0:	bf 92       	push	r11
     da2:	cf 92       	push	r12
     da4:	df 92       	push	r13
     da6:	ef 92       	push	r14
     da8:	ff 92       	push	r15
     daa:	0f 93       	push	r16
     dac:	1f 93       	push	r17
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	62 97       	sbiw	r28, 0x12	; 18
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	aa 24       	eor	r10, r10
     dc4:	bb 24       	eor	r11, r11
     dc6:	65 01       	movw	r12, r10
     dc8:	4c 01       	movw	r8, r24
     dca:	1b 01       	movw	r2, r22
     dcc:	4d 87       	std	Y+13, r20	; 0x0d
     dce:	5e 87       	std	Y+14, r21	; 0x0e
     dd0:	44 24       	eor	r4, r4
     dd2:	55 24       	eor	r5, r5
     dd4:	fc 01       	movw	r30, r24
     dd6:	46 82       	std	Z+6, r4	; 0x06
     dd8:	57 82       	std	Z+7, r5	; 0x07
     dda:	83 81       	ldd	r24, Z+3	; 0x03
     ddc:	81 fd       	sbrc	r24, 1
     dde:	ac c2       	rjmp	.+1368   	; 0x1338
     de0:	8f ef       	ldi	r24, 0xFF	; 255
     de2:	9f ef       	ldi	r25, 0xFF	; 255
     de4:	b8 c2       	rjmp	.+1392   	; 0x1356
     de6:	08 94       	sec
     de8:	21 1c       	adc	r2, r1
     dea:	31 1c       	adc	r3, r1
     dec:	40 fe       	sbrs	r4, 0
     dee:	92 c2       	rjmp	.+1316   	; 0x1314
     df0:	86 2d       	mov	r24, r6
     df2:	80 53       	subi	r24, 0x30	; 48
     df4:	8a 30       	cpi	r24, 0x0A	; 10
     df6:	f0 f4       	brcc	.+60     	; 0xe34
     df8:	f0 e3       	ldi	r31, 0x30	; 48
     dfa:	6f 16       	cp	r6, r31
     dfc:	51 f4       	brne	.+20     	; 0xe12
     dfe:	2a 89       	ldd	r18, Y+18	; 0x12
     e00:	22 23       	and	r18, r18
     e02:	39 f4       	brne	.+14     	; 0xe12
     e04:	43 fc       	sbrc	r4, 3
     e06:	05 c0       	rjmp	.+10     	; 0xe12
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	91 e0       	ldi	r25, 0x01	; 1
     e0c:	48 2a       	or	r4, r24
     e0e:	59 2a       	or	r5, r25
     e10:	93 c2       	rjmp	.+1318   	; 0x1338
     e12:	8a e0       	ldi	r24, 0x0A	; 10
     e14:	9a 89       	ldd	r25, Y+18	; 0x12
     e16:	98 9f       	mul	r25, r24
     e18:	90 2d       	mov	r25, r0
     e1a:	11 24       	eor	r1, r1
     e1c:	89 2f       	mov	r24, r25
     e1e:	86 0d       	add	r24, r6
     e20:	80 53       	subi	r24, 0x30	; 48
     e22:	8a 8b       	std	Y+18, r24	; 0x12
     e24:	88 23       	and	r24, r24
     e26:	14 f4       	brge	.+4      	; 0xe2c
     e28:	ef e7       	ldi	r30, 0x7F	; 127
     e2a:	ea 8b       	std	Y+18, r30	; 0x12
     e2c:	43 fc       	sbrc	r4, 3
     e2e:	84 c2       	rjmp	.+1288   	; 0x1338
     e30:	7a 88       	ldd	r7, Y+18	; 0x12
     e32:	82 c2       	rjmp	.+1284   	; 0x1338
     e34:	43 fe       	sbrs	r4, 3
     e36:	05 c0       	rjmp	.+10     	; 0xe42
     e38:	fa 89       	ldd	r31, Y+18	; 0x12
     e3a:	ff 23       	and	r31, r31
     e3c:	11 f4       	brne	.+4      	; 0xe42
     e3e:	21 e0       	ldi	r18, 0x01	; 1
     e40:	2a 8b       	std	Y+18, r18	; 0x12
     e42:	86 2d       	mov	r24, r6
     e44:	99 27       	eor	r25, r25
     e46:	87 fd       	sbrc	r24, 7
     e48:	90 95       	com	r25
     e4a:	88 36       	cpi	r24, 0x68	; 104
     e4c:	91 05       	cpc	r25, r1
     e4e:	7c f5       	brge	.+94     	; 0xeae
     e50:	85 36       	cpi	r24, 0x65	; 101
     e52:	91 05       	cpc	r25, r1
     e54:	0c f0       	brlt	.+2      	; 0xe58
     e56:	70 c0       	rjmp	.+224    	; 0xf38
     e58:	83 35       	cpi	r24, 0x53	; 83
     e5a:	91 05       	cpc	r25, r1
     e5c:	09 f4       	brne	.+2      	; 0xe60
     e5e:	9f c0       	rjmp	.+318    	; 0xf9e
     e60:	84 35       	cpi	r24, 0x54	; 84
     e62:	91 05       	cpc	r25, r1
     e64:	bc f4       	brge	.+46     	; 0xe94
     e66:	8b 32       	cpi	r24, 0x2B	; 43
     e68:	91 05       	cpc	r25, r1
     e6a:	09 f4       	brne	.+2      	; 0xe6e
     e6c:	47 c0       	rjmp	.+142    	; 0xefc
     e6e:	8c 32       	cpi	r24, 0x2C	; 44
     e70:	91 05       	cpc	r25, r1
     e72:	44 f4       	brge	.+16     	; 0xe84
     e74:	80 32       	cpi	r24, 0x20	; 32
     e76:	91 05       	cpc	r25, r1
     e78:	09 f4       	brne	.+2      	; 0xe7c
     e7a:	44 c0       	rjmp	.+136    	; 0xf04
     e7c:	83 97       	sbiw	r24, 0x23	; 35
     e7e:	09 f4       	brne	.+2      	; 0xe82
     e80:	4b c0       	rjmp	.+150    	; 0xf18
     e82:	3e c2       	rjmp	.+1148   	; 0x1300
     e84:	8d 32       	cpi	r24, 0x2D	; 45
     e86:	91 05       	cpc	r25, r1
     e88:	09 f4       	brne	.+2      	; 0xe8c
     e8a:	41 c0       	rjmp	.+130    	; 0xf0e
     e8c:	8e 97       	sbiw	r24, 0x2e	; 46
     e8e:	09 f4       	brne	.+2      	; 0xe92
     e90:	48 c0       	rjmp	.+144    	; 0xf22
     e92:	36 c2       	rjmp	.+1132   	; 0x1300
     e94:	83 36       	cpi	r24, 0x63	; 99
     e96:	91 05       	cpc	r25, r1
     e98:	09 f4       	brne	.+2      	; 0xe9c
     e9a:	58 c0       	rjmp	.+176    	; 0xf4c
     e9c:	84 36       	cpi	r24, 0x64	; 100
     e9e:	91 05       	cpc	r25, r1
     ea0:	0c f0       	brlt	.+2      	; 0xea4
     ea2:	9a c0       	rjmp	.+308    	; 0xfd8
     ea4:	88 35       	cpi	r24, 0x58	; 88
     ea6:	91 05       	cpc	r25, r1
     ea8:	09 f4       	brne	.+2      	; 0xeac
     eaa:	d1 c0       	rjmp	.+418    	; 0x104e
     eac:	29 c2       	rjmp	.+1106   	; 0x1300
     eae:	80 37       	cpi	r24, 0x70	; 112
     eb0:	91 05       	cpc	r25, r1
     eb2:	09 f4       	brne	.+2      	; 0xeb6
     eb4:	c4 c0       	rjmp	.+392    	; 0x103e
     eb6:	81 37       	cpi	r24, 0x71	; 113
     eb8:	91 05       	cpc	r25, r1
     eba:	84 f4       	brge	.+32     	; 0xedc
     ebc:	8c 36       	cpi	r24, 0x6C	; 108
     ebe:	91 05       	cpc	r25, r1
     ec0:	b1 f1       	breq	.+108    	; 0xf2e
     ec2:	8d 36       	cpi	r24, 0x6D	; 109
     ec4:	91 05       	cpc	r25, r1
     ec6:	2c f4       	brge	.+10     	; 0xed2
     ec8:	89 36       	cpi	r24, 0x69	; 105
     eca:	91 05       	cpc	r25, r1
     ecc:	09 f4       	brne	.+2      	; 0xed0
     ece:	84 c0       	rjmp	.+264    	; 0xfd8
     ed0:	17 c2       	rjmp	.+1070   	; 0x1300
     ed2:	8f 36       	cpi	r24, 0x6F	; 111
     ed4:	91 05       	cpc	r25, r1
     ed6:	09 f4       	brne	.+2      	; 0xeda
     ed8:	af c0       	rjmp	.+350    	; 0x1038
     eda:	12 c2       	rjmp	.+1060   	; 0x1300
     edc:	85 37       	cpi	r24, 0x75	; 117
     ede:	91 05       	cpc	r25, r1
     ee0:	09 f4       	brne	.+2      	; 0xee4
     ee2:	b7 c0       	rjmp	.+366    	; 0x1052
     ee4:	86 37       	cpi	r24, 0x76	; 118
     ee6:	91 05       	cpc	r25, r1
     ee8:	24 f4       	brge	.+8      	; 0xef2
     eea:	83 37       	cpi	r24, 0x73	; 115
     eec:	91 05       	cpc	r25, r1
     eee:	b9 f1       	breq	.+110    	; 0xf5e
     ef0:	07 c2       	rjmp	.+1038   	; 0x1300
     ef2:	88 37       	cpi	r24, 0x78	; 120
     ef4:	91 05       	cpc	r25, r1
     ef6:	09 f4       	brne	.+2      	; 0xefa
     ef8:	aa c0       	rjmp	.+340    	; 0x104e
     efa:	02 c2       	rjmp	.+1028   	; 0x1300
     efc:	80 e1       	ldi	r24, 0x10	; 16
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	48 2a       	or	r4, r24
     f02:	59 2a       	or	r5, r25
     f04:	e0 e2       	ldi	r30, 0x20	; 32
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	4e 2a       	or	r4, r30
     f0a:	5f 2a       	or	r5, r31
     f0c:	15 c2       	rjmp	.+1066   	; 0x1338
     f0e:	20 e8       	ldi	r18, 0x80	; 128
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	42 2a       	or	r4, r18
     f14:	53 2a       	or	r5, r19
     f16:	10 c2       	rjmp	.+1056   	; 0x1338
     f18:	80 e4       	ldi	r24, 0x40	; 64
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	48 2a       	or	r4, r24
     f1e:	59 2a       	or	r5, r25
     f20:	0b c2       	rjmp	.+1046   	; 0x1338
     f22:	e8 e0       	ldi	r30, 0x08	; 8
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	4e 2a       	or	r4, r30
     f28:	5f 2a       	or	r5, r31
     f2a:	1a 8a       	std	Y+18, r1	; 0x12
     f2c:	05 c2       	rjmp	.+1034   	; 0x1338
     f2e:	24 e0       	ldi	r18, 0x04	; 4
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	42 2a       	or	r4, r18
     f34:	53 2a       	or	r5, r19
     f36:	00 c2       	rjmp	.+1024   	; 0x1338
     f38:	0f 2e       	mov	r0, r31
     f3a:	ff e3       	ldi	r31, 0x3F	; 63
     f3c:	af 2e       	mov	r10, r31
     f3e:	f0 2d       	mov	r31, r0
     f40:	7a 94       	dec	r7
     f42:	0f 2e       	mov	r0, r31
     f44:	f3 e6       	ldi	r31, 0x63	; 99
     f46:	6f 2e       	mov	r6, r31
     f48:	f0 2d       	mov	r31, r0
     f4a:	65 c1       	rjmp	.+714    	; 0x1216
     f4c:	ed 85       	ldd	r30, Y+13	; 0x0d
     f4e:	fe 85       	ldd	r31, Y+14	; 0x0e
     f50:	cf 01       	movw	r24, r30
     f52:	02 96       	adiw	r24, 0x02	; 2
     f54:	8d 87       	std	Y+13, r24	; 0x0d
     f56:	9e 87       	std	Y+14, r25	; 0x0e
     f58:	a0 80       	ld	r10, Z
     f5a:	7a 94       	dec	r7
     f5c:	5c c1       	rjmp	.+696    	; 0x1216
     f5e:	ed 85       	ldd	r30, Y+13	; 0x0d
     f60:	fe 85       	ldd	r31, Y+14	; 0x0e
     f62:	9f 01       	movw	r18, r30
     f64:	2e 5f       	subi	r18, 0xFE	; 254
     f66:	3f 4f       	sbci	r19, 0xFF	; 255
     f68:	2d 87       	std	Y+13, r18	; 0x0d
     f6a:	3e 87       	std	Y+14, r19	; 0x0e
     f6c:	a0 80       	ld	r10, Z
     f6e:	b1 80       	ldd	r11, Z+1	; 0x01
     f70:	43 fe       	sbrs	r4, 3
     f72:	0b c0       	rjmp	.+22     	; 0xf8a
     f74:	3a 89       	ldd	r19, Y+18	; 0x12
     f76:	83 2f       	mov	r24, r19
     f78:	99 27       	eor	r25, r25
     f7a:	87 fd       	sbrc	r24, 7
     f7c:	90 95       	com	r25
     f7e:	bc 01       	movw	r22, r24
     f80:	c5 01       	movw	r24, r10
     f82:	0e 94 34 0b 	call	0x1668
     f86:	8f 87       	std	Y+15, r24	; 0x0f
     f88:	07 c0       	rjmp	.+14     	; 0xf98
     f8a:	f5 01       	movw	r30, r10
     f8c:	01 90       	ld	r0, Z+
     f8e:	00 20       	and	r0, r0
     f90:	e9 f7       	brne	.-6      	; 0xf8c
     f92:	31 97       	sbiw	r30, 0x01	; 1
     f94:	ea 19       	sub	r30, r10
     f96:	ef 87       	std	Y+15, r30	; 0x0f
     f98:	8f 85       	ldd	r24, Y+15	; 0x0f
     f9a:	78 1a       	sub	r7, r24
     f9c:	3c c1       	rjmp	.+632    	; 0x1216
     f9e:	ed 85       	ldd	r30, Y+13	; 0x0d
     fa0:	fe 85       	ldd	r31, Y+14	; 0x0e
     fa2:	9f 01       	movw	r18, r30
     fa4:	2e 5f       	subi	r18, 0xFE	; 254
     fa6:	3f 4f       	sbci	r19, 0xFF	; 255
     fa8:	2d 87       	std	Y+13, r18	; 0x0d
     faa:	3e 87       	std	Y+14, r19	; 0x0e
     fac:	a0 80       	ld	r10, Z
     fae:	b1 80       	ldd	r11, Z+1	; 0x01
     fb0:	43 fe       	sbrs	r4, 3
     fb2:	0b c0       	rjmp	.+22     	; 0xfca
     fb4:	3a 89       	ldd	r19, Y+18	; 0x12
     fb6:	83 2f       	mov	r24, r19
     fb8:	99 27       	eor	r25, r25
     fba:	87 fd       	sbrc	r24, 7
     fbc:	90 95       	com	r25
     fbe:	bc 01       	movw	r22, r24
     fc0:	c5 01       	movw	r24, r10
     fc2:	0e 94 3f 0b 	call	0x167e
     fc6:	8f 87       	std	Y+15, r24	; 0x0f
     fc8:	04 c0       	rjmp	.+8      	; 0xfd2
     fca:	c5 01       	movw	r24, r10
     fcc:	0e 94 2b 0b 	call	0x1656
     fd0:	8f 87       	std	Y+15, r24	; 0x0f
     fd2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd4:	78 1a       	sub	r7, r24
     fd6:	1f c1       	rjmp	.+574    	; 0x1216
     fd8:	42 fe       	sbrs	r4, 2
     fda:	0c c0       	rjmp	.+24     	; 0xff4
     fdc:	ed 85       	ldd	r30, Y+13	; 0x0d
     fde:	fe 85       	ldd	r31, Y+14	; 0x0e
     fe0:	9f 01       	movw	r18, r30
     fe2:	2c 5f       	subi	r18, 0xFC	; 252
     fe4:	3f 4f       	sbci	r19, 0xFF	; 255
     fe6:	2d 87       	std	Y+13, r18	; 0x0d
     fe8:	3e 87       	std	Y+14, r19	; 0x0e
     fea:	20 81       	ld	r18, Z
     fec:	31 81       	ldd	r19, Z+1	; 0x01
     fee:	42 81       	ldd	r20, Z+2	; 0x02
     ff0:	53 81       	ldd	r21, Z+3	; 0x03
     ff2:	0d c0       	rjmp	.+26     	; 0x100e
     ff4:	ed 85       	ldd	r30, Y+13	; 0x0d
     ff6:	fe 85       	ldd	r31, Y+14	; 0x0e
     ff8:	cf 01       	movw	r24, r30
     ffa:	02 96       	adiw	r24, 0x02	; 2
     ffc:	8d 87       	std	Y+13, r24	; 0x0d
     ffe:	9e 87       	std	Y+14, r25	; 0x0e
    1000:	80 81       	ld	r24, Z
    1002:	91 81       	ldd	r25, Z+1	; 0x01
    1004:	9c 01       	movw	r18, r24
    1006:	44 27       	eor	r20, r20
    1008:	37 fd       	sbrc	r19, 7
    100a:	40 95       	com	r20
    100c:	54 2f       	mov	r21, r20
    100e:	59 01       	movw	r10, r18
    1010:	6a 01       	movw	r12, r20
    1012:	55 23       	and	r21, r21
    1014:	64 f4       	brge	.+24     	; 0x102e
    1016:	e2 e0       	ldi	r30, 0x02	; 2
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	4e 2a       	or	r4, r30
    101c:	5f 2a       	or	r5, r31
    101e:	d0 94       	com	r13
    1020:	c0 94       	com	r12
    1022:	b0 94       	com	r11
    1024:	a0 94       	com	r10
    1026:	a1 1c       	adc	r10, r1
    1028:	b1 1c       	adc	r11, r1
    102a:	c1 1c       	adc	r12, r1
    102c:	d1 1c       	adc	r13, r1
    102e:	2f eb       	ldi	r18, 0xBF	; 191
    1030:	3f ef       	ldi	r19, 0xFF	; 255
    1032:	42 22       	and	r4, r18
    1034:	53 22       	and	r5, r19
    1036:	2c c0       	rjmp	.+88     	; 0x1090
    1038:	38 e0       	ldi	r19, 0x08	; 8
    103a:	3f 87       	std	Y+15, r19	; 0x0f
    103c:	0a c0       	rjmp	.+20     	; 0x1052
    103e:	80 e4       	ldi	r24, 0x40	; 64
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	48 2a       	or	r4, r24
    1044:	59 2a       	or	r5, r25
    1046:	0f 2e       	mov	r0, r31
    1048:	f8 e7       	ldi	r31, 0x78	; 120
    104a:	6f 2e       	mov	r6, r31
    104c:	f0 2d       	mov	r31, r0
    104e:	90 e1       	ldi	r25, 0x10	; 16
    1050:	9f 87       	std	Y+15, r25	; 0x0f
    1052:	42 fe       	sbrs	r4, 2
    1054:	0c c0       	rjmp	.+24     	; 0x106e
    1056:	ed 85       	ldd	r30, Y+13	; 0x0d
    1058:	fe 85       	ldd	r31, Y+14	; 0x0e
    105a:	9f 01       	movw	r18, r30
    105c:	2c 5f       	subi	r18, 0xFC	; 252
    105e:	3f 4f       	sbci	r19, 0xFF	; 255
    1060:	2d 87       	std	Y+13, r18	; 0x0d
    1062:	3e 87       	std	Y+14, r19	; 0x0e
    1064:	20 81       	ld	r18, Z
    1066:	31 81       	ldd	r19, Z+1	; 0x01
    1068:	42 81       	ldd	r20, Z+2	; 0x02
    106a:	53 81       	ldd	r21, Z+3	; 0x03
    106c:	0b c0       	rjmp	.+22     	; 0x1084
    106e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1070:	fe 85       	ldd	r31, Y+14	; 0x0e
    1072:	cf 01       	movw	r24, r30
    1074:	02 96       	adiw	r24, 0x02	; 2
    1076:	8d 87       	std	Y+13, r24	; 0x0d
    1078:	9e 87       	std	Y+14, r25	; 0x0e
    107a:	80 81       	ld	r24, Z
    107c:	91 81       	ldd	r25, Z+1	; 0x01
    107e:	9c 01       	movw	r18, r24
    1080:	44 27       	eor	r20, r20
    1082:	55 27       	eor	r21, r21
    1084:	59 01       	movw	r10, r18
    1086:	6a 01       	movw	r12, r20
    1088:	ef ec       	ldi	r30, 0xCF	; 207
    108a:	ff ef       	ldi	r31, 0xFF	; 255
    108c:	4e 22       	and	r4, r30
    108e:	5f 22       	and	r5, r31
    1090:	9e 01       	movw	r18, r28
    1092:	2f 5f       	subi	r18, 0xFF	; 255
    1094:	3f 4f       	sbci	r19, 0xFF	; 255
    1096:	28 8b       	std	Y+16, r18	; 0x10
    1098:	39 8b       	std	Y+17, r19	; 0x11
    109a:	3f 85       	ldd	r19, Y+15	; 0x0f
    109c:	e3 2e       	mov	r14, r19
    109e:	ff 24       	eor	r15, r15
    10a0:	00 27       	eor	r16, r16
    10a2:	11 27       	eor	r17, r17
    10a4:	c6 01       	movw	r24, r12
    10a6:	b5 01       	movw	r22, r10
    10a8:	a8 01       	movw	r20, r16
    10aa:	97 01       	movw	r18, r14
    10ac:	0e 94 69 0b 	call	0x16d2
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	e8 89       	ldd	r30, Y+16	; 0x10
    10b6:	f9 89       	ldd	r31, Y+17	; 0x11
    10b8:	80 83       	st	Z, r24
    10ba:	8a 30       	cpi	r24, 0x0A	; 10
    10bc:	1c f0       	brlt	.+6      	; 0x10c4
    10be:	86 0d       	add	r24, r6
    10c0:	81 52       	subi	r24, 0x21	; 33
    10c2:	04 c0       	rjmp	.+8      	; 0x10cc
    10c4:	e8 89       	ldd	r30, Y+16	; 0x10
    10c6:	f9 89       	ldd	r31, Y+17	; 0x11
    10c8:	80 81       	ld	r24, Z
    10ca:	80 5d       	subi	r24, 0xD0	; 208
    10cc:	e8 89       	ldd	r30, Y+16	; 0x10
    10ce:	f9 89       	ldd	r31, Y+17	; 0x11
    10d0:	81 93       	st	Z+, r24
    10d2:	e8 8b       	std	Y+16, r30	; 0x10
    10d4:	f9 8b       	std	Y+17, r31	; 0x11
    10d6:	c6 01       	movw	r24, r12
    10d8:	b5 01       	movw	r22, r10
    10da:	a8 01       	movw	r20, r16
    10dc:	97 01       	movw	r18, r14
    10de:	0e 94 69 0b 	call	0x16d2
    10e2:	59 01       	movw	r10, r18
    10e4:	6a 01       	movw	r12, r20
    10e6:	21 15       	cp	r18, r1
    10e8:	31 05       	cpc	r19, r1
    10ea:	41 05       	cpc	r20, r1
    10ec:	51 05       	cpc	r21, r1
    10ee:	d1 f6       	brne	.-76     	; 0x10a4
    10f0:	ce 01       	movw	r24, r28
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	a8 88       	ldd	r10, Y+16	; 0x10
    10f6:	a8 1a       	sub	r10, r24
    10f8:	c2 01       	movw	r24, r4
    10fa:	82 73       	andi	r24, 0x32	; 50
    10fc:	90 70       	andi	r25, 0x00	; 0
    10fe:	89 2b       	or	r24, r25
    1100:	09 f0       	breq	.+2      	; 0x1104
    1102:	7a 94       	dec	r7
    1104:	46 fe       	sbrs	r4, 6
    1106:	0f c0       	rjmp	.+30     	; 0x1126
    1108:	87 2d       	mov	r24, r7
    110a:	99 27       	eor	r25, r25
    110c:	87 fd       	sbrc	r24, 7
    110e:	90 95       	com	r25
    1110:	ff 85       	ldd	r31, Y+15	; 0x0f
    1112:	f0 31       	cpi	r31, 0x10	; 16
    1114:	31 f4       	brne	.+12     	; 0x1122
    1116:	0f 2e       	mov	r0, r31
    1118:	fe ef       	ldi	r31, 0xFE	; 254
    111a:	7f 2e       	mov	r7, r31
    111c:	f0 2d       	mov	r31, r0
    111e:	78 0e       	add	r7, r24
    1120:	02 c0       	rjmp	.+4      	; 0x1126
    1122:	78 2e       	mov	r7, r24
    1124:	7a 94       	dec	r7
    1126:	43 fe       	sbrs	r4, 3
    1128:	12 c0       	rjmp	.+36     	; 0x114e
    112a:	8a 89       	ldd	r24, Y+18	; 0x12
    112c:	28 2f       	mov	r18, r24
    112e:	33 27       	eor	r19, r19
    1130:	27 fd       	sbrc	r18, 7
    1132:	30 95       	com	r19
    1134:	8a 2d       	mov	r24, r10
    1136:	99 27       	eor	r25, r25
    1138:	82 17       	cp	r24, r18
    113a:	93 07       	cpc	r25, r19
    113c:	2c f0       	brlt	.+10     	; 0x1148
    113e:	e7 ef       	ldi	r30, 0xF7	; 247
    1140:	ff ef       	ldi	r31, 0xFF	; 255
    1142:	4e 22       	and	r4, r30
    1144:	5f 22       	and	r5, r31
    1146:	03 c0       	rjmp	.+6      	; 0x114e
    1148:	fa 89       	ldd	r31, Y+18	; 0x12
    114a:	fa 19       	sub	r31, r10
    114c:	fa 8b       	std	Y+18, r31	; 0x12
    114e:	43 fe       	sbrs	r4, 3
    1150:	03 c0       	rjmp	.+6      	; 0x1158
    1152:	2a 89       	ldd	r18, Y+18	; 0x12
    1154:	72 1a       	sub	r7, r18
    1156:	01 c0       	rjmp	.+2      	; 0x115a
    1158:	7a 18       	sub	r7, r10
    115a:	c2 01       	movw	r24, r4
    115c:	80 78       	andi	r24, 0x80	; 128
    115e:	91 70       	andi	r25, 0x01	; 1
    1160:	89 2b       	or	r24, r25
    1162:	69 f4       	brne	.+26     	; 0x117e
    1164:	87 2d       	mov	r24, r7
    1166:	7a 94       	dec	r7
    1168:	18 16       	cp	r1, r24
    116a:	4c f4       	brge	.+18     	; 0x117e
    116c:	b4 01       	movw	r22, r8
    116e:	80 e2       	ldi	r24, 0x20	; 32
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	0e 94 e0 09 	call	0x13c0
    1176:	87 2d       	mov	r24, r7
    1178:	7a 94       	dec	r7
    117a:	18 16       	cp	r1, r24
    117c:	bc f3       	brlt	.-18     	; 0x116c
    117e:	41 fe       	sbrs	r4, 1
    1180:	06 c0       	rjmp	.+12     	; 0x118e
    1182:	b4 01       	movw	r22, r8
    1184:	8d e2       	ldi	r24, 0x2D	; 45
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	0e 94 e0 09 	call	0x13c0
    118c:	0f c0       	rjmp	.+30     	; 0x11ac
    118e:	44 fe       	sbrs	r4, 4
    1190:	06 c0       	rjmp	.+12     	; 0x119e
    1192:	b4 01       	movw	r22, r8
    1194:	8b e2       	ldi	r24, 0x2B	; 43
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0e 94 e0 09 	call	0x13c0
    119c:	07 c0       	rjmp	.+14     	; 0x11ac
    119e:	45 fe       	sbrs	r4, 5
    11a0:	05 c0       	rjmp	.+10     	; 0x11ac
    11a2:	b4 01       	movw	r22, r8
    11a4:	80 e2       	ldi	r24, 0x20	; 32
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	0e 94 e0 09 	call	0x13c0
    11ac:	46 fe       	sbrs	r4, 6
    11ae:	0f c0       	rjmp	.+30     	; 0x11ce
    11b0:	b4 01       	movw	r22, r8
    11b2:	80 e3       	ldi	r24, 0x30	; 48
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 e0 09 	call	0x13c0
    11ba:	3f 85       	ldd	r19, Y+15	; 0x0f
    11bc:	30 31       	cpi	r19, 0x10	; 16
    11be:	39 f4       	brne	.+14     	; 0x11ce
    11c0:	b4 01       	movw	r22, r8
    11c2:	86 2d       	mov	r24, r6
    11c4:	99 27       	eor	r25, r25
    11c6:	87 fd       	sbrc	r24, 7
    11c8:	90 95       	com	r25
    11ca:	0e 94 e0 09 	call	0x13c0
    11ce:	85 2d       	mov	r24, r5
    11d0:	99 27       	eor	r25, r25
    11d2:	80 ff       	sbrs	r24, 0
    11d4:	0d c0       	rjmp	.+26     	; 0x11f0
    11d6:	87 2d       	mov	r24, r7
    11d8:	7a 94       	dec	r7
    11da:	18 16       	cp	r1, r24
    11dc:	4c f4       	brge	.+18     	; 0x11f0
    11de:	b4 01       	movw	r22, r8
    11e0:	80 e3       	ldi	r24, 0x30	; 48
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	0e 94 e0 09 	call	0x13c0
    11e8:	87 2d       	mov	r24, r7
    11ea:	7a 94       	dec	r7
    11ec:	18 16       	cp	r1, r24
    11ee:	bc f3       	brlt	.-18     	; 0x11de
    11f0:	43 fe       	sbrs	r4, 3
    11f2:	11 c0       	rjmp	.+34     	; 0x1216
    11f4:	8a 89       	ldd	r24, Y+18	; 0x12
    11f6:	98 2f       	mov	r25, r24
    11f8:	91 50       	subi	r25, 0x01	; 1
    11fa:	9a 8b       	std	Y+18, r25	; 0x12
    11fc:	18 16       	cp	r1, r24
    11fe:	5c f4       	brge	.+22     	; 0x1216
    1200:	b4 01       	movw	r22, r8
    1202:	80 e3       	ldi	r24, 0x30	; 48
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 e0 09 	call	0x13c0
    120a:	8a 89       	ldd	r24, Y+18	; 0x12
    120c:	e8 2f       	mov	r30, r24
    120e:	e1 50       	subi	r30, 0x01	; 1
    1210:	ea 8b       	std	Y+18, r30	; 0x12
    1212:	18 16       	cp	r1, r24
    1214:	ac f3       	brlt	.-22     	; 0x1200
    1216:	47 fc       	sbrc	r4, 7
    1218:	0d c0       	rjmp	.+26     	; 0x1234
    121a:	87 2d       	mov	r24, r7
    121c:	7a 94       	dec	r7
    121e:	18 16       	cp	r1, r24
    1220:	4c f4       	brge	.+18     	; 0x1234
    1222:	b4 01       	movw	r22, r8
    1224:	80 e2       	ldi	r24, 0x20	; 32
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 e0 09 	call	0x13c0
    122c:	87 2d       	mov	r24, r7
    122e:	7a 94       	dec	r7
    1230:	18 16       	cp	r1, r24
    1232:	bc f3       	brlt	.-18     	; 0x1222
    1234:	f3 e6       	ldi	r31, 0x63	; 99
    1236:	6f 16       	cp	r6, r31
    1238:	41 f4       	brne	.+16     	; 0x124a
    123a:	8a 2d       	mov	r24, r10
    123c:	b4 01       	movw	r22, r8
    123e:	99 27       	eor	r25, r25
    1240:	87 fd       	sbrc	r24, 7
    1242:	90 95       	com	r25
    1244:	0e 94 e0 09 	call	0x13c0
    1248:	4b c0       	rjmp	.+150    	; 0x12e0
    124a:	23 e7       	ldi	r18, 0x73	; 115
    124c:	62 16       	cp	r6, r18
    124e:	b9 f4       	brne	.+46     	; 0x127e
    1250:	3f 85       	ldd	r19, Y+15	; 0x0f
    1252:	31 50       	subi	r19, 0x01	; 1
    1254:	3f 87       	std	Y+15, r19	; 0x0f
    1256:	3f 3f       	cpi	r19, 0xFF	; 255
    1258:	09 f4       	brne	.+2      	; 0x125c
    125a:	42 c0       	rjmp	.+132    	; 0x12e0
    125c:	f5 01       	movw	r30, r10
    125e:	80 81       	ld	r24, Z
    1260:	08 94       	sec
    1262:	a1 1c       	adc	r10, r1
    1264:	b1 1c       	adc	r11, r1
    1266:	b4 01       	movw	r22, r8
    1268:	99 27       	eor	r25, r25
    126a:	87 fd       	sbrc	r24, 7
    126c:	90 95       	com	r25
    126e:	0e 94 e0 09 	call	0x13c0
    1272:	8f 85       	ldd	r24, Y+15	; 0x0f
    1274:	81 50       	subi	r24, 0x01	; 1
    1276:	8f 87       	std	Y+15, r24	; 0x0f
    1278:	8f 3f       	cpi	r24, 0xFF	; 255
    127a:	81 f7       	brne	.-32     	; 0x125c
    127c:	31 c0       	rjmp	.+98     	; 0x12e0
    127e:	93 e5       	ldi	r25, 0x53	; 83
    1280:	69 16       	cp	r6, r25
    1282:	a1 f4       	brne	.+40     	; 0x12ac
    1284:	ef 85       	ldd	r30, Y+15	; 0x0f
    1286:	e1 50       	subi	r30, 0x01	; 1
    1288:	ef 87       	std	Y+15, r30	; 0x0f
    128a:	ef 3f       	cpi	r30, 0xFF	; 255
    128c:	49 f1       	breq	.+82     	; 0x12e0
    128e:	f5 01       	movw	r30, r10
    1290:	84 91       	lpm	r24, Z
    1292:	b4 01       	movw	r22, r8
    1294:	99 27       	eor	r25, r25
    1296:	0e 94 e0 09 	call	0x13c0
    129a:	08 94       	sec
    129c:	a1 1c       	adc	r10, r1
    129e:	b1 1c       	adc	r11, r1
    12a0:	ff 85       	ldd	r31, Y+15	; 0x0f
    12a2:	f1 50       	subi	r31, 0x01	; 1
    12a4:	ff 87       	std	Y+15, r31	; 0x0f
    12a6:	ff 3f       	cpi	r31, 0xFF	; 255
    12a8:	91 f7       	brne	.-28     	; 0x128e
    12aa:	1a c0       	rjmp	.+52     	; 0x12e0
    12ac:	ce 01       	movw	r24, r28
    12ae:	01 96       	adiw	r24, 0x01	; 1
    12b0:	28 89       	ldd	r18, Y+16	; 0x10
    12b2:	39 89       	ldd	r19, Y+17	; 0x11
    12b4:	82 17       	cp	r24, r18
    12b6:	93 07       	cpc	r25, r19
    12b8:	99 f0       	breq	.+38     	; 0x12e0
    12ba:	8e 01       	movw	r16, r28
    12bc:	0f 5f       	subi	r16, 0xFF	; 255
    12be:	1f 4f       	sbci	r17, 0xFF	; 255
    12c0:	e8 89       	ldd	r30, Y+16	; 0x10
    12c2:	f9 89       	ldd	r31, Y+17	; 0x11
    12c4:	82 91       	ld	r24, -Z
    12c6:	e8 8b       	std	Y+16, r30	; 0x10
    12c8:	f9 8b       	std	Y+17, r31	; 0x11
    12ca:	b4 01       	movw	r22, r8
    12cc:	99 27       	eor	r25, r25
    12ce:	87 fd       	sbrc	r24, 7
    12d0:	90 95       	com	r25
    12d2:	0e 94 e0 09 	call	0x13c0
    12d6:	28 89       	ldd	r18, Y+16	; 0x10
    12d8:	39 89       	ldd	r19, Y+17	; 0x11
    12da:	02 17       	cp	r16, r18
    12dc:	13 07       	cpc	r17, r19
    12de:	81 f7       	brne	.-32     	; 0x12c0
    12e0:	47 fe       	sbrs	r4, 7
    12e2:	15 c0       	rjmp	.+42     	; 0x130e
    12e4:	87 2d       	mov	r24, r7
    12e6:	7a 94       	dec	r7
    12e8:	18 16       	cp	r1, r24
    12ea:	8c f4       	brge	.+34     	; 0x130e
    12ec:	b4 01       	movw	r22, r8
    12ee:	80 e2       	ldi	r24, 0x20	; 32
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	0e 94 e0 09 	call	0x13c0
    12f6:	87 2d       	mov	r24, r7
    12f8:	7a 94       	dec	r7
    12fa:	18 16       	cp	r1, r24
    12fc:	bc f3       	brlt	.-18     	; 0x12ec
    12fe:	07 c0       	rjmp	.+14     	; 0x130e
    1300:	b4 01       	movw	r22, r8
    1302:	86 2d       	mov	r24, r6
    1304:	99 27       	eor	r25, r25
    1306:	87 fd       	sbrc	r24, 7
    1308:	90 95       	com	r25
    130a:	0e 94 e0 09 	call	0x13c0
    130e:	44 24       	eor	r4, r4
    1310:	55 24       	eor	r5, r5
    1312:	12 c0       	rjmp	.+36     	; 0x1338
    1314:	35 e2       	ldi	r19, 0x25	; 37
    1316:	63 16       	cp	r6, r19
    1318:	41 f4       	brne	.+16     	; 0x132a
    131a:	44 24       	eor	r4, r4
    131c:	55 24       	eor	r5, r5
    131e:	43 94       	inc	r4
    1320:	1a 8a       	std	Y+18, r1	; 0x12
    1322:	7a 88       	ldd	r7, Y+18	; 0x12
    1324:	8a e0       	ldi	r24, 0x0A	; 10
    1326:	8f 87       	std	Y+15, r24	; 0x0f
    1328:	07 c0       	rjmp	.+14     	; 0x1338
    132a:	b4 01       	movw	r22, r8
    132c:	86 2d       	mov	r24, r6
    132e:	99 27       	eor	r25, r25
    1330:	87 fd       	sbrc	r24, 7
    1332:	90 95       	com	r25
    1334:	0e 94 e0 09 	call	0x13c0
    1338:	f4 01       	movw	r30, r8
    133a:	83 81       	ldd	r24, Z+3	; 0x03
    133c:	83 ff       	sbrs	r24, 3
    133e:	03 c0       	rjmp	.+6      	; 0x1346
    1340:	f1 01       	movw	r30, r2
    1342:	64 90       	lpm	r6, Z
    1344:	02 c0       	rjmp	.+4      	; 0x134a
    1346:	f1 01       	movw	r30, r2
    1348:	60 80       	ld	r6, Z
    134a:	66 20       	and	r6, r6
    134c:	09 f0       	breq	.+2      	; 0x1350
    134e:	4b cd       	rjmp	.-1386   	; 0xde6
    1350:	f4 01       	movw	r30, r8
    1352:	86 81       	ldd	r24, Z+6	; 0x06
    1354:	97 81       	ldd	r25, Z+7	; 0x07
    1356:	62 96       	adiw	r28, 0x12	; 18
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	ff 90       	pop	r15
    136c:	ef 90       	pop	r14
    136e:	df 90       	pop	r13
    1370:	cf 90       	pop	r12
    1372:	bf 90       	pop	r11
    1374:	af 90       	pop	r10
    1376:	9f 90       	pop	r9
    1378:	8f 90       	pop	r8
    137a:	7f 90       	pop	r7
    137c:	6f 90       	pop	r6
    137e:	5f 90       	pop	r5
    1380:	4f 90       	pop	r4
    1382:	3f 90       	pop	r3
    1384:	2f 90       	pop	r2
    1386:	08 95       	ret

00001388 <calloc>:
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	86 9f       	mul	r24, r22
    1392:	80 01       	movw	r16, r0
    1394:	87 9f       	mul	r24, r23
    1396:	10 0d       	add	r17, r0
    1398:	96 9f       	mul	r25, r22
    139a:	10 0d       	add	r17, r0
    139c:	11 24       	eor	r1, r1
    139e:	c8 01       	movw	r24, r16
    13a0:	0e 94 13 0a 	call	0x1426
    13a4:	ec 01       	movw	r28, r24
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	29 f0       	breq	.+10     	; 0x13b4
    13aa:	a8 01       	movw	r20, r16
    13ac:	60 e0       	ldi	r22, 0x00	; 0
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	0e 94 24 0b 	call	0x1648
    13b4:	ce 01       	movw	r24, r28
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	1f 91       	pop	r17
    13bc:	0f 91       	pop	r16
    13be:	08 95       	ret

000013c0 <fputc>:
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	8c 01       	movw	r16, r24
    13ca:	eb 01       	movw	r28, r22
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	99 27       	eor	r25, r25
    13d0:	81 ff       	sbrs	r24, 1
    13d2:	22 c0       	rjmp	.+68     	; 0x1418
    13d4:	82 ff       	sbrs	r24, 2
    13d6:	14 c0       	rjmp	.+40     	; 0x1400
    13d8:	2e 81       	ldd	r18, Y+6	; 0x06
    13da:	3f 81       	ldd	r19, Y+7	; 0x07
    13dc:	8c 81       	ldd	r24, Y+4	; 0x04
    13de:	9d 81       	ldd	r25, Y+5	; 0x05
    13e0:	28 17       	cp	r18, r24
    13e2:	39 07       	cpc	r19, r25
    13e4:	3c f4       	brge	.+14     	; 0x13f4
    13e6:	e8 81       	ld	r30, Y
    13e8:	f9 81       	ldd	r31, Y+1	; 0x01
    13ea:	01 93       	st	Z+, r16
    13ec:	e8 83       	st	Y, r30
    13ee:	f9 83       	std	Y+1, r31	; 0x01
    13f0:	2e 81       	ldd	r18, Y+6	; 0x06
    13f2:	3f 81       	ldd	r19, Y+7	; 0x07
    13f4:	2f 5f       	subi	r18, 0xFF	; 255
    13f6:	3f 4f       	sbci	r19, 0xFF	; 255
    13f8:	2e 83       	std	Y+6, r18	; 0x06
    13fa:	3f 83       	std	Y+7, r19	; 0x07
    13fc:	c8 01       	movw	r24, r16
    13fe:	0e c0       	rjmp	.+28     	; 0x141c
    1400:	e8 85       	ldd	r30, Y+8	; 0x08
    1402:	f9 85       	ldd	r31, Y+9	; 0x09
    1404:	80 2f       	mov	r24, r16
    1406:	09 95       	icall
    1408:	89 2b       	or	r24, r25
    140a:	31 f4       	brne	.+12     	; 0x1418
    140c:	ae 81       	ldd	r26, Y+6	; 0x06
    140e:	bf 81       	ldd	r27, Y+7	; 0x07
    1410:	11 96       	adiw	r26, 0x01	; 1
    1412:	ae 83       	std	Y+6, r26	; 0x06
    1414:	bf 83       	std	Y+7, r27	; 0x07
    1416:	f2 cf       	rjmp	.-28     	; 0x13fc
    1418:	8f ef       	ldi	r24, 0xFF	; 255
    141a:	9f ef       	ldi	r25, 0xFF	; 255
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	08 95       	ret

00001426 <malloc>:
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	9c 01       	movw	r18, r24
    142c:	02 97       	sbiw	r24, 0x02	; 2
    142e:	10 f4       	brcc	.+4      	; 0x1434
    1430:	22 e0       	ldi	r18, 0x02	; 2
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e0       	ldi	r20, 0x00	; 0
    1436:	50 e0       	ldi	r21, 0x00	; 0
    1438:	60 91 43 01 	lds	r22, 0x0143
    143c:	70 91 44 01 	lds	r23, 0x0144
    1440:	fb 01       	movw	r30, r22
    1442:	da 01       	movw	r26, r20
    1444:	61 15       	cp	r22, r1
    1446:	71 05       	cpc	r23, r1
    1448:	69 f1       	breq	.+90     	; 0x14a4
    144a:	80 81       	ld	r24, Z
    144c:	91 81       	ldd	r25, Z+1	; 0x01
    144e:	82 17       	cp	r24, r18
    1450:	93 07       	cpc	r25, r19
    1452:	09 f4       	brne	.+2      	; 0x1456
    1454:	52 c0       	rjmp	.+164    	; 0x14fa
    1456:	28 17       	cp	r18, r24
    1458:	39 07       	cpc	r19, r25
    145a:	38 f4       	brcc	.+14     	; 0x146a
    145c:	41 15       	cp	r20, r1
    145e:	51 05       	cpc	r21, r1
    1460:	19 f0       	breq	.+6      	; 0x1468
    1462:	84 17       	cp	r24, r20
    1464:	95 07       	cpc	r25, r21
    1466:	08 f4       	brcc	.+2      	; 0x146a
    1468:	ac 01       	movw	r20, r24
    146a:	df 01       	movw	r26, r30
    146c:	02 80       	ldd	r0, Z+2	; 0x02
    146e:	f3 81       	ldd	r31, Z+3	; 0x03
    1470:	e0 2d       	mov	r30, r0
    1472:	30 97       	sbiw	r30, 0x00	; 0
    1474:	51 f7       	brne	.-44     	; 0x144a
    1476:	41 15       	cp	r20, r1
    1478:	51 05       	cpc	r21, r1
    147a:	a1 f0       	breq	.+40     	; 0x14a4
    147c:	da 01       	movw	r26, r20
    147e:	a2 1b       	sub	r26, r18
    1480:	b3 0b       	sbc	r27, r19
    1482:	14 97       	sbiw	r26, 0x04	; 4
    1484:	08 f4       	brcc	.+2      	; 0x1488
    1486:	43 c0       	rjmp	.+134    	; 0x150e
    1488:	db 01       	movw	r26, r22
    148a:	0a c0       	rjmp	.+20     	; 0x14a0
    148c:	6d 91       	ld	r22, X+
    148e:	7c 91       	ld	r23, X
    1490:	11 97       	sbiw	r26, 0x01	; 1
    1492:	64 17       	cp	r22, r20
    1494:	75 07       	cpc	r23, r21
    1496:	09 f4       	brne	.+2      	; 0x149a
    1498:	50 c0       	rjmp	.+160    	; 0x153a
    149a:	fd 01       	movw	r30, r26
    149c:	a2 81       	ldd	r26, Z+2	; 0x02
    149e:	b3 81       	ldd	r27, Z+3	; 0x03
    14a0:	10 97       	sbiw	r26, 0x00	; 0
    14a2:	a1 f7       	brne	.-24     	; 0x148c
    14a4:	e0 91 41 01 	lds	r30, 0x0141
    14a8:	f0 91 42 01 	lds	r31, 0x0142
    14ac:	30 97       	sbiw	r30, 0x00	; 0
    14ae:	41 f4       	brne	.+16     	; 0x14c0
    14b0:	e0 91 30 01 	lds	r30, 0x0130
    14b4:	f0 91 31 01 	lds	r31, 0x0131
    14b8:	f0 93 42 01 	sts	0x0142, r31
    14bc:	e0 93 41 01 	sts	0x0141, r30
    14c0:	40 91 2e 01 	lds	r20, 0x012E
    14c4:	50 91 2f 01 	lds	r21, 0x012F
    14c8:	41 15       	cp	r20, r1
    14ca:	51 05       	cpc	r21, r1
    14cc:	29 f1       	breq	.+74     	; 0x1518
    14ce:	4e 1b       	sub	r20, r30
    14d0:	5f 0b       	sbc	r21, r31
    14d2:	42 17       	cp	r20, r18
    14d4:	53 07       	cpc	r21, r19
    14d6:	e8 f0       	brcs	.+58     	; 0x1512
    14d8:	c9 01       	movw	r24, r18
    14da:	02 96       	adiw	r24, 0x02	; 2
    14dc:	48 17       	cp	r20, r24
    14de:	59 07       	cpc	r21, r25
    14e0:	c0 f0       	brcs	.+48     	; 0x1512
    14e2:	ef 01       	movw	r28, r30
    14e4:	c2 0f       	add	r28, r18
    14e6:	d3 1f       	adc	r29, r19
    14e8:	22 96       	adiw	r28, 0x02	; 2
    14ea:	d0 93 42 01 	sts	0x0142, r29
    14ee:	c0 93 41 01 	sts	0x0141, r28
    14f2:	21 93       	st	Z+, r18
    14f4:	31 93       	st	Z+, r19
    14f6:	cf 01       	movw	r24, r30
    14f8:	42 c0       	rjmp	.+132    	; 0x157e
    14fa:	10 97       	sbiw	r26, 0x00	; 0
    14fc:	b1 f0       	breq	.+44     	; 0x152a
    14fe:	82 81       	ldd	r24, Z+2	; 0x02
    1500:	93 81       	ldd	r25, Z+3	; 0x03
    1502:	ed 01       	movw	r28, r26
    1504:	8a 83       	std	Y+2, r24	; 0x02
    1506:	9b 83       	std	Y+3, r25	; 0x03
    1508:	cf 01       	movw	r24, r30
    150a:	02 96       	adiw	r24, 0x02	; 2
    150c:	38 c0       	rjmp	.+112    	; 0x157e
    150e:	9a 01       	movw	r18, r20
    1510:	bb cf       	rjmp	.-138    	; 0x1488
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	33 c0       	rjmp	.+102    	; 0x157e
    1518:	4d b7       	in	r20, 0x3d	; 61
    151a:	5e b7       	in	r21, 0x3e	; 62
    151c:	a0 91 32 01 	lds	r26, 0x0132
    1520:	b0 91 33 01 	lds	r27, 0x0133
    1524:	4a 1b       	sub	r20, r26
    1526:	5b 0b       	sbc	r21, r27
    1528:	d2 cf       	rjmp	.-92     	; 0x14ce
    152a:	22 81       	ldd	r18, Z+2	; 0x02
    152c:	33 81       	ldd	r19, Z+3	; 0x03
    152e:	30 93 44 01 	sts	0x0144, r19
    1532:	20 93 43 01 	sts	0x0143, r18
    1536:	cf 01       	movw	r24, r30
    1538:	e8 cf       	rjmp	.-48     	; 0x150a
    153a:	24 17       	cp	r18, r20
    153c:	35 07       	cpc	r19, r21
    153e:	61 f0       	breq	.+24     	; 0x1558
    1540:	ea 01       	movw	r28, r20
    1542:	c2 1b       	sub	r28, r18
    1544:	d3 0b       	sbc	r29, r19
    1546:	fd 01       	movw	r30, r26
    1548:	ec 0f       	add	r30, r28
    154a:	fd 1f       	adc	r31, r29
    154c:	21 93       	st	Z+, r18
    154e:	31 93       	st	Z+, r19
    1550:	22 97       	sbiw	r28, 0x02	; 2
    1552:	cd 93       	st	X+, r28
    1554:	dc 93       	st	X, r29
    1556:	cf cf       	rjmp	.-98     	; 0x14f6
    1558:	30 97       	sbiw	r30, 0x00	; 0
    155a:	41 f0       	breq	.+16     	; 0x156c
    155c:	ed 01       	movw	r28, r26
    155e:	4a 81       	ldd	r20, Y+2	; 0x02
    1560:	5b 81       	ldd	r21, Y+3	; 0x03
    1562:	42 83       	std	Z+2, r20	; 0x02
    1564:	53 83       	std	Z+3, r21	; 0x03
    1566:	cd 01       	movw	r24, r26
    1568:	02 96       	adiw	r24, 0x02	; 2
    156a:	09 c0       	rjmp	.+18     	; 0x157e
    156c:	fd 01       	movw	r30, r26
    156e:	82 81       	ldd	r24, Z+2	; 0x02
    1570:	93 81       	ldd	r25, Z+3	; 0x03
    1572:	90 93 44 01 	sts	0x0144, r25
    1576:	80 93 43 01 	sts	0x0143, r24
    157a:	cd 01       	movw	r24, r26
    157c:	f5 cf       	rjmp	.-22     	; 0x1568
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	08 95       	ret

00001584 <free>:
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	09 f4       	brne	.+2      	; 0x158e
    158c:	5a c0       	rjmp	.+180    	; 0x1642
    158e:	dc 01       	movw	r26, r24
    1590:	12 97       	sbiw	r26, 0x02	; 2
    1592:	ed 01       	movw	r28, r26
    1594:	1a 82       	std	Y+2, r1	; 0x02
    1596:	1b 82       	std	Y+3, r1	; 0x03
    1598:	80 91 43 01 	lds	r24, 0x0143
    159c:	90 91 44 01 	lds	r25, 0x0144
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	d9 f1       	breq	.+118    	; 0x161a
    15a4:	fc 01       	movw	r30, r24
    15a6:	40 e0       	ldi	r20, 0x00	; 0
    15a8:	50 e0       	ldi	r21, 0x00	; 0
    15aa:	ea 17       	cp	r30, r26
    15ac:	fb 07       	cpc	r31, r27
    15ae:	48 f4       	brcc	.+18     	; 0x15c2
    15b0:	af 01       	movw	r20, r30
    15b2:	02 80       	ldd	r0, Z+2	; 0x02
    15b4:	f3 81       	ldd	r31, Z+3	; 0x03
    15b6:	e0 2d       	mov	r30, r0
    15b8:	30 97       	sbiw	r30, 0x00	; 0
    15ba:	a1 f0       	breq	.+40     	; 0x15e4
    15bc:	ea 17       	cp	r30, r26
    15be:	fb 07       	cpc	r31, r27
    15c0:	b8 f3       	brcs	.-18     	; 0x15b0
    15c2:	ed 01       	movw	r28, r26
    15c4:	ea 83       	std	Y+2, r30	; 0x02
    15c6:	fb 83       	std	Y+3, r31	; 0x03
    15c8:	2d 91       	ld	r18, X+
    15ca:	3c 91       	ld	r19, X
    15cc:	11 97       	sbiw	r26, 0x01	; 1
    15ce:	e9 01       	movw	r28, r18
    15d0:	ca 0f       	add	r28, r26
    15d2:	db 1f       	adc	r29, r27
    15d4:	ce 01       	movw	r24, r28
    15d6:	02 96       	adiw	r24, 0x02	; 2
    15d8:	8e 17       	cp	r24, r30
    15da:	9f 07       	cpc	r25, r31
    15dc:	19 f1       	breq	.+70     	; 0x1624
    15de:	41 15       	cp	r20, r1
    15e0:	51 05       	cpc	r21, r1
    15e2:	d9 f0       	breq	.+54     	; 0x161a
    15e4:	ea 01       	movw	r28, r20
    15e6:	aa 83       	std	Y+2, r26	; 0x02
    15e8:	bb 83       	std	Y+3, r27	; 0x03
    15ea:	ca 01       	movw	r24, r20
    15ec:	02 96       	adiw	r24, 0x02	; 2
    15ee:	28 81       	ld	r18, Y
    15f0:	39 81       	ldd	r19, Y+1	; 0x01
    15f2:	82 0f       	add	r24, r18
    15f4:	93 1f       	adc	r25, r19
    15f6:	8a 17       	cp	r24, r26
    15f8:	9b 07       	cpc	r25, r27
    15fa:	19 f5       	brne	.+70     	; 0x1642
    15fc:	6d 91       	ld	r22, X+
    15fe:	7c 91       	ld	r23, X
    1600:	11 97       	sbiw	r26, 0x01	; 1
    1602:	26 0f       	add	r18, r22
    1604:	37 1f       	adc	r19, r23
    1606:	2e 5f       	subi	r18, 0xFE	; 254
    1608:	3f 4f       	sbci	r19, 0xFF	; 255
    160a:	28 83       	st	Y, r18
    160c:	39 83       	std	Y+1, r19	; 0x01
    160e:	fd 01       	movw	r30, r26
    1610:	42 81       	ldd	r20, Z+2	; 0x02
    1612:	53 81       	ldd	r21, Z+3	; 0x03
    1614:	4a 83       	std	Y+2, r20	; 0x02
    1616:	5b 83       	std	Y+3, r21	; 0x03
    1618:	14 c0       	rjmp	.+40     	; 0x1642
    161a:	b0 93 44 01 	sts	0x0144, r27
    161e:	a0 93 43 01 	sts	0x0143, r26
    1622:	0f c0       	rjmp	.+30     	; 0x1642
    1624:	6a 81       	ldd	r22, Y+2	; 0x02
    1626:	7b 81       	ldd	r23, Y+3	; 0x03
    1628:	26 0f       	add	r18, r22
    162a:	37 1f       	adc	r19, r23
    162c:	2e 5f       	subi	r18, 0xFE	; 254
    162e:	3f 4f       	sbci	r19, 0xFF	; 255
    1630:	2d 93       	st	X+, r18
    1632:	3c 93       	st	X, r19
    1634:	11 97       	sbiw	r26, 0x01	; 1
    1636:	22 81       	ldd	r18, Z+2	; 0x02
    1638:	33 81       	ldd	r19, Z+3	; 0x03
    163a:	fd 01       	movw	r30, r26
    163c:	22 83       	std	Z+2, r18	; 0x02
    163e:	33 83       	std	Z+3, r19	; 0x03
    1640:	ce cf       	rjmp	.-100    	; 0x15de
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	08 95       	ret

00001648 <memset>:
    1648:	dc 01       	movw	r26, r24
    164a:	01 c0       	rjmp	.+2      	; 0x164e

0000164c <.memset_loop>:
    164c:	6d 93       	st	X+, r22

0000164e <.memset_start>:
    164e:	41 50       	subi	r20, 0x01	; 1
    1650:	50 40       	sbci	r21, 0x00	; 0
    1652:	e0 f7       	brcc	.-8      	; 0x164c
    1654:	08 95       	ret

00001656 <strlen_P>:
    1656:	fc 01       	movw	r30, r24

00001658 <.strlen_P_loop>:
    1658:	05 90       	lpm	r0, Z+
    165a:	00 20       	and	r0, r0
    165c:	e9 f7       	brne	.-6      	; 0x1658
    165e:	80 95       	com	r24
    1660:	90 95       	com	r25
    1662:	8e 0f       	add	r24, r30
    1664:	9f 1f       	adc	r25, r31
    1666:	08 95       	ret

00001668 <strnlen>:
    1668:	fc 01       	movw	r30, r24

0000166a <.strnlen_loop>:
    166a:	61 50       	subi	r22, 0x01	; 1
    166c:	70 40       	sbci	r23, 0x00	; 0
    166e:	01 90       	ld	r0, Z+
    1670:	01 10       	cpse	r0, r1
    1672:	d8 f7       	brcc	.-10     	; 0x166a
    1674:	80 95       	com	r24
    1676:	90 95       	com	r25
    1678:	8e 0f       	add	r24, r30
    167a:	9f 1f       	adc	r25, r31
    167c:	08 95       	ret

0000167e <strnlen_P>:
    167e:	fc 01       	movw	r30, r24
    1680:	61 50       	subi	r22, 0x01	; 1
    1682:	70 40       	sbci	r23, 0x00	; 0
    1684:	05 90       	lpm	r0, Z+
    1686:	01 10       	cpse	r0, r1
    1688:	d8 f7       	brcc	.-10     	; 0x1680
    168a:	80 95       	com	r24
    168c:	90 95       	com	r25
    168e:	8e 0f       	add	r24, r30
    1690:	9f 1f       	adc	r25, r31
    1692:	08 95       	ret

00001694 <__mulsi3>:
    1694:	62 9f       	mul	r22, r18
    1696:	d0 01       	movw	r26, r0
    1698:	73 9f       	mul	r23, r19
    169a:	f0 01       	movw	r30, r0
    169c:	82 9f       	mul	r24, r18
    169e:	e0 0d       	add	r30, r0
    16a0:	f1 1d       	adc	r31, r1
    16a2:	64 9f       	mul	r22, r20
    16a4:	e0 0d       	add	r30, r0
    16a6:	f1 1d       	adc	r31, r1
    16a8:	92 9f       	mul	r25, r18
    16aa:	f0 0d       	add	r31, r0
    16ac:	83 9f       	mul	r24, r19
    16ae:	f0 0d       	add	r31, r0
    16b0:	74 9f       	mul	r23, r20
    16b2:	f0 0d       	add	r31, r0
    16b4:	65 9f       	mul	r22, r21
    16b6:	f0 0d       	add	r31, r0
    16b8:	99 27       	eor	r25, r25
    16ba:	72 9f       	mul	r23, r18
    16bc:	b0 0d       	add	r27, r0
    16be:	e1 1d       	adc	r30, r1
    16c0:	f9 1f       	adc	r31, r25
    16c2:	63 9f       	mul	r22, r19
    16c4:	b0 0d       	add	r27, r0
    16c6:	e1 1d       	adc	r30, r1
    16c8:	f9 1f       	adc	r31, r25
    16ca:	bd 01       	movw	r22, r26
    16cc:	cf 01       	movw	r24, r30
    16ce:	11 24       	eor	r1, r1
    16d0:	08 95       	ret

000016d2 <__udivmodsi4>:
    16d2:	a1 e2       	ldi	r26, 0x21	; 33
    16d4:	1a 2e       	mov	r1, r26
    16d6:	aa 1b       	sub	r26, r26
    16d8:	bb 1b       	sub	r27, r27
    16da:	fd 01       	movw	r30, r26
    16dc:	0d c0       	rjmp	.+26     	; 0x16f8

000016de <__udivmodsi4_loop>:
    16de:	aa 1f       	adc	r26, r26
    16e0:	bb 1f       	adc	r27, r27
    16e2:	ee 1f       	adc	r30, r30
    16e4:	ff 1f       	adc	r31, r31
    16e6:	a2 17       	cp	r26, r18
    16e8:	b3 07       	cpc	r27, r19
    16ea:	e4 07       	cpc	r30, r20
    16ec:	f5 07       	cpc	r31, r21
    16ee:	20 f0       	brcs	.+8      	; 0x16f8
    16f0:	a2 1b       	sub	r26, r18
    16f2:	b3 0b       	sbc	r27, r19
    16f4:	e4 0b       	sbc	r30, r20
    16f6:	f5 0b       	sbc	r31, r21

000016f8 <__udivmodsi4_ep>:
    16f8:	66 1f       	adc	r22, r22
    16fa:	77 1f       	adc	r23, r23
    16fc:	88 1f       	adc	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	1a 94       	dec	r1
    1702:	69 f7       	brne	.-38     	; 0x16de
    1704:	60 95       	com	r22
    1706:	70 95       	com	r23
    1708:	80 95       	com	r24
    170a:	90 95       	com	r25
    170c:	9b 01       	movw	r18, r22
    170e:	ac 01       	movw	r20, r24
    1710:	bd 01       	movw	r22, r26
    1712:	cf 01       	movw	r24, r30
    1714:	08 95       	ret
