; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\obj\main.o --depend=.\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\main.crf user\main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NVIC_Configuration PROC
;;;212    *******************************************************************************/
;;;213    void NVIC_Configuration(void)
000000  b510              PUSH     {r4,lr}
;;;214    {  
;;;215    #ifdef  VECT_TAB_RAM  
;;;216      /* Set the Vector Table base location at 0x20000000 */ 
;;;217      NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0); 
;;;218    #else  /* VECT_TAB_FLASH  */
;;;219      /* Set the Vector Table base location at 0x08000000 */ 
;;;220      NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);   
000002  2100              MOVS     r1,#0
000004  f04f6000          MOV      r0,#0x8000000
000008  f7fffffe          BL       NVIC_SetVectorTable
;;;221    #endif
;;;222    }
00000c  bd10              POP      {r4,pc}
;;;223    
                          ENDP

                  GPIO_Configuration PROC
;;;193    *******************************************************************************/
;;;194    void GPIO_Configuration(void)
00000e  b508              PUSH     {r3,lr}
;;;195    {
;;;196      GPIO_InitTypeDef GPIO_InitStructure;
;;;197    
;;;198      /* GPIOA Configuration: Channel 1 Output */
;;;199      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
000010  f44f7080          MOV      r0,#0x100
000014  f8ad0000          STRH     r0,[sp,#0]
;;;200      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000018  2018              MOVS     r0,#0x18
00001a  f88d0003          STRB     r0,[sp,#3]
;;;201      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001e  2003              MOVS     r0,#3
000020  f88d0002          STRB     r0,[sp,#2]
;;;202      GPIO_Init(GPIOA, &GPIO_InitStructure);
000024  4669              MOV      r1,sp
000026  484b              LDR      r0,|L1.340|
000028  f7fffffe          BL       GPIO_Init
;;;203    
;;;204    }
00002c  bd08              POP      {r3,pc}
;;;205    
                          ENDP

                  RCC_Configuration PROC
;;;134    *******************************************************************************/
;;;135    void RCC_Configuration(void)
00002e  b510              PUSH     {r4,lr}
;;;136    {   
;;;137      /* RCC system reset(for debug purpose) */
;;;138      RCC_DeInit();
000030  f7fffffe          BL       RCC_DeInit
;;;139    
;;;140      /* Enable HSE */
;;;141      RCC_HSEConfig(RCC_HSE_ON);
000034  f44f3080          MOV      r0,#0x10000
000038  f7fffffe          BL       RCC_HSEConfig
;;;142    
;;;143      /* Wait till HSE is ready */
;;;144      HSEStartUpStatus = RCC_WaitForHSEStartUp();
00003c  f7fffffe          BL       RCC_WaitForHSEStartUp
000040  4945              LDR      r1,|L1.344|
000042  7008              STRB     r0,[r1,#0]
;;;145    
;;;146      if(HSEStartUpStatus == SUCCESS)
000044  4608              MOV      r0,r1
000046  7800              LDRB     r0,[r0,#0]  ; HSEStartUpStatus
000048  2801              CMP      r0,#1
00004a  d126              BNE      |L1.154|
;;;147      {
;;;148        /* HCLK = SYSCLK */
;;;149        RCC_HCLKConfig(RCC_SYSCLK_Div1); 
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       RCC_HCLKConfig
;;;150      
;;;151        /* PCLK2 = HCLK */
;;;152        RCC_PCLK2Config(RCC_HCLK_Div1); 
000052  2000              MOVS     r0,#0
000054  f7fffffe          BL       RCC_PCLK2Config
;;;153    
;;;154        /* PCLK1 = HCLK/2 */
;;;155        RCC_PCLK1Config(RCC_HCLK_Div2);
000058  f44f6080          MOV      r0,#0x400
00005c  f7fffffe          BL       RCC_PCLK1Config
;;;156    
;;;157        /* Flash 2 wait state */
;;;158        FLASH_SetLatency(FLASH_Latency_2);
000060  2002              MOVS     r0,#2
000062  f7fffffe          BL       FLASH_SetLatency
;;;159        /* Enable Prefetch Buffer */
;;;160        FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
000066  2010              MOVS     r0,#0x10
000068  f7fffffe          BL       FLASH_PrefetchBufferCmd
;;;161    
;;;162        /* PLLCLK = 8MHz * 9 = 72 MHz */
;;;163        RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
00006c  f44f11e0          MOV      r1,#0x1c0000
000070  f44f3080          MOV      r0,#0x10000
000074  f7fffffe          BL       RCC_PLLConfig
;;;164    
;;;165        /* Enable PLL */ 
;;;166        RCC_PLLCmd(ENABLE);
000078  2001              MOVS     r0,#1
00007a  f7fffffe          BL       RCC_PLLCmd
;;;167    
;;;168        /* Wait till PLL is ready */
;;;169        while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
00007e  bf00              NOP      
                  |L1.128|
000080  2039              MOVS     r0,#0x39
000082  f7fffffe          BL       RCC_GetFlagStatus
000086  2800              CMP      r0,#0
000088  d0fa              BEQ      |L1.128|
;;;170        {
;;;171        }
;;;172    
;;;173        /* Select PLL as system clock source */
;;;174        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
00008a  2002              MOVS     r0,#2
00008c  f7fffffe          BL       RCC_SYSCLKConfig
;;;175    
;;;176        /* Wait till PLL is used as system clock source */
;;;177        while(RCC_GetSYSCLKSource() != 0x08)
000090  bf00              NOP      
                  |L1.146|
000092  f7fffffe          BL       RCC_GetSYSCLKSource
000096  2808              CMP      r0,#8
000098  d1fb              BNE      |L1.146|
                  |L1.154|
;;;178        {
;;;179        }
;;;180      }
;;;181    
;;;182      /* TIM1, GPIOA and GPIOB clock enable */
;;;183      RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1 | RCC_APB2Periph_GPIOA |
00009a  2101              MOVS     r1,#1
00009c  f640000c          MOV      r0,#0x80c
0000a0  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;184                             RCC_APB2Periph_GPIOB, ENABLE);
;;;185    }
0000a4  bd10              POP      {r4,pc}
;;;186    
                          ENDP

                  main PROC
;;;38     *******************************************************************************/
;;;39     int main(void)
0000a6  f7fffffe          BL       RCC_Configuration
;;;40     {
;;;41     #ifdef DEBUG
;;;42       debug();
;;;43     #endif
;;;44     
;;;45       /* System Clocks Configuration */
;;;46       RCC_Configuration();
;;;47     
;;;48       /* GPIO Configuration */
;;;49       GPIO_Configuration();
0000aa  f7fffffe          BL       GPIO_Configuration
;;;50     
;;;51       /* NVIC configuration */
;;;52       NVIC_Configuration();
0000ae  f7fffffe          BL       NVIC_Configuration
;;;53     
;;;54       /* -----------------------------------------------------------------------
;;;55       TIM1 Configuration to:
;;;56     
;;;57       1/ Generate 3 complementary PWM signals with 3 different duty cycles:
;;;58       TIM1CLK = 72 MHz, Prescaler = 0x0, TIM1 counter clock = 72 MHz
;;;59       TIM1 frequency = TIM1CLK/(TIM1_Period + 1) = 1.098 KHz
;;;60     
;;;61       TIM1 Channel1 duty cycle = TIM1->CCR1 / TIM1_Period = 50% 
;;;62       TIM1 Channel1N duty cycle = (TIM1_Period - TIM1_CCR1) / (TIM1_Period + 1) = 50%
;;;63     
;;;64       TIM1 Channel2 duty cycle = TIM1_CCR2 / TIM1_Period = 25%
;;;65       TIM1 Channel2N duty cycle = (TIM1_Period - TIM1_CCR1) / (TIM1_Period + 1) = 75% 
;;;66     
;;;67       TIM1 Channel3 duty cycle = TIM1_CCR3 / TIM1_Period = 12.5% 
;;;68       TIM1 Channel3N duty cycle = (TIM1_Period - TIM1_CCR3) / (TIM1_Period + 1) = 87.5% 
;;;69     
;;;70       2/ Insert a dead time equal to 1.62 us
;;;71       3/ Configure the break feature, active at High level, and using the automatic 
;;;72          output enable feature
;;;73       4/ Use the Locking parametres level1. 
;;;74       ----------------------------------------------------------------------- */
;;;75     
;;;76       /* TIM1 Peripheral Configuration */ 
;;;77       TIM_DeInit(TIM1);
0000b2  482a              LDR      r0,|L1.348|
0000b4  f7fffffe          BL       TIM_DeInit
;;;78     
;;;79       /* Time Base configuration */
;;;80       TIM1_TimeBaseStructure.TIM_Prescaler = 0x0;
0000b8  2000              MOVS     r0,#0
0000ba  4929              LDR      r1,|L1.352|
0000bc  8008              STRH     r0,[r1,#0]
;;;81       TIM1_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
0000be  8048              STRH     r0,[r1,#2]
;;;82       TIM1_TimeBaseStructure.TIM_Period = 0xFFFF;
0000c0  f64f70ff          MOV      r0,#0xffff
0000c4  8088              STRH     r0,[r1,#4]
;;;83       TIM1_TimeBaseStructure.TIM_ClockDivision = 0x0;
0000c6  2000              MOVS     r0,#0
0000c8  80c8              STRH     r0,[r1,#6]
;;;84       TIM1_TimeBaseStructure.TIM_RepetitionCounter = 0x0;
0000ca  7208              STRB     r0,[r1,#8]
;;;85     
;;;86       TIM_TimeBaseInit(TIM1,&TIM1_TimeBaseStructure);
0000cc  4823              LDR      r0,|L1.348|
0000ce  f7fffffe          BL       TIM_TimeBaseInit
;;;87     
;;;88       /* Channel 1, 2,3 and 4 Configuration in PWM mode */
;;;89       TIM1_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2; 
0000d2  2070              MOVS     r0,#0x70
0000d4  4923              LDR      r1,|L1.356|
0000d6  8008              STRH     r0,[r1,#0]
;;;90       TIM1_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; 
0000d8  2001              MOVS     r0,#1
0000da  8048              STRH     r0,[r1,#2]
;;;91       TIM1_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;                  
0000dc  2004              MOVS     r0,#4
0000de  8088              STRH     r0,[r1,#4]
;;;92       TIM1_OCInitStructure.TIM_Pulse = CCR2_Val; 
0000e0  4821              LDR      r0,|L1.360|
0000e2  8800              LDRH     r0,[r0,#0]  ; CCR2_Val
0000e4  80c8              STRH     r0,[r1,#6]
;;;93       TIM1_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low; 
0000e6  2002              MOVS     r0,#2
0000e8  8108              STRH     r0,[r1,#8]
;;;94       TIM1_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_Low;         
0000ea  2008              MOVS     r0,#8
0000ec  8148              STRH     r0,[r1,#0xa]
;;;95       TIM1_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
0000ee  0140              LSLS     r0,r0,#5
0000f0  8188              STRH     r0,[r1,#0xc]
;;;96       TIM1_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;          
0000f2  2000              MOVS     r0,#0
0000f4  81c8              STRH     r0,[r1,#0xe]
;;;97       
;;;98       TIM_OC1Init(TIM1,&TIM1_OCInitStructure); 
0000f6  4819              LDR      r0,|L1.348|
0000f8  f7fffffe          BL       TIM_OC1Init
;;;99     
;;;100      TIM1_OCInitStructure.TIM_Pulse = CCR2_Val;
0000fc  481a              LDR      r0,|L1.360|
0000fe  8800              LDRH     r0,[r0,#0]  ; CCR2_Val
000100  4918              LDR      r1,|L1.356|
000102  80c8              STRH     r0,[r1,#6]
;;;101      TIM_OC2Init(TIM1,&TIM1_OCInitStructure);
000104  4815              LDR      r0,|L1.348|
000106  f7fffffe          BL       TIM_OC2Init
;;;102    
;;;103      TIM1_OCInitStructure.TIM_Pulse = CCR3_Val;
00010a  4818              LDR      r0,|L1.364|
00010c  8800              LDRH     r0,[r0,#0]  ; CCR3_Val
00010e  4915              LDR      r1,|L1.356|
000110  80c8              STRH     r0,[r1,#6]
;;;104      TIM_OC3Init(TIM1,&TIM1_OCInitStructure);
000112  4812              LDR      r0,|L1.348|
000114  f7fffffe          BL       TIM_OC3Init
;;;105    
;;;106      /* Automatic Output enable, Break, dead time and lock configuration*/
;;;107      TIM1_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
000118  f44f6000          MOV      r0,#0x800
00011c  4914              LDR      r1,|L1.368|
00011e  8008              STRH     r0,[r1,#0]
;;;108      TIM1_BDTRInitStructure.TIM_OSSIState = TIM_OSSIState_Enable;
000120  1040              ASRS     r0,r0,#1
000122  8048              STRH     r0,[r1,#2]
;;;109      TIM1_BDTRInitStructure.TIM_LOCKLevel = TIM_LOCKLevel_1; 
000124  1080              ASRS     r0,r0,#2
000126  8088              STRH     r0,[r1,#4]
;;;110      TIM1_BDTRInitStructure.TIM_DeadTime = 0x75;
000128  2075              MOVS     r0,#0x75
00012a  80c8              STRH     r0,[r1,#6]
;;;111      TIM1_BDTRInitStructure.TIM_Break = TIM_Break_Enable;
00012c  f44f5080          MOV      r0,#0x1000
000130  8108              STRH     r0,[r1,#8]
;;;112      TIM1_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
000132  0040              LSLS     r0,r0,#1
000134  8148              STRH     r0,[r1,#0xa]
;;;113      TIM1_BDTRInitStructure.TIM_AutomaticOutput = TIM_AutomaticOutput_Enable;
000136  0040              LSLS     r0,r0,#1
000138  8188              STRH     r0,[r1,#0xc]
;;;114    
;;;115      TIM_BDTRConfig(TIM1,&TIM1_BDTRInitStructure);
00013a  4808              LDR      r0,|L1.348|
00013c  f7fffffe          BL       TIM_BDTRConfig
;;;116    
;;;117      /* TIM1 counter enable */
;;;118      TIM_Cmd(TIM1,ENABLE);
000140  2101              MOVS     r1,#1
000142  4806              LDR      r0,|L1.348|
000144  f7fffffe          BL       TIM_Cmd
;;;119    
;;;120      /* Main Output Enable */
;;;121      TIM_CtrlPWMOutputs(TIM1,ENABLE);
000148  2101              MOVS     r1,#1
00014a  4804              LDR      r0,|L1.348|
00014c  f7fffffe          BL       TIM_CtrlPWMOutputs
;;;122      
;;;123      while(1)
000150  bf00              NOP      
                  |L1.338|
000152  e7fe              B        |L1.338|
;;;124      {
;;;125      }    
;;;126    }
;;;127    
                          ENDP

                  |L1.340|
                          DCD      0x40010800
                  |L1.344|
                          DCD      HSEStartUpStatus
                  |L1.348|
                          DCD      0x40012c00
                  |L1.352|
                          DCD      TIM1_TimeBaseStructure
                  |L1.356|
                          DCD      TIM1_OCInitStructure
                  |L1.360|
                          DCD      CCR2_Val
                  |L1.364|
                          DCD      CCR3_Val
                  |L1.368|
                          DCD      TIM1_BDTRInitStructure

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  TIM1_TimeBaseStructure
                          %        10
                  TIM1_OCInitStructure
                          %        16
                  TIM1_BDTRInitStructure
                          %        14

                          AREA ||.data||, DATA, ALIGN=1

                  capture
000000  0000              DCW      0x0000
                  CCR1_Val
000002  7fff              DCW      0x7fff
                  CCR2_Val
000004  3fff              DCW      0x3fff
                  CCR3_Val
000006  1fff              DCW      0x1fff
                  HSEStartUpStatus
000008  00                DCB      0x00

                  __ARM_use_no_argv EQU 0
