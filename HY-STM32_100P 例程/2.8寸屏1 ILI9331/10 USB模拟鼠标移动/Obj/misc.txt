; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\misc.o --depend=.\Obj\misc.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\usb_library\inc -I..\USB_test -I.\FWlib\inc -I.\user -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Obj\misc.crf FWlib\SRC\misc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NVIC_PriorityGroupConfig PROC
;;;94       */
;;;95     void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
000000  4928              LDR      r1,|L1.164|
;;;96     {
;;;97       /* Check the parameters */
;;;98       assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
;;;99       
;;;100      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;101      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
000002  4308              ORRS     r0,r0,r1
000004  4928              LDR      r1,|L1.168|
000006  6008              STR      r0,[r1,#0]
;;;102    }
000008  4770              BX       lr
;;;103    
                          ENDP

                  NVIC_Init PROC
;;;111      */
;;;112    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
00000a  b5f0              PUSH     {r4-r7,lr}
;;;113    {
;;;114      uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
00000c  220f              MOVS     r2,#0xf
;;;115      
;;;116      /* Check the parameters */
;;;117      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;118      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
;;;119      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
;;;120        
;;;121      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
00000e  78c5              LDRB     r5,[r0,#3]
;;;122      {
;;;123        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;124        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
;;;125        tmppre = (0x4 - tmppriority);
;;;126        tmpsub = tmpsub >> tmppriority;
;;;127    
;;;128        tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
;;;129        tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
;;;130        tmppriority = tmppriority << 0x04;
;;;131            
;;;132        NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
000010  7803              LDRB     r3,[r0,#0]
000012  f04f21e0          MOV      r1,#0xe000e000        ;124
;;;133        
;;;134        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;135        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
000016  2401              MOVS     r4,#1
000018  b1e5              CBZ      r5,|L1.84|
00001a  f8d15d0c          LDR      r5,[r1,#0xd0c]        ;124
00001e  7846              LDRB     r6,[r0,#1]            ;128
000020  f40565e0          AND      r5,r5,#0x700          ;124
000024  f5c565e0          RSB      r5,r5,#0x700          ;124
000028  0a2d              LSRS     r5,r5,#8              ;124
00002a  f1c50704          RSB      r7,r5,#4              ;125
00002e  40ea              LSRS     r2,r2,r5              ;126
000030  7885              LDRB     r5,[r0,#2]            ;129
000032  40be              LSLS     r6,r6,r7              ;128
000034  4015              ANDS     r5,r5,r2              ;129
000036  4335              ORRS     r5,r5,r6              ;129
000038  440b              ADD      r3,r3,r1              ;132
00003a  012a              LSLS     r2,r5,#4              ;129
00003c  f8832400          STRB     r2,[r3,#0x400]        ;132
000040  7800              LDRB     r0,[r0,#0]
000042  0942              LSRS     r2,r0,#5
000044  f000001f          AND      r0,r0,#0x1f
000048  4084              LSLS     r4,r4,r0
00004a  eb010082          ADD      r0,r1,r2,LSL #2
00004e  f8c04100          STR      r4,[r0,#0x100]
;;;136          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;137      }
;;;138      else
;;;139      {
;;;140        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;141        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
;;;142          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;143      }
;;;144    }
000052  bdf0              POP      {r4-r7,pc}
                  |L1.84|
000054  f003001f          AND      r0,r3,#0x1f           ;141
000058  4084              LSLS     r4,r4,r0              ;141
00005a  0958              LSRS     r0,r3,#5              ;141
00005c  eb010080          ADD      r0,r1,r0,LSL #2       ;141
000060  f8c04180          STR      r4,[r0,#0x180]        ;141
000064  bdf0              POP      {r4-r7,pc}
;;;145    
                          ENDP

                  NVIC_SetVectorTable PROC
;;;156      */
;;;157    void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
000066  4a11              LDR      r2,|L1.172|
;;;158    { 
;;;159      /* Check the parameters */
;;;160      assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
;;;161      assert_param(IS_NVIC_OFFSET(Offset));  
;;;162       
;;;163      SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
000068  4011              ANDS     r1,r1,r2
00006a  4301              ORRS     r1,r1,r0
00006c  4810              LDR      r0,|L1.176|
00006e  6001              STR      r1,[r0,#0]
;;;164    }
000070  4770              BX       lr
;;;165    
                          ENDP

                  NVIC_SystemLPConfig PROC
;;;177      */
;;;178    void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
000072  f04f22e0          MOV      r2,#0xe000e000
;;;179    {
;;;180      /* Check the parameters */
;;;181      assert_param(IS_NVIC_LP(LowPowerMode));
;;;182      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;183      
;;;184      if (NewState != DISABLE)
000076  2900              CMP      r1,#0
;;;185      {
;;;186        SCB->SCR |= LowPowerMode;
;;;187      }
;;;188      else
;;;189      {
;;;190        SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
000078  f8d21d10          LDR      r1,[r2,#0xd10]
00007c  d001              BEQ      |L1.130|
00007e  4301              ORRS     r1,r1,r0              ;186
000080  e000              B        |L1.132|
                  |L1.130|
000082  4381              BICS     r1,r1,r0
                  |L1.132|
000084  f8c21d10          STR      r1,[r2,#0xd10]        ;186
;;;191      }
;;;192    }
000088  4770              BX       lr
;;;193    
                          ENDP

                  SysTick_CLKSourceConfig PROC
;;;203      */
;;;204    void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
00008a  f04f21e0          MOV      r1,#0xe000e000
;;;205    {
;;;206      /* Check the parameters */
;;;207      assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
;;;208      if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
00008e  2804              CMP      r0,#4
;;;209      {
;;;210        SysTick->CTRL |= SysTick_CLKSource_HCLK;
;;;211      }
;;;212      else
;;;213      {
;;;214        SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
000090  6908              LDR      r0,[r1,#0x10]
000092  d003              BEQ      |L1.156|
000094  f0200004          BIC      r0,r0,#4
                  |L1.152|
000098  6108              STR      r0,[r1,#0x10]         ;210
;;;215      }
;;;216    }
00009a  4770              BX       lr
                  |L1.156|
00009c  f0400004          ORR      r0,r0,#4              ;210
0000a0  e7fa              B        |L1.152|
;;;217    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L1.164|
                          DCD      0x05fa0000
                  |L1.168|
                          DCD      0xe000ed0c
                  |L1.172|
                          DCD      0x1fffff80
                  |L1.176|
                          DCD      0xe000ed08
