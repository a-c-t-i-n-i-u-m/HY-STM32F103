; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\usb_int.o --depend=.\Obj\usb_int.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\usb_library\inc -I..\USB_test -I.\FWlib\inc -I.\user -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Obj\usb_int.crf usb_library\src\usb_int.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CTR_LP PROC
;;;40     *******************************************************************************/
;;;41     void CTR_LP(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;42     {
;;;43       u32 wEPVal;
;;;44       /* stay in loop while pending ints */
;;;45       while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
;;;46       {
;;;47         _SetISTR((u16)CLR_CTR); /* clear CTR flag */
;;;48         /* extract highest priority endpoint number */
;;;49         EPindex = (u8)(wIstr & ISTR_EP_ID);
;;;50         if (EPindex == 0)
;;;51         {
;;;52           /* Decode and service control endpoint interrupt */
;;;53           /* calling related service routine */
;;;54           /* (Setup0_Process, In0_Process, Out0_Process) */
;;;55     
;;;56           /* save RX & TX status */
;;;57           /* and set both to NAK */
;;;58           SaveRState = _GetEPRxStatus(ENDP0);
;;;59           SaveTState = _GetEPTxStatus(ENDP0);
;;;60           _SetEPRxStatus(ENDP0, EP_RX_NAK);
000004  f64b7b8f          MOV      r11,#0xbf8f
000008  f8df91fc          LDR      r9,|L1.520|
;;;61           _SetEPTxStatus(ENDP0, EP_TX_NAK);
;;;62     
;;;63     
;;;64           /* DIR bit = origin of the interrupt */
;;;65     
;;;66           if ((wIstr & ISTR_DIR) == 0)
;;;67           {
;;;68             /* DIR = 0 */
;;;69     
;;;70             /* DIR = 0      => IN  int */
;;;71             /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
;;;72     
;;;73     
;;;74             _ClearEP_CTR_TX(ENDP0);
;;;75             In0_Process();
;;;76     
;;;77             /* check if SETUP arrived during IN processing */
;;;78             wEPVal = _GetENDPOINT(ENDP0);
;;;79             if ((wEPVal & (EP_CTR_RX | EP_SETUP)) != 0)
;;;80             {
;;;81               _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
00000c  f6407a8f          MOV      r10,#0xf8f
000010  f8df81f8          LDR      r8,|L1.524|
000014  f648770f          MOV      r7,#0x8f0f            ;74
000018  4c7d              LDR      r4,|L1.528|
00001a  4d7e              LDR      r5,|L1.532|
00001c  e034              B        |L1.136|
00001e  bf00              NOP                            ;47
                  |L1.32|
000020  f64770ff          MOV      r0,#0x7fff            ;47
000024  f8c40c44          STR      r0,[r4,#0xc44]        ;47
000028  8829              LDRH     r1,[r5,#0]            ;49  ; wIstr
00002a  f011010f          ANDS     r1,r1,#0xf            ;49
00002e  f8881000          STRB     r1,[r8,#0]            ;49
000032  d030              BEQ      |L1.150|
;;;82               Setup0_Process();
;;;83             }
;;;84     
;;;85           }
;;;86     
;;;87           else
;;;88           {
;;;89             /* DIR = 1 */
;;;90     
;;;91             /* DIR = 1 & CTR_RX       => SETUP or OUT int */
;;;92             /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
;;;93     
;;;94             wEPVal = _GetENDPOINT(ENDP0);
;;;95             if ((wEPVal & EP_CTR_TX) != 0)
;;;96             {
;;;97               _ClearEP_CTR_TX(ENDP0);
;;;98               In0_Process();
;;;99             }
;;;100            if ((wEPVal &EP_SETUP) != 0)
;;;101            {
;;;102              _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
;;;103              Setup0_Process();
;;;104            }
;;;105    
;;;106            else if ((wEPVal & EP_CTR_RX) != 0)
;;;107            {
;;;108              _ClearEP_CTR_RX(ENDP0);
;;;109              Out0_Process();
;;;110            }
;;;111    
;;;112          }
;;;113    
;;;114          /* before terminate set Tx & Rx status */
;;;115          _SetEPRxStatus(ENDP0, SaveRState);
;;;116          _SetEPTxStatus(ENDP0, SaveTState);
;;;117        }/* if(EPindex == 0) */
;;;118        else
;;;119        {
;;;120          /* Decode and service non control endpoints interrupt  */
;;;121    
;;;122          /* process related endpoint register */
;;;123          wEPVal = _GetENDPOINT(EPindex);
000034  eb040081          ADD      r0,r4,r1,LSL #2
000038  f8d01c00          LDR      r1,[r0,#0xc00]
00003c  b28e              UXTH     r6,r1
;;;124          if ((wEPVal & EP_CTR_RX) != 0)
00003e  0431              LSLS     r1,r6,#16
000040  d50e              BPL      |L1.96|
;;;125          {
;;;126            /* clear int flag */
;;;127            _ClearEP_CTR_RX(EPindex);
000042  f8d01c00          LDR      r1,[r0,#0xc00]
000046  b289              UXTH     r1,r1
000048  ea01010a          AND      r1,r1,r10
00004c  f8c01c00          STR      r1,[r0,#0xc00]
;;;128    
;;;129            /* call OUT service function */
;;;130            (*pEpInt_OUT[EPindex-1])();
000050  4871              LDR      r0,|L1.536|
000052  f8981000          LDRB     r1,[r8,#0]  ; EPindex
000056  eb000081          ADD      r0,r0,r1,LSL #2
00005a  f8500c04          LDR      r0,[r0,#-4]
00005e  4780              BLX      r0
                  |L1.96|
;;;131    
;;;132          } /* if((wEPVal & EP_CTR_RX) */
;;;133    
;;;134          if ((wEPVal & EP_CTR_TX) != 0)
000060  0630              LSLS     r0,r6,#24
000062  d511              BPL      |L1.136|
;;;135          {
;;;136            /* clear int flag */
;;;137            _ClearEP_CTR_TX(EPindex);
000064  f8981000          LDRB     r1,[r8,#0]  ; EPindex
000068  eb040181          ADD      r1,r4,r1,LSL #2
00006c  f8d12c00          LDR      r2,[r1,#0xc00]
000070  b292              UXTH     r2,r2
000072  403a              ANDS     r2,r2,r7
000074  f8c12c00          STR      r2,[r1,#0xc00]
;;;138    
;;;139            /* call IN service function */
;;;140            (*pEpInt_IN[EPindex-1])();
000078  4968              LDR      r1,|L1.540|
00007a  f8980000          LDRB     r0,[r8,#0]  ; EPindex
00007e  eb010080          ADD      r0,r1,r0,LSL #2
000082  f8500c04          LDR      r0,[r0,#-4]
000086  4780              BLX      r0
                  |L1.136|
000088  f8d40c44          LDR      r0,[r4,#0xc44]        ;45
00008c  8028              STRH     r0,[r5,#0]            ;45
00008e  0400              LSLS     r0,r0,#16             ;45
000090  d4c6              BMI      |L1.32|
;;;141          } /* if((wEPVal & EP_CTR_TX) != 0) */
;;;142    
;;;143        }/* if(EPindex == 0) else */
;;;144    
;;;145      }/* while(...) */
;;;146    }
000092  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.150|
000096  f5046440          ADD      r4,r4,#0xc00
00009a  6821              LDR      r1,[r4,#0]            ;58
00009c  f3c13101          UBFX     r1,r1,#12,#2          ;58
0000a0  ea4f3101          LSL      r1,r1,#12             ;58
0000a4  f8a91000          STRH     r1,[r9,#0]            ;58
0000a8  6821              LDR      r1,[r4,#0]            ;59
0000aa  f3c11101          UBFX     r1,r1,#4,#2           ;59
0000ae  ea4f1101          LSL      r1,r1,#4              ;59
0000b2  f8a91002          STRH     r1,[r9,#2]            ;59
0000b6  6820              LDR      r0,[r4,#0]            ;60
0000b8  b280              UXTH     r0,r0                 ;60
0000ba  ea00000b          AND      r0,r0,r11             ;60
0000be  f4805000          EOR      r0,r0,#0x2000         ;60
0000c2  6020              STR      r0,[r4,#0]            ;60
0000c4  6820              LDR      r0,[r4,#0]            ;61
0000c6  f64871bf          MOV      r1,#0x8fbf            ;61
0000ca  b280              UXTH     r0,r0                 ;61
0000cc  ea000001          AND      r0,r0,r1              ;61
0000d0  f0800020          EOR      r0,r0,#0x20           ;61
0000d4  6020              STR      r0,[r4,#0]            ;61
0000d6  8828              LDRH     r0,[r5,#0]            ;66  ; wIstr
0000d8  f5a46440          SUB      r4,r4,#0xc00          ;61
0000dc  06c0              LSLS     r0,r0,#27             ;66
0000de  f8d40c00          LDR      r0,[r4,#0xc00]        ;94
0000e2  d40b              BMI      |L1.252|
0000e4  b280              UXTH     r0,r0                 ;74
0000e6  4038              ANDS     r0,r0,r7              ;74
0000e8  f8c40c00          STR      r0,[r4,#0xc00]        ;74
0000ec  f7fffffe          BL       In0_Process
0000f0  f8d40c00          LDR      r0,[r4,#0xc00]        ;78
0000f4  f4104f08          TST      r0,#0x8800            ;79
0000f8  d10d              BNE      |L1.278|
0000fa  e021              B        |L1.320|
                  |L1.252|
0000fc  b286              UXTH     r6,r0                 ;94
0000fe  0630              LSLS     r0,r6,#24             ;95
000100  d507              BPL      |L1.274|
000102  f8d40c00          LDR      r0,[r4,#0xc00]        ;97
000106  b280              UXTH     r0,r0                 ;97
000108  4038              ANDS     r0,r0,r7              ;97
00010a  f8c40c00          STR      r0,[r4,#0xc00]        ;97
00010e  f7fffffe          BL       In0_Process
                  |L1.274|
000112  0530              LSLS     r0,r6,#20             ;100
000114  d509              BPL      |L1.298|
                  |L1.278|
000116  f8d40c00          LDR      r0,[r4,#0xc00]        ;102
00011a  b280              UXTH     r0,r0                 ;102
00011c  ea00000a          AND      r0,r0,r10             ;102
000120  f8c40c00          STR      r0,[r4,#0xc00]        ;102
000124  f7fffffe          BL       Setup0_Process
000128  e00a              B        |L1.320|
                  |L1.298|
00012a  0430              LSLS     r0,r6,#16             ;106
00012c  d508              BPL      |L1.320|
00012e  f8d40c00          LDR      r0,[r4,#0xc00]        ;108
000132  b280              UXTH     r0,r0                 ;108
000134  ea00000a          AND      r0,r0,r10             ;108
000138  f8c40c00          STR      r0,[r4,#0xc00]        ;108
00013c  f7fffffe          BL       Out0_Process
                  |L1.320|
000140  f8d40c00          LDR      r0,[r4,#0xc00]        ;115
000144  f8b92000          LDRH     r2,[r9,#0]            ;115  ; SaveRState
000148  b280              UXTH     r0,r0                 ;115
00014a  ea00000b          AND      r0,r0,r11             ;115
00014e  04d3              LSLS     r3,r2,#19             ;115
000150  d501              BPL      |L1.342|
000152  f4805080          EOR      r0,r0,#0x1000         ;115
                  |L1.342|
000156  0492              LSLS     r2,r2,#18             ;115
000158  d501              BPL      |L1.350|
00015a  f4805000          EOR      r0,r0,#0x2000         ;115
                  |L1.350|
00015e  f8c40c00          STR      r0,[r4,#0xc00]        ;115
000162  f8d40c00          LDR      r0,[r4,#0xc00]        ;116
000166  f64872bf          MOV      r2,#0x8fbf            ;116
00016a  b280              UXTH     r0,r0                 ;116
00016c  f8b91002          LDRH     r1,[r9,#2]            ;116  ; SaveTState
000170  4010              ANDS     r0,r0,r2              ;116
000172  06ca              LSLS     r2,r1,#27             ;116
000174  d501              BPL      |L1.378|
000176  f0800010          EOR      r0,r0,#0x10           ;116
                  |L1.378|
00017a  0689              LSLS     r1,r1,#26             ;116
00017c  d501              BPL      |L1.386|
00017e  f0800020          EOR      r0,r0,#0x20           ;116
                  |L1.386|
000182  f8c40c00          STR      r0,[r4,#0xc00]        ;116
000186  e77f              B        |L1.136|
;;;147    
                          ENDP

                  CTR_HP PROC
;;;155    *******************************************************************************/
;;;156    void CTR_HP(void)
000188  e92d41f0          PUSH     {r4-r8,lr}
;;;157    {
;;;158      u32 wEPVal;
;;;159    
;;;160      while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
;;;161      {
;;;162        _SetISTR((u16)CLR_CTR); /* clear CTR flag */
;;;163        /* extract highest priority endpoint number */
;;;164        EPindex = (u8)(wIstr & ISTR_EP_ID);
00018c  4d1f              LDR      r5,|L1.524|
00018e  4c20              LDR      r4,|L1.528|
000190  4e20              LDR      r6,|L1.532|
000192  e031              B        |L1.504|
                  |L1.404|
000194  f64770ff          MOV      r0,#0x7fff            ;162
000198  f8c40c44          STR      r0,[r4,#0xc44]        ;162
00019c  8830              LDRH     r0,[r6,#0]  ; wIstr
00019e  f000000f          AND      r0,r0,#0xf
0001a2  7028              STRB     r0,[r5,#0]
;;;165        /* process related endpoint register */
;;;166        wEPVal = _GetENDPOINT(EPindex);
0001a4  eb040080          ADD      r0,r4,r0,LSL #2
0001a8  f8d01c00          LDR      r1,[r0,#0xc00]
0001ac  b28f              UXTH     r7,r1
;;;167        if ((wEPVal & EP_CTR_RX) != 0)
0001ae  0439              LSLS     r1,r7,#16
0001b0  d50e              BPL      |L1.464|
;;;168        {
;;;169          /* clear int flag */
;;;170          _ClearEP_CTR_RX(EPindex);
0001b2  f8d01c00          LDR      r1,[r0,#0xc00]
0001b6  f640728f          MOV      r2,#0xf8f
0001ba  b289              UXTH     r1,r1
0001bc  4011              ANDS     r1,r1,r2
0001be  f8c01c00          STR      r1,[r0,#0xc00]
;;;171    
;;;172          /* call OUT service function */
;;;173          (*pEpInt_OUT[EPindex-1])();
0001c2  4815              LDR      r0,|L1.536|
0001c4  7829              LDRB     r1,[r5,#0]  ; EPindex
0001c6  eb000081          ADD      r0,r0,r1,LSL #2
0001ca  f8500c04          LDR      r0,[r0,#-4]
0001ce  4780              BLX      r0
                  |L1.464|
;;;174    
;;;175        } /* if((wEPVal & EP_CTR_RX) */
;;;176        if ((wEPVal & EP_CTR_TX) != 0)
0001d0  0638              LSLS     r0,r7,#24
0001d2  d511              BPL      |L1.504|
;;;177        {
;;;178          /* clear int flag */
;;;179          _ClearEP_CTR_TX(EPindex);
0001d4  7828              LDRB     r0,[r5,#0]  ; EPindex
0001d6  eb040080          ADD      r0,r4,r0,LSL #2
0001da  f8d01c00          LDR      r1,[r0,#0xc00]
0001de  f648720f          MOV      r2,#0x8f0f
0001e2  b289              UXTH     r1,r1
0001e4  4011              ANDS     r1,r1,r2
0001e6  f8c01c00          STR      r1,[r0,#0xc00]
;;;180    
;;;181          /* call IN service function */
;;;182          (*pEpInt_IN[EPindex-1])();
0001ea  480c              LDR      r0,|L1.540|
0001ec  7829              LDRB     r1,[r5,#0]  ; EPindex
0001ee  eb000081          ADD      r0,r0,r1,LSL #2
0001f2  f8500c04          LDR      r0,[r0,#-4]
0001f6  4780              BLX      r0
                  |L1.504|
0001f8  f8d40c44          LDR      r0,[r4,#0xc44]        ;160
0001fc  8030              STRH     r0,[r6,#0]            ;160
0001fe  0400              LSLS     r0,r0,#16             ;160
000200  d4c8              BMI      |L1.404|
;;;183    
;;;184    
;;;185        } /* if((wEPVal & EP_CTR_TX) != 0) */
;;;186    
;;;187      }/* while(...) */
;;;188    }
000202  e8bd81f0          POP      {r4-r8,pc}
;;;189    
                          ENDP

000206  0000              DCW      0x0000
                  |L1.520|
                          DCD      ||.data||
                  |L1.524|
                          DCD      EPindex
                  |L1.528|
                          DCD      0x40005000
                  |L1.532|
                          DCD      wIstr
                  |L1.536|
                          DCD      pEpInt_OUT
                  |L1.540|
                          DCD      pEpInt_IN

                          AREA ||.data||, DATA, ALIGN=1

                  SaveRState
000000  0000              DCB      0x00,0x00
                  SaveTState
000002  0000              DCB      0x00,0x00
