; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\usb_core.o --depend=.\Obj\usb_core.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\usb_library\inc -I..\USB_test -I.\FWlib\inc -I.\user -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Obj\usb_core.crf usb_library\src\usb_core.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Standard_GetConfiguration PROC
;;;55     *******************************************************************************/
;;;56     u8 *Standard_GetConfiguration(u16 Length)
000000  b510              PUSH     {r4,lr}
;;;57     {
;;;58       if (Length == 0)
;;;59       {
;;;60         pInformation->Ctrl_Info.Usb_wLength =
000002  4cfa              LDR      r4,|L1.1004|
000004  b130              CBZ      r0,|L1.20|
;;;61           sizeof(pInformation->Current_Configuration);
;;;62         return 0;
;;;63       }
;;;64       pUser_Standard_Requests->User_GetConfiguration();
000006  48fa              LDR      r0,|L1.1008|
000008  6800              LDR      r0,[r0,#0]  ; pUser_Standard_Requests
00000a  6800              LDR      r0,[r0,#0]
00000c  4780              BLX      r0
;;;65       return (u8 *)&pInformation->Current_Configuration;
00000e  6820              LDR      r0,[r4,#0]  ; pInformation
000010  300a              ADDS     r0,r0,#0xa
;;;66     }
000012  bd10              POP      {r4,pc}
                  |L1.20|
000014  6821              LDR      r1,[r4,#0]            ;60  ; pInformation
000016  2001              MOVS     r0,#1                 ;60
000018  8208              STRH     r0,[r1,#0x10]         ;60
00001a  2000              MOVS     r0,#0                 ;62
00001c  bd10              POP      {r4,pc}
;;;67     
                          ENDP

                  Standard_SetConfiguration PROC
;;;76     *******************************************************************************/
;;;77     RESULT Standard_SetConfiguration(void)
00001e  48f3              LDR      r0,|L1.1004|
;;;78     {
000020  b510              PUSH     {r4,lr}
;;;79     
;;;80       if ((pInformation->USBwValue0 <=
000022  49f4              LDR      r1,|L1.1012|
000024  6800              LDR      r0,[r0,#0]  ; pInformation
000026  784a              LDRB     r2,[r1,#1]  ; Device_Table
000028  78c1              LDRB     r1,[r0,#3]
00002a  4291              CMP      r1,r2
00002c  d803              BHI      |L1.54|
;;;81           Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
00002e  7882              LDRB     r2,[r0,#2]
000030  b90a              CBNZ     r2,|L1.54|
;;;82           && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
000032  8882              LDRH     r2,[r0,#4]
000034  b10a              CBZ      r2,|L1.58|
                  |L1.54|
;;;83       {
;;;84         pInformation->Current_Configuration = pInformation->USBwValue0;
;;;85         pUser_Standard_Requests->User_SetConfiguration();
;;;86         return USB_SUCCESS;
;;;87       }
;;;88       else
;;;89       {
;;;90         return USB_UNSUPPORT;
000036  2002              MOVS     r0,#2
;;;91       }
;;;92     }
000038  bd10              POP      {r4,pc}
                  |L1.58|
00003a  7281              STRB     r1,[r0,#0xa]          ;84
00003c  48ec              LDR      r0,|L1.1008|
00003e  6800              LDR      r0,[r0,#0]            ;85  ; pUser_Standard_Requests
000040  6840              LDR      r0,[r0,#4]            ;85
000042  4780              BLX      r0                    ;85
000044  2000              MOVS     r0,#0                 ;86
000046  bd10              POP      {r4,pc}
;;;93     
                          ENDP

                  Standard_GetInterface PROC
;;;101    *******************************************************************************/
;;;102    u8 *Standard_GetInterface(u16 Length)
000048  b510              PUSH     {r4,lr}
;;;103    {
;;;104      if (Length == 0)
;;;105      {
;;;106        pInformation->Ctrl_Info.Usb_wLength =
00004a  4ce8              LDR      r4,|L1.1004|
00004c  b130              CBZ      r0,|L1.92|
;;;107          sizeof(pInformation->Current_AlternateSetting);
;;;108        return 0;
;;;109      }
;;;110      pUser_Standard_Requests->User_GetInterface();
00004e  48e8              LDR      r0,|L1.1008|
000050  6800              LDR      r0,[r0,#0]  ; pUser_Standard_Requests
000052  6880              LDR      r0,[r0,#8]
000054  4780              BLX      r0
;;;111      return (u8 *)&pInformation->Current_AlternateSetting;
000056  6820              LDR      r0,[r4,#0]  ; pInformation
000058  300c              ADDS     r0,r0,#0xc
;;;112    }
00005a  bd10              POP      {r4,pc}
                  |L1.92|
00005c  6821              LDR      r1,[r4,#0]            ;106  ; pInformation
00005e  2001              MOVS     r0,#1                 ;106
000060  8208              STRH     r0,[r1,#0x10]         ;106
000062  2000              MOVS     r0,#0                 ;108
000064  bd10              POP      {r4,pc}
;;;113    
                          ENDP

                  Standard_SetInterface PROC
;;;122    *******************************************************************************/
;;;123    RESULT Standard_SetInterface(void)
000066  b510              PUSH     {r4,lr}
;;;124    {
;;;125      RESULT Re;
;;;126      /*Test if the specified Interface and Alternate Setting are supported by
;;;127        the application Firmware*/
;;;128      Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
000068  4ce0              LDR      r4,|L1.1004|
00006a  4ae3              LDR      r2,|L1.1016|
00006c  6820              LDR      r0,[r4,#0]  ; pInformation
00006e  6812              LDR      r2,[r2,#0]  ; pProperty
000070  78c1              LDRB     r1,[r0,#3]
000072  6992              LDR      r2,[r2,#0x18]
000074  7940              LDRB     r0,[r0,#5]
000076  4790              BLX      r2
;;;129    
;;;130      if (pInformation->Current_Configuration != 0)
000078  6821              LDR      r1,[r4,#0]  ; pInformation
00007a  7a8a              LDRB     r2,[r1,#0xa]
00007c  b122              CBZ      r2,|L1.136|
;;;131      {
;;;132        if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
00007e  b918              CBNZ     r0,|L1.136|
000080  7908              LDRB     r0,[r1,#4]
000082  b908              CBNZ     r0,|L1.136|
;;;133            || (pInformation->USBwValue1 != 0))
000084  7888              LDRB     r0,[r1,#2]
000086  b108              CBZ      r0,|L1.140|
                  |L1.136|
;;;134        {
;;;135          return  USB_UNSUPPORT;
;;;136        }
;;;137        else if (Re == USB_SUCCESS)
;;;138        {
;;;139          pUser_Standard_Requests->User_SetInterface();
;;;140          pInformation->Current_Interface = pInformation->USBwIndex0;
;;;141          pInformation->Current_AlternateSetting = pInformation->USBwValue0;
;;;142          return USB_SUCCESS;
;;;143        }
;;;144    
;;;145      }
;;;146    
;;;147      return USB_UNSUPPORT;
000088  2002              MOVS     r0,#2
;;;148    }
00008a  bd10              POP      {r4,pc}
                  |L1.140|
00008c  48d8              LDR      r0,|L1.1008|
00008e  6800              LDR      r0,[r0,#0]            ;139  ; pUser_Standard_Requests
000090  68c0              LDR      r0,[r0,#0xc]          ;139
000092  4780              BLX      r0                    ;139
000094  6820              LDR      r0,[r4,#0]            ;140  ; pInformation
000096  7941              LDRB     r1,[r0,#5]            ;140
000098  72c1              STRB     r1,[r0,#0xb]          ;140
00009a  78c1              LDRB     r1,[r0,#3]            ;141
00009c  7301              STRB     r1,[r0,#0xc]          ;141
00009e  2000              MOVS     r0,#0                 ;142
0000a0  bd10              POP      {r4,pc}
;;;149    
                          ENDP

                  Standard_GetStatus PROC
;;;157    *******************************************************************************/
;;;158    u8 *Standard_GetStatus(u16 Length)
0000a2  49d2              LDR      r1,|L1.1004|
;;;159    {
0000a4  b510              PUSH     {r4,lr}
;;;160      if (Length == 0)
;;;161      {
;;;162        pInformation->Ctrl_Info.Usb_wLength = 2;
0000a6  6809              LDR      r1,[r1,#0]
0000a8  b160              CBZ      r0,|L1.196|
;;;163        return 0;
;;;164      }
;;;165    
;;;166      StatusInfo.w = 0;
0000aa  48d4              LDR      r0,|L1.1020|
0000ac  2200              MOVS     r2,#0
0000ae  8002              STRH     r2,[r0,#0]
;;;167      /* Reset Status Information */
;;;168    
;;;169      if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
0000b0  780a              LDRB     r2,[r1,#0]
0000b2  0653              LSLS     r3,r2,#25
0000b4  d00a              BEQ      |L1.204|
;;;170      {
;;;171        /*Get Device Status */
;;;172        u8 Feature = pInformation->Current_Feature;
;;;173    
;;;174        /* Remote Wakeup enabled */
;;;175        if (ValBit(Feature, 5))
;;;176        {
;;;177          SetBit(StatusInfo0, 1);
;;;178        }
;;;179    
;;;180        /* Self-powered */
;;;181        if (ValBit(Feature, 6))
;;;182        {
;;;183          SetBit(StatusInfo0, 0);
;;;184        }
;;;185        else /* Bus-powered */
;;;186        {
;;;187          ClrBit(StatusInfo0, 0);
;;;188        }
;;;189      }
;;;190      /*Interface Status*/
;;;191      else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
0000b6  f002027f          AND      r2,r2,#0x7f
0000ba  2a01              CMP      r2,#1
0000bc  d013              BEQ      |L1.230|
;;;192      {
;;;193        return (u8 *)&StatusInfo;
;;;194      }
;;;195      /*Get EndPoint Status*/
;;;196      else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
0000be  2a02              CMP      r2,#2
0000c0  d013              BEQ      |L1.234|
0000c2  e001              B        |L1.200|
                  |L1.196|
0000c4  2002              MOVS     r0,#2                 ;162
0000c6  8208              STRH     r0,[r1,#0x10]         ;162
                  |L1.200|
;;;197      {
;;;198        u8 Related_Endpoint;
;;;199        u8 wIndex0 = pInformation->USBwIndex0;
;;;200    
;;;201        Related_Endpoint = (wIndex0 & 0x0f);
;;;202        if (ValBit(wIndex0, 7))
;;;203        {
;;;204          /* IN endpoint */
;;;205          if (_GetTxStallStatus(Related_Endpoint))
;;;206          {
;;;207            SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
;;;208          }
;;;209        }
;;;210        else
;;;211        {
;;;212          /* OUT endpoint */
;;;213          if (_GetRxStallStatus(Related_Endpoint))
;;;214          {
;;;215            SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
;;;216          }
;;;217        }
;;;218    
;;;219      }
;;;220      else
;;;221      {
;;;222        return NULL;
0000c8  2000              MOVS     r0,#0
;;;223      }
;;;224      pUser_Standard_Requests->User_GetStatus();
;;;225      return (u8 *)&StatusInfo;
;;;226    }
0000ca  bd10              POP      {r4,pc}
                  |L1.204|
0000cc  7a49              LDRB     r1,[r1,#9]            ;172
0000ce  068a              LSLS     r2,r1,#26             ;175
0000d0  d503              BPL      |L1.218|
0000d2  7802              LDRB     r2,[r0,#0]            ;177  ; StatusInfo
0000d4  f0420202          ORR      r2,r2,#2              ;177
0000d8  7002              STRB     r2,[r0,#0]            ;177
                  |L1.218|
0000da  0649              LSLS     r1,r1,#25             ;181
0000dc  d412              BMI      |L1.260|
0000de  7801              LDRB     r1,[r0,#0]            ;187  ; StatusInfo
0000e0  f00101fe          AND      r1,r1,#0xfe           ;187
0000e4  e011              B        |L1.266|
                  |L1.230|
0000e6  48c5              LDR      r0,|L1.1020|
0000e8  bd10              POP      {r4,pc}
                  |L1.234|
0000ea  794a              LDRB     r2,[r1,#5]            ;199
0000ec  f002010f          AND      r1,r2,#0xf            ;201
0000f0  0613              LSLS     r3,r2,#24             ;202
0000f2  4ac3              LDR      r2,|L1.1024|
0000f4  eb020181          ADD      r1,r2,r1,LSL #2       ;213
0000f8  f8d11c00          LDR      r1,[r1,#0xc00]        ;213
0000fc  d507              BPL      |L1.270|
0000fe  f3c11101          UBFX     r1,r1,#4,#2           ;205
000102  e006              B        |L1.274|
                  |L1.260|
000104  7801              LDRB     r1,[r0,#0]            ;207  ; StatusInfo
000106  f0410101          ORR      r1,r1,#1              ;207
                  |L1.266|
00010a  7001              STRB     r1,[r0,#0]            ;207
00010c  e003              B        |L1.278|
                  |L1.270|
00010e  f3c13101          UBFX     r1,r1,#12,#2          ;213
                  |L1.274|
000112  2901              CMP      r1,#1                 ;205
000114  d0f6              BEQ      |L1.260|
                  |L1.278|
000116  48b6              LDR      r0,|L1.1008|
000118  6800              LDR      r0,[r0,#0]            ;224  ; pUser_Standard_Requests
00011a  6900              LDR      r0,[r0,#0x10]         ;224
00011c  4780              BLX      r0                    ;224
00011e  e7e2              B        |L1.230|
;;;227    
                          ENDP

                  Standard_ClearFeature PROC
;;;235    *******************************************************************************/
;;;236    RESULT Standard_ClearFeature(void)
000120  b570              PUSH     {r4-r6,lr}
;;;237    {
;;;238      u32     Type_Rec = Type_Recipient;
000122  48b2              LDR      r0,|L1.1004|
000124  6801              LDR      r1,[r0,#0]  ; pInformation
000126  7808              LDRB     r0,[r1,#0]
000128  f010007f          ANDS     r0,r0,#0x7f
;;;239      u32     Status;
;;;240    
;;;241    
;;;242      if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
00012c  d002              BEQ      |L1.308|
;;;243      {/*Device Clear Feature*/
;;;244        ClrBit(pInformation->Current_Feature, 5);
;;;245        return USB_SUCCESS;
;;;246      }
;;;247      else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
00012e  2802              CMP      r0,#2
000130  d005              BEQ      |L1.318|
000132  e062              B        |L1.506|
                  |L1.308|
000134  7a48              LDRB     r0,[r1,#9]            ;244
000136  f00000df          AND      r0,r0,#0xdf           ;244
00013a  7248              STRB     r0,[r1,#9]            ;244
00013c  e04c              B        |L1.472|
                  |L1.318|
;;;248      {/*EndPoint Clear Feature*/
;;;249        DEVICE* pDev;
;;;250        u32 Related_Endpoint;
;;;251        u32 wIndex0;
;;;252        u32 rEP;
;;;253    
;;;254        if ((pInformation->USBwValue != ENDPOINT_STALL)
00013e  8848              LDRH     r0,[r1,#2]
000140  bbe8              CBNZ     r0,|L1.446|
;;;255            || (pInformation->USBwIndex1 != 0))
000142  7908              LDRB     r0,[r1,#4]
000144  bbd8              CBNZ     r0,|L1.446|
;;;256        {
;;;257          return USB_UNSUPPORT;
;;;258        }
;;;259    
;;;260        pDev = &Device_Table;
;;;261        wIndex0 = pInformation->USBwIndex0;
000146  794a              LDRB     r2,[r1,#5]
;;;262        rEP = wIndex0 & ~0x80;
;;;263        Related_Endpoint = ENDP0 + rEP;
;;;264    
;;;265        if (ValBit(pInformation->USBwIndex0, 7))
;;;266        {
;;;267          /*Get Status of endpoint & stall the request if the related_ENdpoint
;;;268          is Disabled*/
;;;269          Status = _GetEPTxStatus(Related_Endpoint);
000148  4cad              LDR      r4,|L1.1024|
00014a  0613              LSLS     r3,r2,#24             ;265
00014c  f0220080          BIC      r0,r2,#0x80           ;262
000150  2b00              CMP      r3,#0                 ;265
;;;270        }
;;;271        else
;;;272        {
;;;273          Status = _GetEPRxStatus(Related_Endpoint);
000152  eb040380          ADD      r3,r4,r0,LSL #2
000156  4da7              LDR      r5,|L1.1012|
000158  f8d33c00          LDR      r3,[r3,#0xc00]
00015c  da03              BGE      |L1.358|
00015e  f3c31301          UBFX     r3,r3,#4,#2           ;269
000162  011b              LSLS     r3,r3,#4              ;269
000164  e002              B        |L1.364|
                  |L1.358|
000166  f3c33301          UBFX     r3,r3,#12,#2
00016a  031b              LSLS     r3,r3,#12
                  |L1.364|
;;;274        }
;;;275    
;;;276        if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
00016c  782e              LDRB     r6,[r5,#0]
00016e  4605              MOV      r5,r0
000170  4286              CMP      r6,r0
000172  d942              BLS      |L1.506|
000174  b31b              CBZ      r3,|L1.446|
;;;277            || (pInformation->Current_Configuration == 0))
000176  7a89              LDRB     r1,[r1,#0xa]
000178  b309              CBZ      r1,|L1.446|
;;;278        {
;;;279          return USB_UNSUPPORT;
;;;280        }
;;;281    
;;;282    
;;;283        if (wIndex0 & 0x80)
00017a  0611              LSLS     r1,r2,#24
00017c  d510              BPL      |L1.416|
;;;284        {
;;;285          /* IN endpoint */
;;;286          if (_GetTxStallStatus(Related_Endpoint ))
00017e  eb040180          ADD      r1,r4,r0,LSL #2
000182  f8d11c00          LDR      r1,[r1,#0xc00]
000186  f3c11101          UBFX     r1,r1,#4,#2
00018a  2901              CMP      r1,#1
00018c  d120              BNE      |L1.464|
;;;287          {
;;;288            ClearDTOG_TX(Related_Endpoint);
00018e  b2e8              UXTB     r0,r5
000190  4604              MOV      r4,r0
000192  f7fffffe          BL       ClearDTOG_TX
;;;289            SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
000196  2130              MOVS     r1,#0x30
000198  4620              MOV      r0,r4
00019a  f7fffffe          BL       SetEPTxStatus
00019e  e017              B        |L1.464|
                  |L1.416|
;;;290          }
;;;291        }
;;;292        else
;;;293        {
;;;294          /* OUT endpoint */
;;;295          if (_GetRxStallStatus(Related_Endpoint))
0001a0  eb040580          ADD      r5,r4,r0,LSL #2
0001a4  f8d51c00          LDR      r1,[r5,#0xc00]
0001a8  f3c13101          UBFX     r1,r1,#12,#2
0001ac  2901              CMP      r1,#1
0001ae  d10f              BNE      |L1.464|
;;;296          {
;;;297            if (Related_Endpoint == ENDP0)
;;;298            {
;;;299              /* After clear the STALL, enable the default endpoint receiver */
;;;300              SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
;;;301              _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
0001b0  f64b768f          MOV      r6,#0xbf8f
0001b4  b190              CBZ      r0,|L1.476|
;;;302            }
;;;303            else
;;;304            {
;;;305              ClearDTOG_RX(Related_Endpoint);
0001b6  b2c0              UXTB     r0,r0
0001b8  f7fffffe          BL       ClearDTOG_RX
;;;306              _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
0001bc  e000              B        |L1.448|
                  |L1.446|
0001be  e01c              B        |L1.506|
                  |L1.448|
0001c0  f8d50c00          LDR      r0,[r5,#0xc00]
0001c4  b280              UXTH     r0,r0
0001c6  4030              ANDS     r0,r0,r6
0001c8  f4805040          EOR      r0,r0,#0x3000
0001cc  f8c50c00          STR      r0,[r5,#0xc00]
                  |L1.464|
;;;307            }
;;;308          }
;;;309        }
;;;310        pUser_Standard_Requests->User_ClearFeature();
0001d0  4887              LDR      r0,|L1.1008|
0001d2  6800              LDR      r0,[r0,#0]  ; pUser_Standard_Requests
0001d4  6940              LDR      r0,[r0,#0x14]
0001d6  4780              BLX      r0
                  |L1.472|
;;;311        return USB_SUCCESS;
0001d8  2000              MOVS     r0,#0
;;;312      }
;;;313    
;;;314      return USB_UNSUPPORT;
;;;315    }
0001da  bd70              POP      {r4-r6,pc}
                  |L1.476|
0001dc  4889              LDR      r0,|L1.1028|
0001de  f890102c          LDRB     r1,[r0,#0x2c]         ;300  ; Device_Property
0001e2  2000              MOVS     r0,#0                 ;300
0001e4  f7fffffe          BL       SetEPRxCount
0001e8  f8d40c00          LDR      r0,[r4,#0xc00]        ;301
0001ec  b280              UXTH     r0,r0                 ;301
0001ee  4030              ANDS     r0,r0,r6              ;301
0001f0  f4805040          EOR      r0,r0,#0x3000         ;301
0001f4  f8c40c00          STR      r0,[r4,#0xc00]        ;301
0001f8  e7ea              B        |L1.464|
                  |L1.506|
0001fa  2002              MOVS     r0,#2                 ;314
0001fc  bd70              POP      {r4-r6,pc}
;;;316    
                          ENDP

                  Standard_SetEndPointFeature PROC
;;;324    *******************************************************************************/
;;;325    RESULT Standard_SetEndPointFeature(void)
0001fe  b570              PUSH     {r4-r6,lr}
;;;326    {
;;;327      u32    wIndex0;
;;;328      u32    Related_Endpoint;
;;;329      u32    rEP;
;;;330      u32   Status;
;;;331    
;;;332      wIndex0 = pInformation->USBwIndex0;
000200  487a              LDR      r0,|L1.1004|
000202  6803              LDR      r3,[r0,#0]  ; pInformation
;;;333      rEP = wIndex0 & ~0x80;
;;;334      Related_Endpoint = ENDP0 + rEP;
;;;335    
;;;336      if (ValBit(pInformation->USBwIndex0, 7))
;;;337      {
;;;338        /* get Status of endpoint & stall the request if the related_ENdpoint
;;;339        is Disabled*/
;;;340        Status = _GetEPTxStatus(Related_Endpoint);
000204  487e              LDR      r0,|L1.1024|
000206  7959              LDRB     r1,[r3,#5]            ;332
000208  f0210580          BIC      r5,r1,#0x80           ;333
00020c  eb000085          ADD      r0,r0,r5,LSL #2
000210  060c              LSLS     r4,r1,#24             ;336
;;;341      }
;;;342      else
;;;343      {
;;;344        Status = _GetEPRxStatus(Related_Endpoint);
000212  f8d04c00          LDR      r4,[r0,#0xc00]
000216  f0210280          BIC      r2,r1,#0x80           ;333
00021a  d503              BPL      |L1.548|
00021c  f3c41401          UBFX     r4,r4,#4,#2           ;340
000220  0124              LSLS     r4,r4,#4              ;340
000222  e002              B        |L1.554|
                  |L1.548|
000224  f3c43401          UBFX     r4,r4,#12,#2
000228  0324              LSLS     r4,r4,#12
                  |L1.554|
;;;345      }
;;;346    
;;;347      if (Related_Endpoint >= Device_Table.Total_Endpoint
00022a  4d72              LDR      r5,|L1.1012|
00022c  782d              LDRB     r5,[r5,#0]  ; Device_Table
00022e  4295              CMP      r5,r2
000230  d90f              BLS      |L1.594|
;;;348          || pInformation->USBwValue != 0 || Status == 0
000232  885a              LDRH     r2,[r3,#2]
000234  b96a              CBNZ     r2,|L1.594|
000236  b164              CBZ      r4,|L1.594|
;;;349          || pInformation->Current_Configuration == 0)
000238  7a9a              LDRB     r2,[r3,#0xa]
00023a  b152              CBZ      r2,|L1.594|
;;;350      {
;;;351        return USB_UNSUPPORT;
;;;352      }
;;;353      else
;;;354      {
;;;355        if (wIndex0 & 0x80)
00023c  0609              LSLS     r1,r1,#24
;;;356        {
;;;357          /* IN endpoint */
;;;358          _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
;;;359        }
;;;360    
;;;361        else
;;;362        {
;;;363          /* OUT endpoint */
;;;364          _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
00023e  f8d01c00          LDR      r1,[r0,#0xc00]
000242  d508              BPL      |L1.598|
000244  f64872bf          MOV      r2,#0x8fbf            ;358
000248  b289              UXTH     r1,r1                 ;358
00024a  4011              ANDS     r1,r1,r2              ;358
00024c  f0810110          EOR      r1,r1,#0x10           ;358
000250  e007              B        |L1.610|
                  |L1.594|
000252  2002              MOVS     r0,#2                 ;351
;;;365        }
;;;366      }
;;;367      pUser_Standard_Requests->User_SetEndPointFeature();
;;;368      return USB_SUCCESS;
;;;369    }
000254  bd70              POP      {r4-r6,pc}
                  |L1.598|
000256  f64b728f          MOV      r2,#0xbf8f            ;364
00025a  b289              UXTH     r1,r1                 ;364
00025c  4011              ANDS     r1,r1,r2              ;364
00025e  f4815180          EOR      r1,r1,#0x1000         ;364
                  |L1.610|
000262  f8c01c00          STR      r1,[r0,#0xc00]        ;358
000266  4862              LDR      r0,|L1.1008|
000268  6800              LDR      r0,[r0,#0]            ;367  ; pUser_Standard_Requests
00026a  6980              LDR      r0,[r0,#0x18]         ;367
00026c  4780              BLX      r0                    ;367
00026e  2000              MOVS     r0,#0                 ;368
000270  bd70              POP      {r4-r6,pc}
;;;370    
                          ENDP

                  Standard_SetDeviceFeature PROC
;;;378    *******************************************************************************/
;;;379    RESULT Standard_SetDeviceFeature(void)
000272  485e              LDR      r0,|L1.1004|
;;;380    {
000274  b510              PUSH     {r4,lr}
;;;381      SetBit(pInformation->Current_Feature, 5);
000276  6800              LDR      r0,[r0,#0]  ; pInformation
000278  7a41              LDRB     r1,[r0,#9]
00027a  f0410120          ORR      r1,r1,#0x20
00027e  7241              STRB     r1,[r0,#9]
;;;382      pUser_Standard_Requests->User_SetDeviceFeature();
000280  485b              LDR      r0,|L1.1008|
000282  6800              LDR      r0,[r0,#0]  ; pUser_Standard_Requests
000284  69c0              LDR      r0,[r0,#0x1c]
000286  4780              BLX      r0
;;;383      return USB_SUCCESS;
000288  2000              MOVS     r0,#0
;;;384    }
00028a  bd10              POP      {r4,pc}
;;;385    
                          ENDP

                  Standard_GetDescriptorData PROC
;;;404    *******************************************************************************/
;;;405    u8 *Standard_GetDescriptorData(u16 Length, ONE_DESCRIPTOR *pDesc)
00028c  4a57              LDR      r2,|L1.1004|
;;;406    {
;;;407      u32  wOffset;
;;;408    
;;;409      wOffset = pInformation->Ctrl_Info.Usb_wOffset;
;;;410      if (Length == 0)
00028e  2800              CMP      r0,#0
000290  6812              LDR      r2,[r2,#0]            ;409  ; pInformation
000292  8a50              LDRH     r0,[r2,#0x12]         ;409
000294  d002              BEQ      |L1.668|
;;;411      {
;;;412        pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
;;;413        return 0;
;;;414      }
;;;415    
;;;416      return pDesc->Descriptor + wOffset;
000296  6809              LDR      r1,[r1,#0]
000298  4408              ADD      r0,r0,r1
;;;417    }
00029a  4770              BX       lr
                  |L1.668|
00029c  8889              LDRH     r1,[r1,#4]            ;412
00029e  1a08              SUBS     r0,r1,r0              ;412
0002a0  8210              STRH     r0,[r2,#0x10]         ;412
0002a2  2000              MOVS     r0,#0                 ;413
0002a4  4770              BX       lr
;;;418    
                          ENDP

                  DataStageIn PROC
;;;482    *******************************************************************************/
;;;483    void DataStageIn(void)
0002a6  e92d47f0          PUSH     {r4-r10,lr}
;;;484    {
;;;485      ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
0002aa  f8df9140          LDR      r9,|L1.1004|
;;;486      u32 save_wLength = pEPinfo->Usb_wLength;
;;;487      u32 ControlState = pInformation->ControlState;
;;;488    
;;;489      u8 *DataBuffer;
;;;490      u32 Length;
;;;491    
;;;492      if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
;;;493      {
;;;494        /* no more data to send so STALL the TX Status*/
;;;495        ControlState = WAIT_STATUS_OUT;
;;;496        vSetEPTxStatus(EP_TX_STALL);
0002ae  f8df8158          LDR      r8,|L1.1032|
0002b2  f8d91000          LDR      r1,[r9,#0]            ;485  ; pInformation
0002b6  f1010410          ADD      r4,r1,#0x10           ;485
0002ba  8a08              LDRH     r0,[r1,#0x10]         ;486
0002bc  7a09              LDRB     r1,[r1,#8]            ;487
0002be  b908              CBNZ     r0,|L1.708|
0002c0  2904              CMP      r1,#4                 ;492
0002c2  d02a              BEQ      |L1.794|
                  |L1.708|
;;;497        goto Expect_Status_Out;
;;;498      }
;;;499    
;;;500      Length = pEPinfo->PacketSize;
0002c4  88a5              LDRH     r5,[r4,#4]
;;;501      ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
0002c6  2604              MOVS     r6,#4
0002c8  42a8              CMP      r0,r5
0002ca  d900              BLS      |L1.718|
0002cc  2602              MOVS     r6,#2
                  |L1.718|
;;;502    
;;;503      if (Length > save_wLength)
0002ce  4285              CMP      r5,r0
0002d0  d900              BLS      |L1.724|
;;;504      {
;;;505        Length = save_wLength;
0002d2  4605              MOV      r5,r0
                  |L1.724|
;;;506      }
;;;507    
;;;508      DataBuffer = (*pEPinfo->CopyData)(Length);
0002d4  b2a8              UXTH     r0,r5
0002d6  68a1              LDR      r1,[r4,#8]
0002d8  4607              MOV      r7,r0
0002da  4788              BLX      r1
0002dc  4682              MOV      r10,r0
;;;509    
;;;510      UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
0002de  2000              MOVS     r0,#0
0002e0  f7fffffe          BL       GetEPTxAddr
0002e4  4601              MOV      r1,r0
0002e6  463a              MOV      r2,r7
0002e8  4650              MOV      r0,r10
0002ea  f7fffffe          BL       UserToPMABufferCopy
0002ee  4639              MOV      r1,r7
;;;511    
;;;512      SetEPTxCount(ENDP0, Length);
0002f0  2000              MOVS     r0,#0
0002f2  f7fffffe          BL       SetEPTxCount
;;;513    
;;;514      pEPinfo->Usb_wLength -= Length;
0002f6  8820              LDRH     r0,[r4,#0]
;;;515      pEPinfo->Usb_wOffset += Length;
;;;516      vSetEPTxStatus(EP_TX_VALID);
0002f8  2130              MOVS     r1,#0x30
0002fa  1b40              SUBS     r0,r0,r5              ;514
0002fc  8020              STRH     r0,[r4,#0]            ;514
0002fe  8860              LDRH     r0,[r4,#2]            ;515
000300  4428              ADD      r0,r0,r5              ;515
000302  8060              STRH     r0,[r4,#2]            ;515
000304  f8a81000          STRH     r1,[r8,#0]
;;;517    
;;;518      USB_StatusOut();/* Expect the host to abort the data IN stage */
000308  0208              LSLS     r0,r1,#8
00030a  4940              LDR      r1,|L1.1036|
00030c  f8a10000          STRH.W   r0,[r1,#0]
                  |L1.784|
;;;519    
;;;520    Expect_Status_Out:
;;;521      pInformation->ControlState = ControlState;
000310  f8d90000          LDR      r0,[r9,#0]  ; pInformation
000314  7206              STRB     r6,[r0,#8]
                  |L1.790|
;;;522    }
000316  e8bd87f0          POP      {r4-r10,pc}
                  |L1.794|
00031a  2607              MOVS     r6,#7                 ;495
00031c  2110              MOVS     r1,#0x10              ;496
00031e  f8a81000          STRH     r1,[r8,#0]            ;496
000322  e7f5              B        |L1.784|
;;;523    
                          ENDP

                  NoData_Setup0 PROC
;;;530    *******************************************************************************/
;;;531    void NoData_Setup0(void)
000324  b570              PUSH     {r4-r6,lr}
;;;532    {
;;;533      RESULT Result = USB_UNSUPPORT;
;;;534      u32 RequestNo = pInformation->USBbRequest;
000326  4d31              LDR      r5,|L1.1004|
;;;535      u32 ControlState;
;;;536    
;;;537      if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
000328  6828              LDR      r0,[r5,#0]  ; pInformation
00032a  7801              LDRB     r1,[r0,#0]
00032c  7844              LDRB     r4,[r0,#1]            ;534
00032e  064a              LSLS     r2,r1,#25
000330  d006              BEQ      |L1.832|
;;;538      {
;;;539        /* Device Request*/
;;;540        /* SET_CONFIGURATION*/
;;;541        if (RequestNo == SET_CONFIGURATION)
;;;542        {
;;;543          Result = Standard_SetConfiguration();
;;;544        }
;;;545    
;;;546        /*SET ADDRESS*/
;;;547        else if (RequestNo == SET_ADDRESS)
;;;548        {
;;;549          if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
;;;550              || (pInformation->USBwIndex != 0)
;;;551              || (pInformation->Current_Configuration != 0))
;;;552            /* Device Address should be 127 or less*/
;;;553          {
;;;554            ControlState = STALLED;
;;;555            goto exit_NoData_Setup0;
;;;556          }
;;;557          else
;;;558          {
;;;559            Result = USB_SUCCESS;
;;;560          }
;;;561        }
;;;562        /*SET FEATURE for Device*/
;;;563        else if (RequestNo == SET_FEATURE)
;;;564        {
;;;565          if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
;;;566              && (pInformation->USBwIndex == 0)
;;;567              && (ValBit(pInformation->Current_Feature, 5)))
;;;568          {
;;;569            Result = Standard_SetDeviceFeature();
;;;570          }
;;;571          else
;;;572          {
;;;573            Result = USB_UNSUPPORT;
;;;574          }
;;;575        }
;;;576        /*Clear FEATURE for Device */
;;;577        else if (RequestNo == CLEAR_FEATURE)
;;;578        {
;;;579          if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
;;;580              && pInformation->USBwIndex == 0
;;;581              && ValBit(pInformation->Current_Feature, 5))
;;;582          {
;;;583            Result = Standard_ClearFeature();
;;;584          }
;;;585          else
;;;586          {
;;;587            Result = USB_UNSUPPORT;
;;;588          }
;;;589        }
;;;590    
;;;591      }
;;;592    
;;;593      /* Interface Request*/
;;;594      else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
000332  f001007f          AND      r0,r1,#0x7f
000336  2801              CMP      r0,#1
000338  d02b              BEQ      |L1.914|
;;;595      {
;;;596        /*SET INTERFACE*/
;;;597        if (RequestNo == SET_INTERFACE)
;;;598        {
;;;599          Result = Standard_SetInterface();
;;;600        }
;;;601      }
;;;602    
;;;603      /* EndPoint Request*/
;;;604      else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
00033a  2802              CMP      r0,#2
00033c  d02e              BEQ      |L1.924|
00033e  e038              B        |L1.946|
                  |L1.832|
000340  2c09              CMP      r4,#9                 ;541
000342  d006              BEQ      |L1.850|
000344  2c05              CMP      r4,#5                 ;547
000346  d007              BEQ      |L1.856|
000348  2c03              CMP      r4,#3                 ;563
00034a  d00e              BEQ      |L1.874|
00034c  2c01              CMP      r4,#1                 ;577
00034e  d017              BEQ      |L1.896|
000350  e02f              B        |L1.946|
                  |L1.850|
000352  f7fffffe          BL       Standard_SetConfiguration
000356  e02b              B        |L1.944|
                  |L1.856|
000358  78c1              LDRB     r1,[r0,#3]            ;549
00035a  297f              CMP      r1,#0x7f              ;549
00035c  d831              BHI      |L1.962|
00035e  7881              LDRB     r1,[r0,#2]            ;549
000360  bb79              CBNZ     r1,|L1.962|
000362  8881              LDRH     r1,[r0,#4]            ;550
000364  bb69              CBNZ     r1,|L1.962|
000366  7a80              LDRB     r0,[r0,#0xa]          ;551
000368  e02a              B        |L1.960|
                  |L1.874|
00036a  78c1              LDRB     r1,[r0,#3]            ;565
00036c  2901              CMP      r1,#1                 ;565
00036e  d120              BNE      |L1.946|
000370  8881              LDRH     r1,[r0,#4]            ;566
000372  b9f1              CBNZ     r1,|L1.946|
000374  7a40              LDRB     r0,[r0,#9]            ;567
000376  0680              LSLS     r0,r0,#26             ;567
000378  d51b              BPL      |L1.946|
00037a  f7fffffe          BL       Standard_SetDeviceFeature
00037e  e017              B        |L1.944|
                  |L1.896|
000380  78c1              LDRB     r1,[r0,#3]            ;579
000382  2901              CMP      r1,#1                 ;579
000384  d115              BNE      |L1.946|
000386  8881              LDRH     r1,[r0,#4]            ;580
000388  b999              CBNZ     r1,|L1.946|
00038a  7a40              LDRB     r0,[r0,#9]            ;581
00038c  0680              LSLS     r0,r0,#26             ;581
00038e  d40a              BMI      |L1.934|
000390  e00f              B        |L1.946|
                  |L1.914|
000392  2c0b              CMP      r4,#0xb               ;597
000394  d10d              BNE      |L1.946|
000396  f7fffffe          BL       Standard_SetInterface
00039a  e009              B        |L1.944|
                  |L1.924|
;;;605      {
;;;606        /*CLEAR FEATURE for EndPoint*/
;;;607        if (RequestNo == CLEAR_FEATURE)
00039c  2c01              CMP      r4,#1
00039e  d002              BEQ      |L1.934|
;;;608        {
;;;609          Result = Standard_ClearFeature();
;;;610        }
;;;611        /* SET FEATURE for EndPoint*/
;;;612        else if (RequestNo == SET_FEATURE)
0003a0  2c03              CMP      r4,#3
0003a2  d003              BEQ      |L1.940|
0003a4  e005              B        |L1.946|
                  |L1.934|
0003a6  f7fffffe          BL       Standard_ClearFeature
0003aa  e001              B        |L1.944|
                  |L1.940|
;;;613        {
;;;614          Result = Standard_SetEndPointFeature();
0003ac  f7fffffe          BL       Standard_SetEndPointFeature
                  |L1.944|
;;;615        }
;;;616      }
;;;617      else
;;;618      {
;;;619        Result = USB_UNSUPPORT;
;;;620      }
;;;621    
;;;622    
;;;623      if (Result != USB_SUCCESS)
0003b0  b158              CBZ      r0,|L1.970|
                  |L1.946|
;;;624      {
;;;625        Result = (*pProperty->Class_NoData_Setup)(RequestNo);
0003b2  4811              LDR      r0,|L1.1016|
0003b4  6800              LDR      r0,[r0,#0]  ; pProperty
0003b6  6941              LDR      r1,[r0,#0x14]
0003b8  b2e0              UXTB     r0,r4
0003ba  4788              BLX      r1
;;;626        if (Result == USB_NOT_READY)
0003bc  2803              CMP      r0,#3
0003be  d002              BEQ      |L1.966|
                  |L1.960|
;;;627        {
;;;628          ControlState = PAUSE;
;;;629          goto exit_NoData_Setup0;
;;;630        }
;;;631      }
;;;632    
;;;633      if (Result != USB_SUCCESS)
0003c0  b118              CBZ      r0,|L1.970|
                  |L1.962|
;;;634      {
;;;635        ControlState = STALLED;
0003c2  2008              MOVS     r0,#8
;;;636        goto exit_NoData_Setup0;
0003c4  e00f              B        |L1.998|
                  |L1.966|
0003c6  2009              MOVS     r0,#9                 ;628
0003c8  e00d              B        |L1.998|
                  |L1.970|
;;;637      }
;;;638    
;;;639      ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
;;;640    
;;;641      USB_StatusIn();
0003ca  4a11              LDR      r2,|L1.1040|
0003cc  2006              MOVS     r0,#6                 ;639
0003ce  2100              MOVS     r1,#0
0003d0  6813              LDR      r3,[r2,#0]
0003d2  4a10              LDR      r2,|L1.1044|
0003d4  ea4f4303          LSL      r3,r3,#16
0003d8  eb0232d3          ADD      r2,r2,r3,LSR #15
0003dc  6051              STR      r1,[r2,#4]
0003de  4a0a              LDR      r2,|L1.1032|
0003e0  f04f0130          MOV      r1,#0x30
0003e4  8011              STRH     r1,[r2,#0]
                  |L1.998|
;;;642    
;;;643    exit_NoData_Setup0:
;;;644      pInformation->ControlState = ControlState;
0003e6  6829              LDR      r1,[r5,#0]  ; pInformation
0003e8  7208              STRB     r0,[r1,#8]
                  |L1.1002|
;;;645      return;
;;;646    }
0003ea  bd70              POP      {r4-r6,pc}
                  |L1.1004|
                          DCD      pInformation
                  |L1.1008|
                          DCD      pUser_Standard_Requests
                  |L1.1012|
                          DCD      Device_Table
                  |L1.1016|
                          DCD      pProperty
                  |L1.1020|
                          DCD      ||.data||
                  |L1.1024|
                          DCD      0x40005000
                  |L1.1028|
                          DCD      Device_Property
                  |L1.1032|
                          DCD      SaveTState
                  |L1.1036|
                          DCD      SaveRState
                  |L1.1040|
                          DCD      0x40005c50
                  |L1.1044|
                          DCD      0x40006000
                          ENDP

                  Data_Setup0 PROC
;;;654    *******************************************************************************/
;;;655    void Data_Setup0(void)
000418  b570              PUSH     {r4-r6,lr}
;;;656    {
;;;657      u8 *(*CopyRoutine)(u16);
;;;658      RESULT Result;
;;;659      u32 Request_No = pInformation->USBbRequest;
00041a  4cca              LDR      r4,|L1.1860|
;;;660    
;;;661      u32 Related_Endpoint, Reserved;
;;;662      u32 wOffset, Status;
;;;663    
;;;664    
;;;665    
;;;666      CopyRoutine = NULL;
;;;667      wOffset = 0;
;;;668    
;;;669      if (Request_No == GET_DESCRIPTOR)
;;;670      {
;;;671        if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
;;;672        {
;;;673          u8 wValue1 = pInformation->USBwValue1;
;;;674          if (wValue1 == DEVICE_DESCRIPTOR)
;;;675          {
;;;676            CopyRoutine = pProperty->GetDeviceDescriptor;
00041c  4dca              LDR      r5,|L1.1864|
;;;677          }
;;;678          else if (wValue1 == CONFIG_DESCRIPTOR)
;;;679          {
;;;680            CopyRoutine = pProperty->GetConfigDescriptor;
;;;681          }
;;;682          else if (wValue1 == STRING_DESCRIPTOR)
;;;683          {
;;;684            CopyRoutine = pProperty->GetStringDescriptor;
;;;685          }  /* End of GET_DESCRIPTOR */
;;;686        }
;;;687      }
;;;688    
;;;689      /*GET STATUS*/
;;;690      else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
;;;691               && (pInformation->USBwLength == 0x0002)
;;;692               && (pInformation->USBwIndex1 == 0))
;;;693      {
;;;694        /* GET STATUS for Device*/
;;;695        if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
;;;696            && (pInformation->USBwIndex == 0))
;;;697        {
;;;698          CopyRoutine = Standard_GetStatus;
;;;699        }
;;;700    
;;;701        /* GET STATUS for Interface*/
;;;702        else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
;;;703        {
;;;704          if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
;;;705              && (pInformation->Current_Configuration != 0))
;;;706          {
;;;707            CopyRoutine = Standard_GetStatus;
;;;708          }
;;;709        }
;;;710    
;;;711        /* GET STATUS for EndPoint*/
;;;712        else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
;;;713        {
;;;714          Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
;;;715          Reserved = pInformation->USBwIndex0 & 0x70;
;;;716    
;;;717          if (ValBit(pInformation->USBwIndex0, 7))
;;;718          {
;;;719            /*Get Status of endpoint & stall the request if the related_ENdpoint
;;;720            is Disabled*/
;;;721            Status = _GetEPTxStatus(Related_Endpoint);
;;;722          }
;;;723          else
;;;724          {
;;;725            Status = _GetEPRxStatus(Related_Endpoint);
;;;726          }
;;;727    
;;;728          if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
;;;729              && (Status != 0))
;;;730          {
;;;731            CopyRoutine = Standard_GetStatus;
;;;732          }
;;;733        }
;;;734    
;;;735      }
;;;736    
;;;737      /*GET CONFIGURATION*/
;;;738      else if (Request_No == GET_CONFIGURATION)
;;;739      {
;;;740        if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
;;;741        {
;;;742          CopyRoutine = Standard_GetConfiguration;
;;;743        }
;;;744      }
;;;745      /*GET INTERFACE*/
;;;746      else if (Request_No == GET_INTERFACE)
;;;747      {
;;;748        if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
;;;749            && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
;;;750            && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
;;;751            && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
;;;752        {
;;;753          CopyRoutine = Standard_GetInterface;
;;;754        }
;;;755    
;;;756      }
;;;757    
;;;758    
;;;759      if (CopyRoutine)
;;;760      {
;;;761        pInformation->Ctrl_Info.Usb_wOffset = wOffset;
;;;762        pInformation->Ctrl_Info.CopyData = CopyRoutine;
;;;763        /* sb in the original the cast to word was directly */
;;;764        /* now the cast is made step by step */
;;;765        (*CopyRoutine)(0);
;;;766        Result = USB_SUCCESS;
;;;767      }
;;;768      else
;;;769      {
;;;770        Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
;;;771        if (Result == USB_NOT_READY)
;;;772        {
;;;773          pInformation->ControlState = PAUSE;
00041e  2609              MOVS     r6,#9
000420  6820              LDR      r0,[r4,#0]            ;659  ; pInformation
000422  6829              LDR      r1,[r5,#0]            ;669
000424  7842              LDRB     r2,[r0,#1]            ;659
000426  2a06              CMP      r2,#6                 ;669
000428  d005              BEQ      |L1.1078|
00042a  b1aa              CBZ      r2,|L1.1112|
00042c  2a08              CMP      r2,#8                 ;738
00042e  d04e              BEQ      |L1.1230|
000430  2a0a              CMP      r2,#0xa               ;746
000432  d052              BEQ      |L1.1242|
000434  e06f              B        |L1.1302|
                  |L1.1078|
000436  7802              LDRB     r2,[r0,#0]            ;671
000438  0652              LSLS     r2,r2,#25             ;671
00043a  d16c              BNE      |L1.1302|
00043c  7880              LDRB     r0,[r0,#2]            ;673
00043e  2801              CMP      r0,#1                 ;674
000440  d004              BEQ      |L1.1100|
000442  2802              CMP      r0,#2                 ;678
000444  d004              BEQ      |L1.1104|
000446  2803              CMP      r0,#3                 ;682
000448  d004              BEQ      |L1.1108|
00044a  e064              B        |L1.1302|
                  |L1.1100|
00044c  69c9              LDR      r1,[r1,#0x1c]         ;676
00044e  e059              B        |L1.1284|
                  |L1.1104|
000450  6a09              LDR      r1,[r1,#0x20]         ;680
000452  e057              B        |L1.1284|
                  |L1.1108|
000454  6a49              LDR      r1,[r1,#0x24]         ;684
000456  e055              B        |L1.1284|
                  |L1.1112|
000458  8842              LDRH     r2,[r0,#2]            ;690
00045a  bbba              CBNZ     r2,|L1.1228|
00045c  88c2              LDRH     r2,[r0,#6]            ;691
00045e  2a02              CMP      r2,#2                 ;691
000460  d159              BNE      |L1.1302|
000462  7902              LDRB     r2,[r0,#4]            ;692
000464  bb92              CBNZ     r2,|L1.1228|
000466  7802              LDRB     r2,[r0,#0]            ;695
000468  0653              LSLS     r3,r2,#25             ;695
00046a  d101              BNE      |L1.1136|
00046c  8883              LDRH     r3,[r0,#4]            ;696
00046e  b133              CBZ      r3,|L1.1150|
                  |L1.1136|
000470  f002027f          AND      r2,r2,#0x7f           ;702
000474  2a01              CMP      r2,#1                 ;702
000476  d005              BEQ      |L1.1156|
000478  2a02              CMP      r2,#2                 ;712
00047a  d00d              BEQ      |L1.1176|
00047c  e04b              B        |L1.1302|
                  |L1.1150|
00047e  f2af31dd          ADR      r1,Standard_GetStatus + 1
000482  e03f              B        |L1.1284|
                  |L1.1156|
000484  698a              LDR      r2,[r1,#0x18]         ;704
000486  7940              LDRB     r0,[r0,#5]            ;704
000488  2100              MOVS     r1,#0                 ;704
00048a  4790              BLX      r2                    ;704
00048c  b9f0              CBNZ     r0,|L1.1228|
00048e  6820              LDR      r0,[r4,#0]            ;705  ; pInformation
000490  7a80              LDRB     r0,[r0,#0xa]          ;705
000492  2800              CMP      r0,#0                 ;705
000494  d1f3              BNE      |L1.1150|
000496  e03e              B        |L1.1302|
                  |L1.1176|
000498  7940              LDRB     r0,[r0,#5]            ;714
00049a  49ac              LDR      r1,|L1.1868|
00049c  f0000270          AND      r2,r0,#0x70           ;715
0004a0  0603              LSLS     r3,r0,#24             ;717
0004a2  f000000f          AND      r0,r0,#0xf            ;714
0004a6  eb010180          ADD      r1,r1,r0,LSL #2       ;725
0004aa  f8d11c00          LDR      r1,[r1,#0xc00]        ;725
0004ae  d503              BPL      |L1.1208|
0004b0  f3c11101          UBFX     r1,r1,#4,#2           ;721
0004b4  0109              LSLS     r1,r1,#4              ;721
0004b6  e002              B        |L1.1214|
                  |L1.1208|
0004b8  f3c13101          UBFX     r1,r1,#12,#2          ;725
0004bc  0309              LSLS     r1,r1,#12             ;725
                  |L1.1214|
0004be  4ba4              LDR      r3,|L1.1872|
0004c0  781b              LDRB     r3,[r3,#0]            ;728  ; Device_Table
0004c2  4283              CMP      r3,r0                 ;728
0004c4  d927              BLS      |L1.1302|
0004c6  b90a              CBNZ     r2,|L1.1228|
0004c8  2900              CMP      r1,#0                 ;729
0004ca  d1d8              BNE      |L1.1150|
                  |L1.1228|
0004cc  e023              B        |L1.1302|
                  |L1.1230|
0004ce  7800              LDRB     r0,[r0,#0]            ;740
0004d0  0640              LSLS     r0,r0,#25             ;740
0004d2  d120              BNE      |L1.1302|
0004d4  f2af41d7          ADR      r1,Standard_GetConfiguration + 1
0004d8  e014              B        |L1.1284|
                  |L1.1242|
0004da  7802              LDRB     r2,[r0,#0]            ;748
0004dc  f002027f          AND      r2,r2,#0x7f           ;748
0004e0  2a01              CMP      r2,#1                 ;748
0004e2  d118              BNE      |L1.1302|
0004e4  7a82              LDRB     r2,[r0,#0xa]          ;749
0004e6  b1b2              CBZ      r2,|L1.1302|
0004e8  8842              LDRH     r2,[r0,#2]            ;749
0004ea  b9a2              CBNZ     r2,|L1.1302|
0004ec  7902              LDRB     r2,[r0,#4]            ;750
0004ee  b992              CBNZ     r2,|L1.1302|
0004f0  88c2              LDRH     r2,[r0,#6]            ;750
0004f2  2a01              CMP      r2,#1                 ;750
0004f4  d10f              BNE      |L1.1302|
0004f6  698a              LDR      r2,[r1,#0x18]         ;751
0004f8  7940              LDRB     r0,[r0,#5]            ;751
0004fa  2100              MOVS     r1,#0                 ;751
0004fc  4790              BLX      r2                    ;751
0004fe  b950              CBNZ     r0,|L1.1302|
000500  f2af41bb          ADR      r1,Standard_GetInterface + 1
                  |L1.1284|
000504  b139              CBZ      r1,|L1.1302|
000506  6820              LDR      r0,[r4,#0]            ;761  ; pInformation
000508  2200              MOVS     r2,#0                 ;761
00050a  8242              STRH     r2,[r0,#0x12]         ;761
00050c  6181              STR      r1,[r0,#0x18]         ;765
00050e  4610              MOV      r0,r2                 ;765
000510  4788              BLX      r1                    ;765
000512  2000              MOVS     r0,#0                 ;766
000514  e006              B        |L1.1316|
                  |L1.1302|
000516  6829              LDR      r1,[r5,#0]            ;770  ; pProperty
000518  6820              LDR      r0,[r4,#0]            ;770  ; pInformation
00051a  6909              LDR      r1,[r1,#0x10]         ;770
00051c  7840              LDRB     r0,[r0,#1]            ;770
00051e  4788              BLX      r1                    ;770
000520  2803              CMP      r0,#3                 ;771
000522  d007              BEQ      |L1.1332|
                  |L1.1316|
;;;774          return;
;;;775        }
;;;776      }
;;;777    
;;;778      if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
000524  6821              LDR      r1,[r4,#0]  ; pInformation
000526  8a0a              LDRH     r2,[r1,#0x10]
000528  f5a2437f          SUB      r3,r2,#0xff00
00052c  3bff              SUBS     r3,r3,#0xff
00052e  d104              BNE      |L1.1338|
;;;779      {
;;;780        /* Data is not ready, wait it */
;;;781        pInformation->ControlState = PAUSE;
000530  720e              STRB     r6,[r1,#8]
;;;782        return;
;;;783      }
;;;784      if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
;;;785      {
;;;786        /* Unsupported request */
;;;787        pInformation->ControlState = STALLED;
;;;788        return;
;;;789      }
;;;790    
;;;791    
;;;792      if (ValBit(pInformation->USBbmRequestType, 7))
;;;793      {
;;;794        /* Device ==> Host */
;;;795        u32 wLength = pInformation->USBwLength;
;;;796    
;;;797        /* Restrict the data length to be the one host asks */
;;;798        if (pInformation->Ctrl_Info.Usb_wLength > wLength)
;;;799        {
;;;800          pInformation->Ctrl_Info.Usb_wLength = wLength;
;;;801        }
;;;802    
;;;803        pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
;;;804        DataStageIn();
;;;805      }
;;;806      else
;;;807      {
;;;808        pInformation->ControlState = OUT_DATA;
;;;809        vSetEPRxStatus(EP_RX_VALID);/* enable for next data reception */
;;;810      }
;;;811    
;;;812      return;
;;;813    }
000532  e75a              B        |L1.1002|
                  |L1.1332|
000534  6820              LDR      r0,[r4,#0]            ;773  ; pInformation
000536  7206              STRB     r6,[r0,#8]            ;773
000538  e757              B        |L1.1002|
                  |L1.1338|
00053a  2802              CMP      r0,#2                 ;784
00053c  d00e              BEQ      |L1.1372|
00053e  b16a              CBZ      r2,|L1.1372|
000540  7808              LDRB     r0,[r1,#0]            ;792
000542  0600              LSLS     r0,r0,#24             ;792
000544  d50d              BPL      |L1.1378|
000546  88c8              LDRH     r0,[r1,#6]            ;795
000548  4282              CMP      r2,r0                 ;798
00054a  d900              BLS      |L1.1358|
00054c  8208              STRH     r0,[r1,#0x10]         ;800
                  |L1.1358|
00054e  6828              LDR      r0,[r5,#0]            ;803  ; pProperty
000550  f890002c          LDRB     r0,[r0,#0x2c]         ;803
000554  8288              STRH     r0,[r1,#0x14]         ;803
000556  e8bd4070          POP      {r4-r6,lr}            ;804
00055a  e7fe              B        DataStageIn
                  |L1.1372|
00055c  2008              MOVS     r0,#8                 ;787
00055e  7208              STRB     r0,[r1,#8]            ;787
000560  e743              B        |L1.1002|
                  |L1.1378|
000562  2003              MOVS     r0,#3                 ;808
000564  7208              STRB     r0,[r1,#8]            ;808
000566  497b              LDR      r1,|L1.1876|
000568  0300              LSLS     r0,r0,#12             ;809
00056a  8008              STRH     r0,[r1,#0]            ;809
00056c  e73d              B        |L1.1002|
;;;814    
                          ENDP

                  Post0_Process PROC
;;;946    *******************************************************************************/
;;;947    u8 Post0_Process(void)
00056e  487a              LDR      r0,|L1.1880|
;;;948    {
000570  b510              PUSH     {r4,lr}
;;;949      SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
000572  f890102c          LDRB     r1,[r0,#0x2c]  ; Device_Property
000576  2000              MOVS     r0,#0
000578  f7fffffe          BL       SetEPRxCount
;;;950    
;;;951      if (pInformation->ControlState == STALLED)
00057c  4871              LDR      r0,|L1.1860|
00057e  6800              LDR      r0,[r0,#0]  ; pInformation
000580  7a01              LDRB     r1,[r0,#8]
000582  2908              CMP      r1,#8
000584  d105              BNE      |L1.1426|
;;;952      {
;;;953        vSetEPRxStatus(EP_RX_STALL);
000586  4a73              LDR      r2,|L1.1876|
000588  0248              LSLS     r0,r1,#9
00058a  8010              STRH     r0,[r2,#0]
;;;954        vSetEPTxStatus(EP_TX_STALL);
00058c  4a73              LDR      r2,|L1.1884|
00058e  2010              MOVS     r0,#0x10
000590  8010              STRH     r0,[r2,#0]
                  |L1.1426|
;;;955      }
;;;956    
;;;957      return (pInformation->ControlState == PAUSE);
000592  2001              MOVS     r0,#1
000594  2909              CMP      r1,#9
000596  d000              BEQ      |L1.1434|
000598  2000              MOVS     r0,#0
                  |L1.1434|
;;;958    }
00059a  bd10              POP      {r4,pc}
;;;959    
                          ENDP

                  Setup0_Process PROC
;;;821    *******************************************************************************/
;;;822    u8 Setup0_Process(void)
00059c  b570              PUSH     {r4-r6,lr}
;;;823    {
00059e  4870              LDR      r0,|L1.1888|
;;;824    
;;;825      union
;;;826      {
;;;827        u8* b;
;;;828        u16* w;
;;;829      } pBuf;
;;;830    
;;;831      pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
0005a0  6801              LDR      r1,[r0,#0]
0005a2  4870              LDR      r0,|L1.1892|
0005a4  ea4f4101          LSL      r1,r1,#16
0005a8  eb0031d1          ADD      r1,r0,r1,LSR #15
;;;832    
;;;833      if (pInformation->ControlState != PAUSE)
0005ac  4d65              LDR      r5,|L1.1860|
0005ae  6889              LDR      r1,[r1,#8]            ;831
0005b0  ea4f4101          LSL      r1,r1,#16             ;831
0005b4  eb0034d1          ADD      r4,r0,r1,LSR #15      ;831
0005b8  6828              LDR      r0,[r5,#0]  ; pInformation
0005ba  7a01              LDRB     r1,[r0,#8]
0005bc  2909              CMP      r1,#9
0005be  d00f              BEQ      |L1.1504|
;;;834      {
;;;835        pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
0005c0  7821              LDRB     r1,[r4,#0]
0005c2  7001              STRB     r1,[r0,#0]
;;;836        pInformation->USBbRequest = *pBuf.b++; /* bRequest */
0005c4  7861              LDRB     r1,[r4,#1]
0005c6  7041              STRB     r1,[r0,#1]
;;;837        pBuf.w++;  /* word not accessed because of 32 bits addressing */
;;;838        pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
0005c8  88a0              LDRH     r0,[r4,#4]
0005ca  f7fffffe          BL       ByteSwap
0005ce  6829              LDR      r1,[r5,#0]  ; pInformation
0005d0  8048              STRH     r0,[r1,#2]
;;;839        pBuf.w++;  /* word not accessed because of 32 bits addressing */
;;;840        pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
0005d2  8920              LDRH     r0,[r4,#8]
0005d4  f7fffffe          BL       ByteSwap
0005d8  6829              LDR      r1,[r5,#0]  ; pInformation
0005da  8088              STRH     r0,[r1,#4]
;;;841        pBuf.w++;  /* word not accessed because of 32 bits addressing */
;;;842        pInformation->USBwLength = *pBuf.w; /* wLength */
0005dc  89a0              LDRH     r0,[r4,#0xc]
0005de  80c8              STRH     r0,[r1,#6]
                  |L1.1504|
;;;843      }
;;;844    
;;;845      pInformation->ControlState = SETTING_UP;
0005e0  6828              LDR      r0,[r5,#0]  ; pInformation
0005e2  2101              MOVS     r1,#1
0005e4  7201              STRB     r1,[r0,#8]
;;;846      if (pInformation->USBwLength == 0)
0005e6  88c0              LDRH     r0,[r0,#6]
0005e8  b120              CBZ      r0,|L1.1524|
;;;847      {
;;;848        /* Setup with no data stage */
;;;849        NoData_Setup0();
;;;850      }
;;;851      else
;;;852      {
;;;853        /* Setup with data stage */
;;;854        Data_Setup0();
0005ea  f7fffffe          BL       Data_Setup0
                  |L1.1518|
;;;855      }
;;;856      return Post0_Process();
0005ee  e8bd4070          POP      {r4-r6,lr}
0005f2  e7fe              B        Post0_Process
                  |L1.1524|
0005f4  f7fffffe          BL       NoData_Setup0
0005f8  e7f9              B        |L1.1518|
;;;857    }
;;;858    
                          ENDP

                  SetDeviceAddress PROC
;;;966    *******************************************************************************/
;;;967    void SetDeviceAddress(u8 Val)
0005fa  b5f0              PUSH     {r4-r7,lr}
;;;968    {
;;;969      u32 i;
;;;970      u32 nEP = Device_Table.Total_Endpoint;
0005fc  4954              LDR      r1,|L1.1872|
;;;971    
;;;972      /* set address in every used endpoint */
;;;973      for (i = 0; i < nEP; i++)
;;;974      {
;;;975        _SetEPAddress((u8)i, (u8)i);
0005fe  4a53              LDR      r2,|L1.1868|
000600  f648768f          MOV      r6,#0x8f8f
000604  780b              LDRB     r3,[r1,#0]            ;970  ; Device_Table
000606  2100              MOVS     r1,#0                 ;973
000608  e00a              B        |L1.1568|
                  |L1.1546|
00060a  b2cc              UXTB     r4,r1
00060c  eb020584          ADD      r5,r2,r4,LSL #2
000610  f8d57c00          LDR      r7,[r5,#0xc00]
000614  b2bf              UXTH     r7,r7
000616  4037              ANDS     r7,r7,r6
000618  4327              ORRS     r7,r7,r4
00061a  f8c57c00          STR      r7,[r5,#0xc00]
00061e  1c49              ADDS     r1,r1,#1              ;973
                  |L1.1568|
000620  4299              CMP      r1,r3                 ;973
000622  d3f2              BCC      |L1.1546|
;;;976      } /* for */
;;;977      _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
000624  f0400080          ORR      r0,r0,#0x80
000628  f8c20c4c          STR      r0,[r2,#0xc4c]
;;;978    }
00062c  bdf0              POP      {r4-r7,pc}
;;;979    
                          ENDP

                  In0_Process PROC
;;;865    *******************************************************************************/
;;;866    u8 In0_Process(void)
00062e  b510              PUSH     {r4,lr}
;;;867    {
;;;868      u32 ControlState = pInformation->ControlState;
000630  4c44              LDR      r4,|L1.1860|
000632  6820              LDR      r0,[r4,#0]  ; pInformation
000634  7a01              LDRB     r1,[r0,#8]
;;;869    
;;;870      if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
000636  2902              CMP      r1,#2
000638  d004              BEQ      |L1.1604|
00063a  2904              CMP      r1,#4
00063c  d002              BEQ      |L1.1604|
;;;871      {
;;;872        DataStageIn();
;;;873        /* ControlState may be changed outside the function */
;;;874        ControlState = pInformation->ControlState;
;;;875      }
;;;876    
;;;877      else if (ControlState == WAIT_STATUS_IN)
00063e  2906              CMP      r1,#6
000640  d005              BEQ      |L1.1614|
000642  e015              B        |L1.1648|
                  |L1.1604|
000644  f7fffffe          BL       DataStageIn
000648  6820              LDR      r0,[r4,#0]            ;874  ; pInformation
00064a  7a00              LDRB     r0,[r0,#8]            ;874
00064c  e011              B        |L1.1650|
                  |L1.1614|
;;;878      {
;;;879        if ((pInformation->USBbRequest == SET_ADDRESS) &&
00064e  7841              LDRB     r1,[r0,#1]
000650  2905              CMP      r1,#5
000652  d109              BNE      |L1.1640|
;;;880            (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
000654  7801              LDRB     r1,[r0,#0]
000656  0649              LSLS     r1,r1,#25
000658  d106              BNE      |L1.1640|
;;;881        {
;;;882          SetDeviceAddress(pInformation->USBwValue0);
00065a  78c0              LDRB     r0,[r0,#3]
00065c  f7fffffe          BL       SetDeviceAddress
;;;883          pUser_Standard_Requests->User_SetDeviceAddress();
000660  4841              LDR      r0,|L1.1896|
000662  6800              LDR      r0,[r0,#0]  ; pUser_Standard_Requests
000664  6a00              LDR      r0,[r0,#0x20]
000666  4780              BLX      r0
                  |L1.1640|
;;;884        }
;;;885        (*pProperty->Process_Status_IN)();
000668  4837              LDR      r0,|L1.1864|
00066a  6800              LDR      r0,[r0,#0]  ; pProperty
00066c  6880              LDR      r0,[r0,#8]
00066e  4780              BLX      r0
                  |L1.1648|
;;;886        ControlState = STALLED;
;;;887      }
;;;888    
;;;889      else
;;;890      {
;;;891        ControlState = STALLED;
000670  2008              MOVS     r0,#8
                  |L1.1650|
;;;892      }
;;;893    
;;;894      pInformation->ControlState = ControlState;
000672  6821              LDR      r1,[r4,#0]  ; pInformation
000674  7208              STRB     r0,[r1,#8]
;;;895    
;;;896      return Post0_Process();
000676  e8bd4010          POP      {r4,lr}
00067a  e7fe              B        Post0_Process
;;;897    }
;;;898    
                          ENDP

                  Out0_Process PROC
;;;905    *******************************************************************************/
;;;906    u8 Out0_Process(void)
00067c  b510              PUSH     {r4,lr}
;;;907    {
;;;908      u32 ControlState = pInformation->ControlState;
00067e  4c31              LDR      r4,|L1.1860|
000680  6820              LDR      r0,[r4,#0]  ; pInformation
000682  7a00              LDRB     r0,[r0,#8]
;;;909    
;;;910      if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
000684  2803              CMP      r0,#3
000686  d004              BEQ      |L1.1682|
000688  2805              CMP      r0,#5
00068a  d002              BEQ      |L1.1682|
;;;911      {
;;;912        DataStageOut();
;;;913        ControlState = pInformation->ControlState; /* may be changed outside the function */
;;;914      }
;;;915    
;;;916      else if (ControlState == WAIT_STATUS_OUT)
00068c  2807              CMP      r0,#7
00068e  d005              BEQ      |L1.1692|
000690  e008              B        |L1.1700|
                  |L1.1682|
000692  f7fffffe          BL       DataStageOut
000696  6820              LDR      r0,[r4,#0]            ;913  ; pInformation
000698  7a00              LDRB     r0,[r0,#8]            ;913
00069a  e004              B        |L1.1702|
                  |L1.1692|
;;;917      {
;;;918        (*pProperty->Process_Status_OUT)();
00069c  482a              LDR      r0,|L1.1864|
00069e  6800              LDR      r0,[r0,#0]  ; pProperty
0006a0  68c0              LDR      r0,[r0,#0xc]
0006a2  4780              BLX      r0
                  |L1.1700|
;;;919        ControlState = STALLED;
;;;920      }
;;;921    
;;;922      else if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
;;;923      {
;;;924        /* host aborts the transfer before finish */
;;;925        ControlState = STALLED;
0006a4  2008              MOVS     r0,#8
                  |L1.1702|
;;;926      }
;;;927    
;;;928      /* Unexpect state, STALL the endpoint */
;;;929      else
;;;930      {
;;;931        ControlState = STALLED;
;;;932      }
;;;933    
;;;934      pInformation->ControlState = ControlState;
0006a6  6821              LDR      r1,[r4,#0]  ; pInformation
0006a8  7208              STRB     r0,[r1,#8]
;;;935    
;;;936      return Post0_Process();
0006aa  e8bd4010          POP      {r4,lr}
0006ae  e7fe              B        Post0_Process
;;;937    }
;;;938    
                          ENDP

                  NOP_Process PROC
;;;986    *******************************************************************************/
;;;987    void NOP_Process(void)
0006b0  4770              BX       lr
;;;988    {
;;;989    }
;;;990    
                          ENDP

                  DataStageOut PROC
;;;425    *******************************************************************************/
;;;426    void DataStageOut(void)
0006b2  e92d47f0          PUSH     {r4-r10,lr}
;;;427    {
;;;428      ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
0006b6  4e23              LDR      r6,|L1.1860|
;;;429      u32 save_rLength;
;;;430    
;;;431      save_rLength = pEPinfo->Usb_rLength;
;;;432    
;;;433      if (pEPinfo->CopyData && save_rLength)
;;;434      {
;;;435        u8 *Buffer;
;;;436        u32 Length;
;;;437    
;;;438        Length = pEPinfo->PacketSize;
;;;439        if (Length > save_rLength)
;;;440        {
;;;441          Length = save_rLength;
;;;442        }
;;;443    
;;;444        Buffer = (*pEPinfo->CopyData)(Length);
;;;445        pEPinfo->Usb_rLength -= Length;
;;;446        pEPinfo->Usb_rOffset += Length;
;;;447    
;;;448        PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
;;;449      }
;;;450    
;;;451      if (pEPinfo->Usb_rLength != 0)
;;;452      {
;;;453        vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
;;;454        SetEPTxCount(ENDP0, 0);
;;;455        vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
0006b8  f8df90a0          LDR      r9,|L1.1884|
0006bc  f04f0830          MOV      r8,#0x30
0006c0  6834              LDR      r4,[r6,#0]            ;431  ; pInformation
0006c2  f8340f10          LDRH     r0,[r4,#0x10]!        ;431
0006c6  68a1              LDR      r1,[r4,#8]            ;433
0006c8  b1b1              CBZ      r1,|L1.1784|
0006ca  b308              CBZ      r0,|L1.1808|
0006cc  88a5              LDRH     r5,[r4,#4]            ;438
0006ce  4285              CMP      r5,r0                 ;439
0006d0  d900              BLS      |L1.1748|
0006d2  4605              MOV      r5,r0                 ;441
                  |L1.1748|
0006d4  b2a8              UXTH     r0,r5                 ;444
0006d6  4607              MOV      r7,r0                 ;444
0006d8  4788              BLX      r1                    ;444
0006da  4682              MOV      r10,r0                ;444
0006dc  8820              LDRH     r0,[r4,#0]            ;445
0006de  1b40              SUBS     r0,r0,r5              ;445
0006e0  8020              STRH     r0,[r4,#0]            ;445
0006e2  8860              LDRH     r0,[r4,#2]            ;446
0006e4  4428              ADD      r0,r0,r5              ;446
0006e6  8060              STRH     r0,[r4,#2]            ;446
0006e8  2000              MOVS     r0,#0                 ;448
0006ea  f7fffffe          BL       GetEPRxAddr
0006ee  4601              MOV      r1,r0                 ;448
0006f0  463a              MOV      r2,r7                 ;448
0006f2  4650              MOV      r0,r10                ;448
0006f4  f7fffffe          BL       PMAToUserBufferCopy
                  |L1.1784|
0006f8  8820              LDRH     r0,[r4,#0]            ;451
0006fa  b148              CBZ      r0,|L1.1808|
0006fc  4915              LDR      r1,|L1.1876|
0006fe  f44f5040          MOV      r0,#0x3000            ;453
000702  8008              STRH     r0,[r1,#0]            ;453
000704  2100              MOVS     r1,#0                 ;454
000706  4608              MOV      r0,r1                 ;454
000708  f7fffffe          BL       SetEPTxCount
00070c  f8a98000          STRH     r8,[r9,#0]
                  |L1.1808|
;;;456      }
;;;457      /* Set the next State*/
;;;458      if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
000710  8820              LDRH     r0,[r4,#0]
000712  88a1              LDRH     r1,[r4,#4]
000714  4288              CMP      r0,r1
000716  d301              BCC      |L1.1820|
;;;459      {
;;;460        pInformation->ControlState = OUT_DATA;
000718  2003              MOVS     r0,#3
00071a  e001              B        |L1.1824|
                  |L1.1820|
;;;461      }
;;;462      else
;;;463      {
;;;464        if (pEPinfo->Usb_rLength > 0)
00071c  b118              CBZ      r0,|L1.1830|
;;;465        {
;;;466          pInformation->ControlState = LAST_OUT_DATA;
00071e  2005              MOVS     r0,#5
                  |L1.1824|
000720  6831              LDR      r1,[r6,#0]            ;460  ; pInformation
000722  7208              STRB     r0,[r1,#8]            ;460
;;;467        }
;;;468        else if (pEPinfo->Usb_rLength == 0)
;;;469        {
;;;470          pInformation->ControlState = WAIT_STATUS_IN;
;;;471          USB_StatusIn();
;;;472        }
;;;473      }
;;;474    }
000724  e5f7              B        |L1.790|
                  |L1.1830|
000726  6832              LDR      r2,[r6,#0]            ;470  ; pInformation
000728  4b0d              LDR      r3,|L1.1888|
00072a  2106              MOVS     r1,#6                 ;470
00072c  7211              STRB     r1,[r2,#8]            ;470
00072e  681a              LDR      r2,[r3,#0]            ;471
000730  2000              MOVS     r0,#0                 ;471
000732  490c              LDR      r1,|L1.1892|
000734  ea4f4202          LSL      r2,r2,#16             ;471
000738  eb0131d2          ADD      r1,r1,r2,LSR #15      ;471
00073c  6048              STR      r0,[r1,#4]            ;471
00073e  f8a98000          STRH     r8,[r9,#0]            ;471
000742  e5e8              B        |L1.790|
;;;475    
                          ENDP

                  |L1.1860|
                          DCD      pInformation
                  |L1.1864|
                          DCD      pProperty
                  |L1.1868|
                          DCD      0x40005000
                  |L1.1872|
                          DCD      Device_Table
                  |L1.1876|
                          DCD      SaveRState
                  |L1.1880|
                          DCD      Device_Property
                  |L1.1884|
                          DCD      SaveTState
                  |L1.1888|
                          DCD      0x40005c50
                  |L1.1892|
                          DCD      0x40006000
                  |L1.1896|
                          DCD      pUser_Standard_Requests

                          AREA ||.data||, DATA, ALIGN=1

                  StatusInfo
000000  0000              DCB      0x00,0x00
