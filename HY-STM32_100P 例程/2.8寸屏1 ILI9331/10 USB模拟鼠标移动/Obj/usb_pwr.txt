; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\usb_pwr.o --depend=.\Obj\usb_pwr.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\usb_library\inc -I..\USB_test -I.\FWlib\inc -I.\user -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Obj\usb_pwr.crf user\usb_pwr.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  PowerOn PROC
;;;47     *******************************************************************************/
;;;48     RESULT PowerOn(void)
000000  b510              PUSH     {r4,lr}
;;;49     {
;;;50       u16 wRegVal;
;;;51     
;;;52       /*** cable plugged-in ? ***/
;;;53       USB_Cable_Config(ENABLE);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       USB_Cable_Config
;;;54     
;;;55       /*** CNTR_PWDN = 0 ***/
;;;56       wRegVal = CNTR_FRES;
000008  4839              LDR      r0,|L1.240|
00000a  2101              MOVS     r1,#1
;;;57       _SetCNTR(wRegVal);
00000c  6001              STR      r1,[r0,#0]
;;;58     
;;;59       /*** CNTR_FRES = 0 ***/
;;;60       wInterrupt_Mask = 0;
00000e  f04f0100          MOV      r1,#0
000012  4a38              LDR      r2,|L1.244|
;;;61       _SetCNTR(wInterrupt_Mask);
000014  6001              STR      r1,[r0,#0]
;;;62       /*** Clear pending interrupts ***/
;;;63       _SetISTR(0);
000016  6041              STR      r1,[r0,#4]
;;;64       /*** Set interrupt mask ***/
;;;65       wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
000018  f44f51e0          MOV      r1,#0x1c00
00001c  8011              STRH     r1,[r2,#0]
;;;66       _SetCNTR(wInterrupt_Mask);
00001e  6001              STR      r1,[r0,#0]
;;;67     
;;;68       return USB_SUCCESS;
000020  f04f0000          MOV      r0,#0
;;;69     }
000024  bd10              POP      {r4,pc}
;;;70     
                          ENDP

                  PowerOff PROC
;;;77     *******************************************************************************/
;;;78     RESULT PowerOff()
000026  b510              PUSH     {r4,lr}
;;;79     {
;;;80       /* disable all ints and force USB reset */
;;;81       _SetCNTR(CNTR_FRES);
000028  4c31              LDR      r4,|L1.240|
00002a  2001              MOVS     r0,#1
00002c  6020              STR      r0,[r4,#0]
;;;82       /* clear interrupt status register */
;;;83       _SetISTR(0);
00002e  f04f0000          MOV      r0,#0
000032  6060              STR      r0,[r4,#4]
;;;84       /* Disable the Pull-Up*/
;;;85       USB_Cable_Config(DISABLE);
000034  f7fffffe          BL       USB_Cable_Config
;;;86       /* switch-off device */
;;;87       _SetCNTR(CNTR_FRES + CNTR_PDWN);
000038  2003              MOVS     r0,#3
00003a  6020              STR      r0,[r4,#0]
;;;88       /* sw variables reset */
;;;89       /* ... */
;;;90     
;;;91       return USB_SUCCESS;
00003c  2000              MOVS     r0,#0
;;;92     }
00003e  bd10              POP      {r4,pc}
;;;93     
                          ENDP

                  Suspend PROC
;;;100    *******************************************************************************/
;;;101    void Suspend(void)
000040  482b              LDR      r0,|L1.240|
;;;102    {
;;;103      u16 wCNTR;
;;;104      /* suspend preparation */
;;;105      /* ... */
;;;106    
;;;107      /* macrocell enters suspend mode */
;;;108      wCNTR = _GetCNTR();
000042  6801              LDR      r1,[r0,#0]
000044  b289              UXTH     r1,r1
;;;109      wCNTR |= CNTR_FSUSP;
000046  f0410108          ORR      r1,r1,#8
;;;110      _SetCNTR(wCNTR);
00004a  6001              STR      r1,[r0,#0]
;;;111    
;;;112      /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
;;;113      /* power reduction */
;;;114      /* ... on connected devices */
;;;115    
;;;116    
;;;117      /* force low-power mode in the macrocell */
;;;118      wCNTR = _GetCNTR();
00004c  6801              LDR      r1,[r0,#0]
00004e  b289              UXTH     r1,r1
;;;119      wCNTR |= CNTR_LPMODE;
000050  f0410104          ORR      r1,r1,#4
;;;120      _SetCNTR(wCNTR);
000054  6001              STR      r1,[r0,#0]
;;;121    
;;;122      /* switch-off the clocks */
;;;123      /* ... */
;;;124      Enter_LowPowerMode();
000056  f7ffbffe          B.W      Enter_LowPowerMode
;;;125    
;;;126    }
;;;127    
                          ENDP

                  Resume_Init PROC
;;;134    *******************************************************************************/
;;;135    void Resume_Init(void)
00005a  b510              PUSH     {r4,lr}
;;;136    {
00005c  4c24              LDR      r4,|L1.240|
;;;137      u16 wCNTR;
;;;138    
;;;139      /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
;;;140      /* restart the clocks */
;;;141      /* ...  */
;;;142    
;;;143      /* CNTR_LPMODE = 0 */
;;;144      wCNTR = _GetCNTR();
00005e  6820              LDR      r0,[r4,#0]
000060  b280              UXTH     r0,r0
;;;145      wCNTR &= (~CNTR_LPMODE);
000062  f0200004          BIC      r0,r0,#4
;;;146      _SetCNTR(wCNTR);
000066  6020              STR      r0,[r4,#0]
;;;147    
;;;148      /* restore full power */
;;;149      /* ... on connected devices */
;;;150      Leave_LowPowerMode();
000068  f7fffffe          BL       Leave_LowPowerMode
;;;151    
;;;152      /* reset FSUSP bit */
;;;153      _SetCNTR(IMR_MSK);
00006c  f44f403f          MOV      r0,#0xbf00
000070  6020              STR      r0,[r4,#0]
;;;154    
;;;155      /* reverse suspend preparation */
;;;156      /* ... */
;;;157    
;;;158    }
000072  bd10              POP      {r4,pc}
;;;159    
                          ENDP

                  Resume PROC
;;;171    *******************************************************************************/
;;;172    void Resume(RESUME_STATE eResumeSetVal)
000074  b570              PUSH     {r4-r6,lr}
;;;173    {
;;;174      u16 wCNTR;
;;;175    
;;;176      if (eResumeSetVal != RESUME_ESOF)
;;;177        ResumeS.eState = eResumeSetVal;
000076  4c20              LDR      r4,|L1.248|
000078  2807              CMP      r0,#7                 ;176
00007a  d000              BEQ      |L1.126|
00007c  7020              STRB     r0,[r4,#0]
                  |L1.126|
;;;178    
;;;179      switch (ResumeS.eState)
00007e  7821              LDRB     r1,[r4,#0]  ; ResumeS
;;;180      {
;;;181        case RESUME_EXTERNAL:
;;;182          Resume_Init();
;;;183          ResumeS.eState = RESUME_OFF;
000080  2606              MOVS     r6,#6
;;;184          break;
;;;185        case RESUME_INTERNAL:
;;;186          Resume_Init();
;;;187          ResumeS.eState = RESUME_START;
000082  2504              MOVS     r5,#4
;;;188          break;
;;;189        case RESUME_LATER:
;;;190          ResumeS.bESOFcnt = 2;
;;;191          ResumeS.eState = RESUME_WAIT;
;;;192          break;
;;;193        case RESUME_WAIT:
;;;194          ResumeS.bESOFcnt--;
;;;195          if (ResumeS.bESOFcnt == 0)
;;;196            ResumeS.eState = RESUME_START;
;;;197          break;
;;;198        case RESUME_START:
;;;199          wCNTR = _GetCNTR();
000084  481d              LDR      r0,|L1.252|
000086  2906              CMP      r1,#6                 ;179
000088  d230              BCS      |L1.236|
00008a  e8dff001          TBB      [pc,r1]               ;179
00008e  0306              DCB      0x03,0x06
000090  090e1622          DCB      0x09,0x0e,0x16,0x22
000094  f7fffffe          BL       Resume_Init
000098  e028              B        |L1.236|
00009a  f7fffffe          BL       Resume_Init
00009e  e00a              B        |L1.182|
0000a0  2002              MOVS     r0,#2                 ;190
0000a2  7060              STRB     r0,[r4,#1]            ;190
0000a4  2003              MOVS     r0,#3                 ;191
0000a6  7020              STRB     r0,[r4,#0]            ;191
                  |L1.168|
;;;200          wCNTR |= CNTR_RESUME;
;;;201          _SetCNTR(wCNTR);
;;;202          ResumeS.eState = RESUME_ON;
;;;203          ResumeS.bESOFcnt = 10;
;;;204          break;
;;;205        case RESUME_ON:
;;;206          ResumeS.bESOFcnt--;
;;;207          if (ResumeS.bESOFcnt == 0)
;;;208          {
;;;209            wCNTR = _GetCNTR();
;;;210            wCNTR &= (~CNTR_RESUME);
;;;211            _SetCNTR(wCNTR);
;;;212            ResumeS.eState = RESUME_OFF;
;;;213          }
;;;214          break;
;;;215        case RESUME_OFF:
;;;216        case RESUME_ESOF:
;;;217        default:
;;;218          ResumeS.eState = RESUME_OFF;
;;;219          break;
;;;220      }
;;;221    }
0000a8  bd70              POP      {r4-r6,pc}
0000aa  7860              LDRB     r0,[r4,#1]            ;194  ; ResumeS
0000ac  1e40              SUBS     r0,r0,#1              ;194
0000ae  7060              STRB     r0,[r4,#1]            ;194
0000b0  7860              LDRB     r0,[r4,#1]            ;195  ; ResumeS
0000b2  2800              CMP      r0,#0                 ;195
0000b4  d1f8              BNE      |L1.168|
                  |L1.182|
0000b6  7025              STRB     r5,[r4,#0]            ;196
0000b8  bd70              POP      {r4-r6,pc}
0000ba  f8d01c40          LDR      r1,[r0,#0xc40]        ;199
0000be  b289              UXTH     r1,r1                 ;199
0000c0  f0410110          ORR      r1,r1,#0x10           ;200
0000c4  f8c01c40          STR      r1,[r0,#0xc40]        ;201
0000c8  2005              MOVS     r0,#5                 ;202
0000ca  7020              STRB     r0,[r4,#0]            ;202
0000cc  200a              MOVS     r0,#0xa               ;203
0000ce  7060              STRB     r0,[r4,#1]            ;203
                  |L1.208|
0000d0  bd70              POP      {r4-r6,pc}
0000d2  7861              LDRB     r1,[r4,#1]            ;206  ; ResumeS
0000d4  1e49              SUBS     r1,r1,#1              ;206
0000d6  7061              STRB     r1,[r4,#1]            ;206
0000d8  7861              LDRB     r1,[r4,#1]            ;207  ; ResumeS
0000da  2900              CMP      r1,#0                 ;207
0000dc  d1f8              BNE      |L1.208|
0000de  f8d01c40          LDR      r1,[r0,#0xc40]        ;209
0000e2  b289              UXTH     r1,r1                 ;209
0000e4  f0210110          BIC      r1,r1,#0x10           ;210
0000e8  f8c01c40          STR      r1,[r0,#0xc40]        ;211
                  |L1.236|
0000ec  7026              STRB     r6,[r4,#0]            ;218
0000ee  bd70              POP      {r4-r6,pc}
;;;222    
                          ENDP

                  |L1.240|
                          DCD      0x40005c40
                  |L1.244|
                          DCD      wInterrupt_Mask
                  |L1.248|
                          DCD      ||area_number.6||
                  |L1.252|
                          DCD      0x40005000

                          AREA ||.data||, DATA, ALIGN=0

                  bDeviceState
000000  00                DCB      0x00

                          AREA ||area_number.5||, DATA, ALIGN=0

                          EXPORTAS ||area_number.5||, ||.data||
                  fSuspendEnabled
000000  01                DCB      0x01

                          AREA ||area_number.6||, DATA, ALIGN=0

                          EXPORTAS ||area_number.6||, ||.data||
                  ResumeS
000000  0000              DCB      0x00,0x00
