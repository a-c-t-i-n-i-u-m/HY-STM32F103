; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\system_stm32f10x.o --depend=.\Obj\system_stm32f10x.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\usb_library\inc -I..\USB_test -I.\FWlib\inc -I.\user -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Obj\system_stm32f10x.crf user\system_stm32f10x.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;160      */
;;;161    void SystemInit (void)
000000  482e              LDR      r0,|L1.188|
;;;162    {
;;;163      /*!< RCC system reset(for debug purpose) */
;;;164      /*!< Set HSION bit 复位值是83H   内部8M*/			  
;;;165      RCC->CR |= (uint32_t)0x00000001;	  
000002  6801              LDR      r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;166      /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits */
;;;167      RCC->CFGR &= (uint32_t)0xF8FF0000;  
00000a  6841              LDR      r1,[r0,#4]
00000c  4a2c              LDR      r2,|L1.192|
00000e  4011              ANDS     r1,r1,r2
000010  6041              STR      r1,[r0,#4]
;;;168      /*!< Reset HSEON, CSSON and PLLON bits */
;;;169      RCC->CR &= (uint32_t)0xFEF6FFFF;
000012  6801              LDR      r1,[r0,#0]
000014  4a2b              LDR      r2,|L1.196|
000016  4011              ANDS     r1,r1,r2
000018  6001              STR      r1,[r0,#0]
;;;170      /*!< Reset HSEBYP bit */
;;;171      RCC->CR &= (uint32_t)0xFFFBFFFF;
00001a  6801              LDR      r1,[r0,#0]
00001c  f4212180          BIC      r1,r1,#0x40000
000020  6001              STR      r1,[r0,#0]
;;;172      /*!< Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
;;;173      RCC->CFGR &= (uint32_t)0xFF80FFFF;
000022  6841              LDR      r1,[r0,#4]
000024  f42101fe          BIC      r1,r1,#0x7f0000
000028  6041              STR      r1,[r0,#4]
;;;174      /*!< Disable all interrupts */
;;;175      RCC->CIR = 0x00000000;
00002a  2100              MOVS     r1,#0
00002c  6081              STR      r1,[r0,#8]
00002e  f7ffbffe          B.W      SetSysClockTo72
;;;176        
;;;177      /*!< Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
;;;178      /*!< Configure the Flash Latency cycles and enable prefetch buffer */
;;;179      SetSysClock();
;;;180    
;;;181    }
;;;182    
                          ENDP

                  SetSysClockTo72 PROC
;;;676      */
;;;677    static void SetSysClockTo72(void)
000032  4822              LDR      r0,|L1.188|
;;;678    {
;;;679      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000034  2100              MOVS     r1,#0
;;;680      
;;;681      /*!< SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
;;;682      /*!< Enable HSE */    
;;;683      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000036  6802              LDR      r2,[r0,#0]
000038  f4423280          ORR      r2,r2,#0x10000
00003c  6002              STR      r2,[r0,#0]
;;;684     
;;;685      /*!< Wait till HSE is ready and if Time out is reached exit */
;;;686      do
;;;687      {
;;;688        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;689        StartUpCounter++;  
;;;690      } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
00003e  f44f63a0          MOV      r3,#0x500
                  |L1.66|
000042  6802              LDR      r2,[r0,#0]            ;688
000044  1c49              ADDS     r1,r1,#1              ;689
000046  f4123f00          TST      r2,#0x20000           ;688
00004a  d101              BNE      |L1.80|
00004c  4299              CMP      r1,r3
00004e  d1f8              BNE      |L1.66|
                  |L1.80|
;;;691    
;;;692      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000050  6801              LDR      r1,[r0,#0]
000052  0389              LSLS     r1,r1,#14
000054  d531              BPL      |L1.186|
;;;693      {
;;;694        HSEStatus = (uint32_t)0x01;
;;;695      }
;;;696      else
;;;697      {
;;;698        HSEStatus = (uint32_t)0x00;
;;;699      }  
;;;700    
;;;701      if (HSEStatus == (uint32_t)0x01)
;;;702      {
;;;703        /*!< Enable Prefetch Buffer */
;;;704        FLASH->ACR |= FLASH_ACR_PRFTBE;
000056  491c              LDR      r1,|L1.200|
000058  680a              LDR      r2,[r1,#0]
00005a  f0420210          ORR      r2,r2,#0x10
00005e  600a              STR      r2,[r1,#0]
;;;705    
;;;706        /*!< Flash 2 wait state */
;;;707        FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
000060  680a              LDR      r2,[r1,#0]
000062  f0220203          BIC      r2,r2,#3
000066  600a              STR      r2,[r1,#0]
;;;708        FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
000068  680a              LDR      r2,[r1,#0]
00006a  f0420202          ORR      r2,r2,#2
00006e  600a              STR      r2,[r1,#0]
;;;709     
;;;710        /*!< HCLK = SYSCLK */
;;;711        RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
000070  6841              LDR      r1,[r0,#4]
000072  6041              STR      r1,[r0,#4]
;;;712          
;;;713        /*!< PCLK2 = HCLK */
;;;714        RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
000074  6841              LDR      r1,[r0,#4]
000076  6041              STR      r1,[r0,#4]
;;;715        
;;;716        /*!< PCLK1 = HCLK */
;;;717        RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
000078  6841              LDR      r1,[r0,#4]
00007a  f4416180          ORR      r1,r1,#0x400
00007e  6041              STR      r1,[r0,#4]
;;;718        
;;;719        /*!< PLLCLK = 8MHz * 9 = 72 MHz */
;;;720        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
000080  6841              LDR      r1,[r0,#4]
000082  f421117c          BIC      r1,r1,#0x3f0000
000086  6041              STR      r1,[r0,#4]
;;;721        RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL9);
000088  6841              LDR      r1,[r0,#4]
00008a  f44111e8          ORR      r1,r1,#0x1d0000
00008e  6041              STR      r1,[r0,#4]
;;;722    
;;;723        /*!< Enable PLL */
;;;724        RCC->CR |= RCC_CR_PLLON;
000090  6801              LDR      r1,[r0,#0]
000092  f0417180          ORR      r1,r1,#0x1000000
000096  6001              STR      r1,[r0,#0]
                  |L1.152|
;;;725    
;;;726        /*!< Wait till PLL is ready */
;;;727        while((RCC->CR & RCC_CR_PLLRDY) == 0)
000098  6801              LDR      r1,[r0,#0]
00009a  0189              LSLS     r1,r1,#6
00009c  d5fc              BPL      |L1.152|
;;;728        {
;;;729        }
;;;730    
;;;731        /*!< Select PLL as system clock source */
;;;732        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
00009e  6841              LDR      r1,[r0,#4]
0000a0  f0210103          BIC      r1,r1,#3
0000a4  6041              STR      r1,[r0,#4]
;;;733        RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
0000a6  6841              LDR      r1,[r0,#4]
0000a8  f0410102          ORR      r1,r1,#2
0000ac  6041              STR      r1,[r0,#4]
                  |L1.174|
;;;734    
;;;735        /*!< Wait till PLL is used as system clock source */
;;;736        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
0000ae  6841              LDR      r1,[r0,#4]
0000b0  f3c10181          UBFX     r1,r1,#2,#2
0000b4  2902              CMP      r1,#2
0000b6  d1fa              BNE      |L1.174|
;;;737        {
;;;738        }
;;;739      }
;;;740      else
;;;741      { /*!< If HSE fails to start-up, the application will have wrong clock 
;;;742             configuration. User can add here some code to deal with this error */    
;;;743    
;;;744        /*!< Go to infinite loop */
;;;745        while (1)
;;;746        {
;;;747        }
;;;748      }
;;;749    }
0000b8  4770              BX       lr
                  |L1.186|
0000ba  e7fe              B        |L1.186|
;;;750    #endif
                          ENDP

                  |L1.188|
                          DCD      0x40021000
                  |L1.192|
                          DCD      0xf8ff0000
                  |L1.196|
                          DCD      0xfef6ffff
                  |L1.200|
                          DCD      0x40022000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  SystemFrequency
                          DCD      0x044aa200

                          AREA ||area_number.5||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.constdata||
                  SystemFrequency_SysClk
                          DCD      0x044aa200

                          AREA ||area_number.6||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.constdata||
                  SystemFrequency_AHBClk
                          DCD      0x044aa200

                          AREA ||area_number.7||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.constdata||
                  SystemFrequency_APB1Clk
                          DCD      0x02255100

                          AREA ||area_number.8||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.constdata||
                  SystemFrequency_APB2Clk
                          DCD      0x044aa200
