; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\hw_config.o --depend=.\Obj\hw_config.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\usb_library\inc -I..\USB_test -I.\FWlib\inc -I.\user -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Obj\hw_config.crf user\hw_config.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Set_System PROC
;;;46     *******************************************************************************/
;;;47     void Set_System(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;48     {
;;;49       GPIO_InitTypeDef GPIO_InitStructure;
;;;50     
;;;51       /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration -----------------------------*/   
;;;52       /* RCC system reset(for debug purpose) */
;;;53       RCC_DeInit();
000002  f7fffffe          BL       RCC_DeInit
;;;54     
;;;55       /* Enable HSE */
;;;56       RCC_HSEConfig(RCC_HSE_ON);
000006  f44f3480          MOV      r4,#0x10000
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       RCC_HSEConfig
;;;57     
;;;58       /* Wait till HSE is ready */
;;;59       HSEStartUpStatus = RCC_WaitForHSEStartUp();
000010  f7fffffe          BL       RCC_WaitForHSEStartUp
000014  4983              LDR      r1,|L1.548|
;;;60     
;;;61       if(HSEStartUpStatus == SUCCESS)
000016  2801              CMP      r0,#1
000018  7008              STRB     r0,[r1,#0]            ;59
00001a  d125              BNE      |L1.104|
;;;62       {
;;;63         /* Enable Prefetch Buffer */
;;;64         FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       FLASH_PrefetchBufferCmd
;;;65     
;;;66         /* Flash 2 wait state */
;;;67         FLASH_SetLatency(FLASH_Latency_2);
000022  2002              MOVS     r0,#2
000024  f7fffffe          BL       FLASH_SetLatency
;;;68      
;;;69         /* HCLK = SYSCLK */
;;;70         RCC_HCLKConfig(RCC_SYSCLK_Div1); 
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       RCC_HCLKConfig
;;;71       
;;;72         /* PCLK2 = HCLK */
;;;73         RCC_PCLK2Config(RCC_HCLK_Div1); 
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       RCC_PCLK2Config
;;;74     
;;;75         /* PCLK1 = HCLK/2 */
;;;76         RCC_PCLK1Config(RCC_HCLK_Div2);
000034  11a0              ASRS     r0,r4,#6
000036  f7fffffe          BL       RCC_PCLK1Config
;;;77     
;;;78         /* ADCCLK = PCLK2/6 */
;;;79         RCC_ADCCLKConfig(RCC_PCLK2_Div6);
00003a  1060              ASRS     r0,r4,#1
00003c  f7fffffe          BL       RCC_ADCCLKConfig
;;;80     
;;;81         /* PLLCLK = 8MHz * 9 = 72 MHz */
;;;82         RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
000040  f44f11e0          MOV      r1,#0x1c0000
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       RCC_PLLConfig
;;;83     
;;;84         /* Enable PLL */ 
;;;85         RCC_PLLCmd(ENABLE);
00004a  2001              MOVS     r0,#1
00004c  f7fffffe          BL       RCC_PLLCmd
                  |L1.80|
;;;86     
;;;87         /* Wait till PLL is ready */
;;;88         while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
000050  2039              MOVS     r0,#0x39
000052  f7fffffe          BL       RCC_GetFlagStatus
000056  2800              CMP      r0,#0
000058  d0fa              BEQ      |L1.80|
;;;89         {
;;;90         }
;;;91     
;;;92         /* Select PLL as system clock source */
;;;93         RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
00005a  2002              MOVS     r0,#2
00005c  f7fffffe          BL       RCC_SYSCLKConfig
                  |L1.96|
;;;94     
;;;95         /* Wait till PLL is used as system clock source */
;;;96         while(RCC_GetSYSCLKSource() != 0x08)
000060  f7fffffe          BL       RCC_GetSYSCLKSource
000064  2808              CMP      r0,#8
000066  d1fb              BNE      |L1.96|
                  |L1.104|
;;;97         {
;;;98         }
;;;99       }
;;;100      
;;;101      /* Enable GPIOD and GPIOE clock */
;;;102      RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOE, ENABLE);
000068  2101              MOVS     r1,#1
00006a  2054              MOVS     r0,#0x54
00006c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;103      
;;;104      /* PD.09 used as USB pull-up */
;;;105      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
000070  f44f5000          MOV      r0,#0x2000
000074  f8ad0000          STRH     r0,[sp,#0]
;;;106      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000078  2403              MOVS     r4,#3
00007a  f88d4002          STRB     r4,[sp,#2]
;;;107      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
00007e  2014              MOVS     r0,#0x14
;;;108      GPIO_Init(GPIOC, &GPIO_InitStructure);
000080  4e69              LDR      r6,|L1.552|
000082  f88d0003          STRB     r0,[sp,#3]            ;107
000086  4669              MOV      r1,sp
000088  4630              MOV      r0,r6
00008a  f7fffffe          BL       GPIO_Init
;;;109    
;;;110    
;;;111      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;		         
00008e  2020              MOVS     r0,#0x20
000090  f8ad0000          STRH     r0,[sp,#0]
;;;112      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000094  f88d4002          STRB     r4,[sp,#2]
;;;113      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000098  2010              MOVS     r0,#0x10
00009a  f88d0003          STRB     r0,[sp,#3]
;;;114      GPIO_Init(GPIOC, &GPIO_InitStructure);
00009e  4669              MOV      r1,sp
0000a0  4630              MOV      r0,r6
0000a2  f7fffffe          BL       GPIO_Init
;;;115    
;;;116      /* Configure the JoyStick IOs */
;;;117      /* Key up + Key down  */
;;;118      GPIO_InitStructure.GPIO_Pin = JOY_UP | JOY_DOWN ;
0000a6  200c              MOVS     r0,#0xc
0000a8  f8ad0000          STRH     r0,[sp,#0]
;;;119      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;120      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
;;;121      GPIO_Init(GPIOE, &GPIO_InitStructure);
0000ac  4f5f              LDR      r7,|L1.556|
0000ae  f88d4002          STRB     r4,[sp,#2]            ;119
0000b2  2548              MOVS     r5,#0x48              ;120
0000b4  f88d5003          STRB     r5,[sp,#3]            ;120
0000b8  4669              MOV      r1,sp
0000ba  4638              MOV      r0,r7
0000bc  f7fffffe          BL       GPIO_Init
;;;122    
;;;123      /* Key left + Key right */
;;;124      GPIO_InitStructure.GPIO_Pin = JOY_LEFT | JOY_RIGHT;
0000c0  2030              MOVS     r0,#0x30
0000c2  f8ad0000          STRH     r0,[sp,#0]
;;;125      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0000c6  f88d4002          STRB     r4,[sp,#2]
;;;126      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
0000ca  f88d5003          STRB     r5,[sp,#3]
;;;127      GPIO_Init(GPIOE, &GPIO_InitStructure);
0000ce  4669              MOV      r1,sp
0000d0  4638              MOV      r0,r7
0000d2  f7fffffe          BL       GPIO_Init
;;;128        /* Right_button + Left_button */
;;;129      GPIO_InitStructure.GPIO_Pin = JOY_LEFT_BUTTON|JOY_RIGHT_BUTTON;
0000d6  0320              LSLS     r0,r4,#12
0000d8  f8ad0000          STRH     r0,[sp,#0]
;;;130      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0000dc  f88d4002          STRB     r4,[sp,#2]
;;;131      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
0000e0  f88d5003          STRB     r5,[sp,#3]
;;;132      GPIO_Init(GPIOC, &GPIO_InitStructure);
0000e4  4669              MOV      r1,sp
0000e6  4630              MOV      r0,r6
0000e8  f7fffffe          BL       GPIO_Init
;;;133    
;;;134    
;;;135      //GPIO_ResetBits(GPIOC, GPIO_Pin_13);
;;;136      GPIO_ResetBits(GPIOC, GPIO_Pin_5);
0000ec  2120              MOVS     r1,#0x20
0000ee  4630              MOV      r0,r6
0000f0  f7fffffe          BL       GPIO_ResetBits
;;;137    
;;;138    }
0000f4  bdf8              POP      {r3-r7,pc}
;;;139    
                          ENDP

                  Set_USBClock PROC
;;;146    *******************************************************************************/
;;;147    void Set_USBClock(void)
0000f6  b510              PUSH     {r4,lr}
;;;148    {
;;;149      /* Select USBCLK source */
;;;150      RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
0000f8  2000              MOVS     r0,#0
0000fa  f7fffffe          BL       RCC_USBCLKConfig
;;;151    
;;;152      /* Enable USB clock */
;;;153      RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
0000fe  2101              MOVS     r1,#1
000100  e8bd4010          POP      {r4,lr}
000104  05c8              LSLS     r0,r1,#23
000106  f7ffbffe          B.W      RCC_APB1PeriphClockCmd
;;;154    }
;;;155    
                          ENDP

                  Enter_LowPowerMode PROC
;;;162    *******************************************************************************/
;;;163    void Enter_LowPowerMode(void)
00010a  4770              BX       lr
;;;164    {
;;;165    }
;;;166    
                          ENDP

                  Leave_LowPowerMode PROC
;;;173    *******************************************************************************/
;;;174    void Leave_LowPowerMode(void)
00010c  4770              BX       lr
;;;175    {
;;;176    }
;;;177    
                          ENDP

                  USB_Interrupts_Config PROC
;;;184    *******************************************************************************/
;;;185    void USB_Interrupts_Config(void)
00010e  b508              PUSH     {r3,lr}
;;;186    {
;;;187      NVIC_InitTypeDef NVIC_InitStructure;
;;;188    
;;;189    
;;;190      NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0); 
000110  2100              MOVS     r1,#0
000112  f04f6000          MOV      r0,#0x8000000
000116  f7fffffe          BL       NVIC_SetVectorTable
;;;191    
;;;192      NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
00011a  f44f60e0          MOV      r0,#0x700
00011e  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;193    
;;;194      NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
000122  2014              MOVS     r0,#0x14
000124  f88d0000          STRB     r0,[sp,#0]
;;;195      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
000128  2000              MOVS     r0,#0
00012a  f88d0001          STRB     r0,[sp,#1]
;;;196      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00012e  f88d0002          STRB     r0,[sp,#2]
;;;197      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000132  2001              MOVS     r0,#1
000134  f88d0003          STRB     r0,[sp,#3]
;;;198      NVIC_Init(&NVIC_InitStructure);
000138  4668              MOV      r0,sp
00013a  f7fffffe          BL       NVIC_Init
;;;199    }
00013e  bd08              POP      {r3,pc}
;;;200    
                          ENDP

                  USB_Cable_Config PROC
;;;207    *******************************************************************************/
;;;208    void USB_Cable_Config (FunctionalState NewState)
000140  4a39              LDR      r2,|L1.552|
;;;209    { 
;;;210      if (NewState != DISABLE)
000142  2800              CMP      r0,#0
;;;211      {
;;;212        GPIO_ResetBits(GPIOC, GPIO_Pin_13);
000144  f44f5100          MOV      r1,#0x2000
;;;213      }
;;;214      else
;;;215      {
;;;216        GPIO_SetBits(GPIOC, GPIO_Pin_13);
000148  4610              MOV      r0,r2
00014a  d001              BEQ      |L1.336|
00014c  f7ffbffe          B.W      GPIO_ResetBits
                  |L1.336|
000150  f7ffbffe          B.W      GPIO_SetBits
;;;217      }
;;;218    }
;;;219    
                          ENDP

                  JoyState PROC
;;;226    *******************************************************************************/
;;;227    u8 JoyState(void)
000154  b510              PUSH     {r4,lr}
;;;228    {
;;;229      /* "right" key is pressed */
;;;230      if (!GPIO_ReadInputDataBit(GPIOE, JOY_RIGHT))
000156  4c35              LDR      r4,|L1.556|
000158  2110              MOVS     r1,#0x10
00015a  4620              MOV      r0,r4
00015c  f7fffffe          BL       GPIO_ReadInputDataBit
000160  b1d8              CBZ      r0,|L1.410|
;;;231      {
;;;232        return RIGHT;
;;;233      }
;;;234      /* "left" key is pressed */
;;;235      if (!GPIO_ReadInputDataBit(GPIOE, JOY_LEFT))
000162  2120              MOVS     r1,#0x20
000164  4620              MOV      r0,r4
000166  f7fffffe          BL       GPIO_ReadInputDataBit
00016a  b1c0              CBZ      r0,|L1.414|
;;;236      {
;;;237        return LEFT;
;;;238      }
;;;239      /* "up" key is pressed */
;;;240      if (!GPIO_ReadInputDataBit(GPIOE, JOY_UP))
00016c  2104              MOVS     r1,#4
00016e  4620              MOV      r0,r4
000170  f7fffffe          BL       GPIO_ReadInputDataBit
000174  b1a8              CBZ      r0,|L1.418|
;;;241      {
;;;242        return UP;
;;;243      }
;;;244      /* "down" key is pressed */
;;;245      if (!GPIO_ReadInputDataBit(GPIOE, JOY_DOWN))
000176  2108              MOVS     r1,#8
000178  4620              MOV      r0,r4
00017a  f7fffffe          BL       GPIO_ReadInputDataBit
00017e  b190              CBZ      r0,|L1.422|
;;;246      {
;;;247        return DOWN;
;;;248      }
;;;249      if (!GPIO_ReadInputDataBit(GPIOC, JOY_LEFT_BUTTON))
000180  1461              ASRS     r1,r4,#17
000182  4c29              LDR      r4,|L1.552|
000184  4620              MOV      r0,r4
000186  f7fffffe          BL       GPIO_ReadInputDataBit
00018a  b170              CBZ      r0,|L1.426|
;;;250      {
;;;251        return LEFT_BUTTON;
;;;252      }
;;;253       if (!GPIO_ReadInputDataBit(GPIOC, JOY_RIGHT_BUTTON))
00018c  14a1              ASRS     r1,r4,#18
00018e  4620              MOV      r0,r4
000190  f7fffffe          BL       GPIO_ReadInputDataBit
000194  b158              CBZ      r0,|L1.430|
;;;254      {
;;;255        return RIGHT_BUTTON;
;;;256      }
;;;257      /* No key is pressed */
;;;258      else
;;;259      {
;;;260        return 0;
000196  2000              MOVS     r0,#0
;;;261      }
;;;262    }
000198  bd10              POP      {r4,pc}
                  |L1.410|
00019a  2003              MOVS     r0,#3                 ;232
00019c  bd10              POP      {r4,pc}
                  |L1.414|
00019e  2002              MOVS     r0,#2                 ;237
0001a0  bd10              POP      {r4,pc}
                  |L1.418|
0001a2  2004              MOVS     r0,#4                 ;242
0001a4  bd10              POP      {r4,pc}
                  |L1.422|
0001a6  2001              MOVS     r0,#1                 ;247
0001a8  bd10              POP      {r4,pc}
                  |L1.426|
0001aa  2005              MOVS     r0,#5                 ;251
0001ac  bd10              POP      {r4,pc}
                  |L1.430|
0001ae  2006              MOVS     r0,#6                 ;255
0001b0  bd10              POP      {r4,pc}
;;;263    
                          ENDP

                  Joystick_Send PROC
;;;270    *******************************************************************************/
;;;271    void Joystick_Send(u8 Keys)
0001b2  b538              PUSH     {r3-r5,lr}
;;;272    {
;;;273      u8 Mouse_Buffer[4] = {0, 0, 0, 0};
0001b4  2400              MOVS     r4,#0
;;;274      s8 X = 0, Y = 0,BUTTON=0;
;;;275    
;;;276      switch (Keys)
;;;277      {
;;;278        case LEFT:
;;;279          X += CURSOR_STEP;
;;;280          break;
;;;281        case RIGHT:
;;;282    
;;;283          X -= CURSOR_STEP;
0001b6  1ee3              SUBS     r3,r4,#3
0001b8  4621              MOV      r1,r4                 ;274
0001ba  4622              MOV      r2,r4                 ;274
0001bc  4625              MOV      r5,r4                 ;274
0001be  9400              STR      r4,[sp,#0]            ;276
0001c0  2807              CMP      r0,#7                 ;276
0001c2  d22e              BCS      |L1.546|
0001c4  e8dff000          TBB      [pc,r0]               ;276
0001c8  2d0a0406          DCB      0x2d,0x0a,0x04,0x06
0001cc  080c0e00          DCB      0x08,0x0c,0x0e,0x00
0001d0  2103              MOVS     r1,#3                 ;279
0001d2  e008              B        |L1.486|
0001d4  4619              MOV      r1,r3
;;;284          break;
0001d6  e006              B        |L1.486|
;;;285        case UP:
;;;286          Y -= CURSOR_STEP;
0001d8  461a              MOV      r2,r3
;;;287          break;
0001da  e004              B        |L1.486|
;;;288        case DOWN:
;;;289          Y += CURSOR_STEP;
0001dc  2203              MOVS     r2,#3
;;;290          break;
0001de  e002              B        |L1.486|
;;;291    	 case LEFT_BUTTON:
;;;292          BUTTON = BUTTON|0x01;
0001e0  2501              MOVS     r5,#1
;;;293          break;
0001e2  e000              B        |L1.486|
;;;294     	 case RIGHT_BUTTON:
;;;295          BUTTON = BUTTON|0x02;
0001e4  2502              MOVS     r5,#2
                  |L1.486|
;;;296          break;
;;;297        
;;;298        default:
;;;299          return;
;;;300      }
;;;301    
;;;302      /* prepare buffer to send */
;;;303      Mouse_Buffer[0] = BUTTON;
0001e6  f88d5000          STRB     r5,[sp,#0]
;;;304      Mouse_Buffer[1] = X;
0001ea  f88d1001          STRB     r1,[sp,#1]
;;;305      Mouse_Buffer[2] = Y;
0001ee  f88d2002          STRB     r2,[sp,#2]
;;;306    
;;;307      /*copy mouse position info in ENDP1 Tx Packet Memory Area*/
;;;308      UserToPMABufferCopy(Mouse_Buffer, GetEPTxAddr(ENDP1), 4);
0001f2  2001              MOVS     r0,#1
0001f4  f7fffffe          BL       GetEPTxAddr
0001f8  4601              MOV      r1,r0
0001fa  2204              MOVS     r2,#4
0001fc  4668              MOV      r0,sp
0001fe  f7fffffe          BL       UserToPMABufferCopy
;;;309      if(Mouse_Buffer[0]!= 0)
000202  f89d0000          LDRB     r0,[sp,#0]
000206  b148              CBZ      r0,|L1.540|
;;;310      {
;;;311        Mouse_Buffer[0] = 0;
000208  f88d4000          STRB     r4,[sp,#0]
;;;312        UserToPMABufferCopy(Mouse_Buffer, GetEPTxAddr(ENDP1), 4);
00020c  2001              MOVS     r0,#1
00020e  f7fffffe          BL       GetEPTxAddr
000212  4601              MOV      r1,r0
000214  2204              MOVS     r2,#4
000216  4668              MOV      r0,sp
000218  f7fffffe          BL       UserToPMABufferCopy
                  |L1.540|
;;;313      } 
;;;314      /* enable endpoint for transmission */
;;;315      SetEPTxValid(ENDP1);
00021c  2001              MOVS     r0,#1
00021e  f7fffffe          BL       SetEPTxValid
                  |L1.546|
;;;316    }
000222  bd38              POP      {r3-r5,pc}
;;;317    
                          ENDP

                  |L1.548|
                          DCD      ||.data||
                  |L1.552|
                          DCD      0x40011000
                  |L1.556|
                          DCD      0x40011800

                          AREA ||.data||, DATA, ALIGN=0

                  HSEStartUpStatus
000000  00                DCB      0x00
