; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\stm32f10x_usart.o --depend=.\Obj\stm32f10x_usart.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\usb_library\inc -I..\USB_test -I.\FWlib\inc -I.\user -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Obj\stm32f10x_usart.crf FWlib\SRC\stm32f10x_usart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  USART_DeInit PROC
;;;131      */
;;;132    void USART_DeInit(USART_TypeDef* USARTx)
000000  4bb2              LDR      r3,|L1.716|
;;;133    {
000002  b510              PUSH     {r4,lr}
;;;134      /* Check the parameters */
;;;135      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;136      switch (*(uint32_t*)&USARTx)
000004  1ac1              SUBS     r1,r0,r3
000006  151a              ASRS     r2,r3,#20
000008  4298              CMP      r0,r3
00000a  d01b              BEQ      |L1.68|
00000c  dc07              BGT      |L1.30|
00000e  49b0              LDR      r1,|L1.720|
000010  1840              ADDS     r0,r0,r1
000012  d014              BEQ      |L1.62|
000014  4290              CMP      r0,r2
000016  d123              BNE      |L1.96|
;;;137      {
;;;138        case USART1_BASE:
;;;139          RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
;;;140          RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
;;;141          break;
;;;142        case USART2_BASE:
;;;143          RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
;;;144          RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
;;;145          break;
;;;146        case USART3_BASE:
;;;147          RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
000018  2101              MOVS     r1,#1
00001a  0204              LSLS     r4,r0,#8
;;;148          RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
;;;149          break;
00001c  e017              B        |L1.78|
                  |L1.30|
00001e  4291              CMP      r1,r2                 ;136
000020  d013              BEQ      |L1.74|
000022  f5b14f6c          CMP      r1,#0xec00            ;136
000026  d11b              BNE      |L1.96|
000028  2101              MOVS     r1,#1                 ;139
00002a  038c              LSLS     r4,r1,#14             ;139
00002c  4620              MOV      r0,r4                 ;139
00002e  f7fffffe          BL       RCC_APB2PeriphResetCmd
000032  4620              MOV      r0,r4                 ;140
000034  e8bd4010          POP      {r4,lr}               ;140
000038  2100              MOVS     r1,#0                 ;140
00003a  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.62|
00003e  2101              MOVS     r1,#1                 ;143
000040  044c              LSLS     r4,r1,#17             ;143
000042  e004              B        |L1.78|
                  |L1.68|
;;;150        
;;;151        case UART4_BASE:
;;;152          RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
000044  2101              MOVS     r1,#1
000046  04cc              LSLS     r4,r1,#19
;;;153          RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
;;;154          break;
000048  e001              B        |L1.78|
                  |L1.74|
;;;155        
;;;156        case UART5_BASE:
;;;157          RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
00004a  2101              MOVS     r1,#1
00004c  050c              LSLS     r4,r1,#20
                  |L1.78|
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;158          RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
000054  4620              MOV      r0,r4
000056  e8bd4010          POP      {r4,lr}
00005a  2100              MOVS     r1,#0
00005c  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L1.96|
;;;159          break;            
;;;160        default:
;;;161          break;
;;;162      }
;;;163    }
000060  bd10              POP      {r4,pc}
;;;164    
                          ENDP

                  USART_Init PROC
;;;175      */
;;;176    void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
000062  b530              PUSH     {r4,r5,lr}
;;;177    {
000064  4604              MOV      r4,r0
;;;178      uint32_t tmpreg = 0x00, apbclock = 0x00;
;;;179      uint32_t integerdivider = 0x00;
;;;180      uint32_t fractionaldivider = 0x00;
;;;181      uint32_t usartxbase = 0;
;;;182      RCC_ClocksTypeDef RCC_ClocksStatus;
;;;183      /* Check the parameters */
;;;184      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;185      assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
;;;186      assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
;;;187      assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
;;;188      assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
;;;189      assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
;;;190      assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
;;;191      /* The hardware flow control is available only for USART1, USART2 and USART3 */
;;;192      assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
;;;193    
;;;194      usartxbase = (*(uint32_t*)&USARTx);
;;;195    /*---------------------------- USART CR2 Configuration -----------------------*/
;;;196      tmpreg = USARTx->CR2;
000066  8a00              LDRH     r0,[r0,#0x10]
000068  b085              SUB      sp,sp,#0x14           ;177
00006a  460d              MOV      r5,r1                 ;177
;;;197      /* Clear STOP[13:12] bits */
;;;198      tmpreg &= CR2_STOP_CLEAR_Mask;
00006c  f64c71ff          MOV      r1,#0xcfff
000070  4008              ANDS     r0,r0,r1
;;;199      /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
;;;200      /* Set STOP[13:12] bits according to USART_StopBits value */
;;;201      tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
000072  88e9              LDRH     r1,[r5,#6]
000074  4301              ORRS     r1,r1,r0
;;;202      
;;;203      /* Write to USART CR2 */
;;;204      USARTx->CR2 = (uint16_t)tmpreg;
000076  8221              STRH     r1,[r4,#0x10]
;;;205    /*---------------------------- USART CR1 Configuration -----------------------*/
;;;206      tmpreg = USARTx->CR1;
000078  89a1              LDRH     r1,[r4,#0xc]
;;;207      /* Clear M, PCE, PS, TE and RE bits */
;;;208      tmpreg &= CR1_CLEAR_Mask;
00007a  f64e10f3          MOV      r0,#0xe9f3
00007e  4001              ANDS     r1,r1,r0
;;;209      /* Configure the USART Word Length, Parity and mode ----------------------- */
;;;210      /* Set the M bits according to USART_WordLength value */
;;;211      /* Set PCE and PS bits according to USART_Parity value */
;;;212      /* Set TE and RE bits according to USART_Mode value */
;;;213      tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
000080  88a8              LDRH     r0,[r5,#4]
000082  892a              LDRH     r2,[r5,#8]
000084  4310              ORRS     r0,r0,r2
000086  896a              LDRH     r2,[r5,#0xa]
000088  430a              ORRS     r2,r2,r1
00008a  4310              ORRS     r0,r0,r2
;;;214                USART_InitStruct->USART_Mode;
;;;215      /* Write to USART CR1 */
;;;216      USARTx->CR1 = (uint16_t)tmpreg;
00008c  81a0              STRH     r0,[r4,#0xc]
;;;217    /*---------------------------- USART CR3 Configuration -----------------------*/  
;;;218      tmpreg = USARTx->CR3;
00008e  8aa0              LDRH     r0,[r4,#0x14]
;;;219      /* Clear CTSE and RTSE bits */
;;;220      tmpreg &= CR3_CLEAR_Mask;
000090  f64f41ff          MOV      r1,#0xfcff
000094  4008              ANDS     r0,r0,r1
;;;221      /* Configure the USART HFC -------------------------------------------------*/
;;;222      /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
;;;223      tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
000096  89a9              LDRH     r1,[r5,#0xc]
000098  4301              ORRS     r1,r1,r0
;;;224      /* Write to USART CR3 */
;;;225      USARTx->CR3 = (uint16_t)tmpreg;
00009a  82a1              STRH     r1,[r4,#0x14]
;;;226    /*---------------------------- USART BRR Configuration -----------------------*/
;;;227      /* Configure the USART Baud Rate -------------------------------------------*/
;;;228      RCC_GetClocksFreq(&RCC_ClocksStatus);
00009c  4668              MOV      r0,sp
00009e  f7fffffe          BL       RCC_GetClocksFreq
;;;229      if (usartxbase == USART1_BASE)
0000a2  488c              LDR      r0,|L1.724|
0000a4  4284              CMP      r4,r0
0000a6  d101              BNE      |L1.172|
;;;230      {
;;;231        apbclock = RCC_ClocksStatus.PCLK2_Frequency;
0000a8  9803              LDR      r0,[sp,#0xc]
0000aa  e000              B        |L1.174|
                  |L1.172|
;;;232      }
;;;233      else
;;;234      {
;;;235        apbclock = RCC_ClocksStatus.PCLK1_Frequency;
0000ac  9802              LDR      r0,[sp,#8]
                  |L1.174|
;;;236      }
;;;237      /* Determine the integer part */
;;;238      integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
;;;239      tmpreg = (integerdivider / 0x64) << 0x04;
0000ae  2264              MOVS     r2,#0x64
0000b0  eb0001c0          ADD      r1,r0,r0,LSL #3       ;238
0000b4  eb011000          ADD      r0,r1,r0,LSL #4       ;238
0000b8  6829              LDR      r1,[r5,#0]            ;238
;;;240      /* Determine the fractional part */
;;;241      fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
0000ba  f06f0318          MVN      r3,#0x18
0000be  0089              LSLS     r1,r1,#2              ;238
0000c0  fbb0f0f1          UDIV     r0,r0,r1              ;238
0000c4  fbb0f1f2          UDIV     r1,r0,r2              ;239
0000c8  0109              LSLS     r1,r1,#4              ;239
0000ca  090d              LSRS     r5,r1,#4
0000cc  435d              MULS     r5,r3,r5
;;;242      tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((uint8_t)0x0F);
0000ce  2332              MOVS     r3,#0x32
0000d0  eb000085          ADD      r0,r0,r5,LSL #2       ;241
0000d4  eb031000          ADD      r0,r3,r0,LSL #4
0000d8  fbb0f0f2          UDIV     r0,r0,r2
0000dc  f000000f          AND      r0,r0,#0xf
0000e0  4308              ORRS     r0,r0,r1
;;;243      /* Write to USART BRR */
;;;244      USARTx->BRR = (uint16_t)tmpreg;
0000e2  8120              STRH     r0,[r4,#8]
;;;245    }
0000e4  b005              ADD      sp,sp,#0x14
0000e6  bd30              POP      {r4,r5,pc}
;;;246    
                          ENDP

                  USART_StructInit PROC
;;;252      */
;;;253    void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
0000e8  f44f5116          MOV      r1,#0x2580
;;;254    {
;;;255      /* USART_InitStruct members default value */
;;;256      USART_InitStruct->USART_BaudRate = 9600;
;;;257      USART_InitStruct->USART_WordLength = USART_WordLength_8b;
0000ec  6001              STR      r1,[r0,#0]
0000ee  2100              MOVS     r1,#0
0000f0  8081              STRH     r1,[r0,#4]
;;;258      USART_InitStruct->USART_StopBits = USART_StopBits_1;
0000f2  80c1              STRH     r1,[r0,#6]
;;;259      USART_InitStruct->USART_Parity = USART_Parity_No ;
0000f4  8101              STRH     r1,[r0,#8]
;;;260      USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
0000f6  220c              MOVS     r2,#0xc
0000f8  8142              STRH     r2,[r0,#0xa]
;;;261      USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
0000fa  8181              STRH     r1,[r0,#0xc]
;;;262    }
0000fc  4770              BX       lr
;;;263    
                          ENDP

                  USART_ClockInit PROC
;;;273      */
;;;274    void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
0000fe  b530              PUSH     {r4,r5,lr}
;;;275    {
;;;276      uint32_t tmpreg = 0x00;
;;;277      /* Check the parameters */
;;;278      assert_param(IS_USART_123_PERIPH(USARTx));
;;;279      assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
;;;280      assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
;;;281      assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
;;;282      assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
;;;283      
;;;284    /*---------------------------- USART CR2 Configuration -----------------------*/
;;;285      tmpreg = USARTx->CR2;
000100  8a03              LDRH     r3,[r0,#0x10]
;;;286      /* Clear CLKEN, CPOL, CPHA and LBCL bits */
;;;287      tmpreg &= CR2_CLOCK_CLEAR_Mask;
000102  f24f02ff          MOV      r2,#0xf0ff
000106  4013              ANDS     r3,r3,r2
;;;288      /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
;;;289      /* Set CLKEN bit according to USART_Clock value */
;;;290      /* Set CPOL bit according to USART_CPOL value */
;;;291      /* Set CPHA bit according to USART_CPHA value */
;;;292      /* Set LBCL bit according to USART_LastBit value */
;;;293      tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
000108  880a              LDRH     r2,[r1,#0]
00010a  884d              LDRH     r5,[r1,#2]
00010c  888c              LDRH     r4,[r1,#4]
00010e  88c9              LDRH     r1,[r1,#6]
000110  432a              ORRS     r2,r2,r5
000112  430c              ORRS     r4,r4,r1
000114  4322              ORRS     r2,r2,r4
000116  431a              ORRS     r2,r2,r3
;;;294                     USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
;;;295      /* Write to USART CR2 */
;;;296      USARTx->CR2 = (uint16_t)tmpreg;
000118  8202              STRH     r2,[r0,#0x10]
;;;297    }
00011a  bd30              POP      {r4,r5,pc}
;;;298    
                          ENDP

                  USART_ClockStructInit PROC
;;;304      */
;;;305    void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
00011c  2100              MOVS     r1,#0
;;;306    {
;;;307      /* USART_ClockInitStruct members default value */
;;;308      USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
00011e  8001              STRH     r1,[r0,#0]
;;;309      USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
000120  8041              STRH     r1,[r0,#2]
;;;310      USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
000122  8081              STRH     r1,[r0,#4]
;;;311      USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
000124  80c1              STRH     r1,[r0,#6]
;;;312    }
000126  4770              BX       lr
;;;313    
                          ENDP

                  USART_Cmd PROC
;;;322      */
;;;323    void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
000128  2900              CMP      r1,#0
;;;324    {
;;;325      /* Check the parameters */
;;;326      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;327      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;328      
;;;329      if (NewState != DISABLE)
;;;330      {
;;;331        /* Enable the selected USART by setting the UE bit in the CR1 register */
;;;332        USARTx->CR1 |= CR1_UE_Set;
;;;333      }
;;;334      else
;;;335      {
;;;336        /* Disable the selected USART by clearing the UE bit in the CR1 register */
;;;337        USARTx->CR1 &= CR1_UE_Reset;
00012a  8981              LDRH     r1,[r0,#0xc]
00012c  d002              BEQ      |L1.308|
00012e  f4415100          ORR      r1,r1,#0x2000         ;332
000132  e001              B        |L1.312|
                  |L1.308|
000134  f4215100          BIC      r1,r1,#0x2000
                  |L1.312|
000138  8181              STRH     r1,[r0,#0xc]          ;332
;;;338      }
;;;339    }
00013a  4770              BX       lr
;;;340    
                          ENDP

                  USART_ITConfig PROC
;;;363      */
;;;364    void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
00013c  b510              PUSH     {r4,lr}
;;;365    {
;;;366      uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
;;;367      uint32_t usartxbase = 0x00;
;;;368      /* Check the parameters */
;;;369      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;370      assert_param(IS_USART_CONFIG_IT(USART_IT));
;;;371      assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */
;;;372      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;373      usartxbase = (*(uint32_t*)&(USARTx));
;;;374      /* Get the USART register index */
;;;375      usartreg = (((uint8_t)USART_IT) >> 0x05);
00013e  f3c11342          UBFX     r3,r1,#5,#3
;;;376      /* Get the interrupt position */
;;;377      itpos = USART_IT & IT_Mask;
000142  f001041f          AND      r4,r1,#0x1f
;;;378      itmask = (((uint32_t)0x01) << itpos);
000146  2101              MOVS     r1,#1
000148  40a1              LSLS     r1,r1,r4
;;;379        
;;;380      if (usartreg == 0x01) /* The IT is in CR1 register */
00014a  2b01              CMP      r3,#1
00014c  d007              BEQ      |L1.350|
;;;381      {
;;;382        usartxbase += 0x0C;
;;;383      }
;;;384      else if (usartreg == 0x02) /* The IT is in CR2 register */
00014e  2b02              CMP      r3,#2
000150  d007              BEQ      |L1.354|
;;;385      {
;;;386        usartxbase += 0x10;
;;;387      }
;;;388      else /* The IT is in CR3 register */
;;;389      {
;;;390        usartxbase += 0x14; 
000152  3014              ADDS     r0,r0,#0x14
                  |L1.340|
;;;391      }
;;;392      if (NewState != DISABLE)
000154  2a00              CMP      r2,#0
;;;393      {
;;;394        *(__IO uint32_t*)usartxbase  |= itmask;
;;;395      }
;;;396      else
;;;397      {
;;;398        *(__IO uint32_t*)usartxbase &= ~itmask;
000156  6802              LDR      r2,[r0,#0]
000158  d005              BEQ      |L1.358|
00015a  430a              ORRS     r2,r2,r1              ;394
00015c  e004              B        |L1.360|
                  |L1.350|
00015e  300c              ADDS     r0,r0,#0xc            ;382
000160  e7f8              B        |L1.340|
                  |L1.354|
000162  3010              ADDS     r0,r0,#0x10           ;386
000164  e7f6              B        |L1.340|
                  |L1.358|
000166  438a              BICS     r2,r2,r1
                  |L1.360|
000168  6002              STR      r2,[r0,#0]            ;394
;;;399      }
;;;400    }
00016a  bd10              POP      {r4,pc}
;;;401    
                          ENDP

                  USART_DMACmd PROC
;;;415      */
;;;416    void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
00016c  2a00              CMP      r2,#0
;;;417    {
;;;418      /* Check the parameters */
;;;419      assert_param(IS_USART_1234_PERIPH(USARTx));
;;;420      assert_param(IS_USART_DMAREQ(USART_DMAReq));  
;;;421      assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;422      if (NewState != DISABLE)
;;;423      {
;;;424        /* Enable the DMA transfer for selected requests by setting the DMAT and/or
;;;425           DMAR bits in the USART CR3 register */
;;;426        USARTx->CR3 |= USART_DMAReq;
;;;427      }
;;;428      else
;;;429      {
;;;430        /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
;;;431           DMAR bits in the USART CR3 register */
;;;432        USARTx->CR3 &= (uint16_t)~USART_DMAReq;
00016e  8a82              LDRH     r2,[r0,#0x14]
000170  d001              BEQ      |L1.374|
000172  430a              ORRS     r2,r2,r1              ;426
000174  e000              B        |L1.376|
                  |L1.374|
000176  438a              BICS     r2,r2,r1
                  |L1.376|
000178  8282              STRH     r2,[r0,#0x14]         ;426
;;;433      }
;;;434    }
00017a  4770              BX       lr
;;;435    
                          ENDP

                  USART_SetAddress PROC
;;;443      */
;;;444    void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
00017c  8a02              LDRH     r2,[r0,#0x10]
;;;445    {
;;;446      /* Check the parameters */
;;;447      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;448      assert_param(IS_USART_ADDRESS(USART_Address)); 
;;;449        
;;;450      /* Clear the USART address */
;;;451      USARTx->CR2 &= CR2_Address_Mask;
00017e  f022020f          BIC      r2,r2,#0xf
000182  8202              STRH     r2,[r0,#0x10]
;;;452      /* Set the USART address node */
;;;453      USARTx->CR2 |= USART_Address;
000184  8a02              LDRH     r2,[r0,#0x10]
000186  430a              ORRS     r2,r2,r1
000188  8202              STRH     r2,[r0,#0x10]
;;;454    }
00018a  4770              BX       lr
;;;455    
                          ENDP

                  USART_WakeUpConfig PROC
;;;466      */
;;;467    void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
00018c  8982              LDRH     r2,[r0,#0xc]
;;;468    {
;;;469      /* Check the parameters */
;;;470      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;471      assert_param(IS_USART_WAKEUP(USART_WakeUp));
;;;472      
;;;473      USARTx->CR1 &= CR1_WAKE_Mask;
00018e  f4226200          BIC      r2,r2,#0x800
000192  8182              STRH     r2,[r0,#0xc]
;;;474      USARTx->CR1 |= USART_WakeUp;
000194  8982              LDRH     r2,[r0,#0xc]
000196  430a              ORRS     r2,r2,r1
000198  8182              STRH     r2,[r0,#0xc]
;;;475    }
00019a  4770              BX       lr
;;;476    
                          ENDP

                  USART_ReceiverWakeUpCmd PROC
;;;485      */
;;;486    void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
00019c  2900              CMP      r1,#0
;;;487    {
;;;488      /* Check the parameters */
;;;489      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;490      assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;491      
;;;492      if (NewState != DISABLE)
;;;493      {
;;;494        /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
;;;495        USARTx->CR1 |= CR1_RWU_Set;
;;;496      }
;;;497      else
;;;498      {
;;;499        /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
;;;500        USARTx->CR1 &= CR1_RWU_Reset;
00019e  8981              LDRH     r1,[r0,#0xc]
0001a0  d002              BEQ      |L1.424|
0001a2  f0410102          ORR      r1,r1,#2              ;495
0001a6  e001              B        |L1.428|
                  |L1.424|
0001a8  f0210102          BIC      r1,r1,#2
                  |L1.428|
0001ac  8181              STRH     r1,[r0,#0xc]          ;495
;;;501      }
;;;502    }
0001ae  4770              BX       lr
;;;503    
                          ENDP

                  USART_LINBreakDetectLengthConfig PROC
;;;515      */
;;;516    void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
0001b0  8a02              LDRH     r2,[r0,#0x10]
;;;517    {
;;;518      /* Check the parameters */
;;;519      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;520      assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
;;;521      
;;;522      USARTx->CR2 &= CR2_LBDL_Mask;
0001b2  f0220220          BIC      r2,r2,#0x20
0001b6  8202              STRH     r2,[r0,#0x10]
;;;523      USARTx->CR2 |= USART_LINBreakDetectLength;  
0001b8  8a02              LDRH     r2,[r0,#0x10]
0001ba  430a              ORRS     r2,r2,r1
0001bc  8202              STRH     r2,[r0,#0x10]
;;;524    }
0001be  4770              BX       lr
;;;525    
                          ENDP

                  USART_LINCmd PROC
;;;534      */
;;;535    void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
0001c0  2900              CMP      r1,#0
;;;536    {
;;;537      /* Check the parameters */
;;;538      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;539      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;540      
;;;541      if (NewState != DISABLE)
;;;542      {
;;;543        /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
;;;544        USARTx->CR2 |= CR2_LINEN_Set;
;;;545      }
;;;546      else
;;;547      {
;;;548        /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
;;;549        USARTx->CR2 &= CR2_LINEN_Reset;
0001c2  8a01              LDRH     r1,[r0,#0x10]
0001c4  d002              BEQ      |L1.460|
0001c6  f4414180          ORR      r1,r1,#0x4000         ;544
0001ca  e001              B        |L1.464|
                  |L1.460|
0001cc  f4214180          BIC      r1,r1,#0x4000
                  |L1.464|
0001d0  8201              STRH     r1,[r0,#0x10]         ;544
;;;550      }
;;;551    }
0001d2  4770              BX       lr
;;;552    
                          ENDP

                  USART_SendData PROC
;;;560      */
;;;561    void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
0001d4  f3c10108          UBFX     r1,r1,#0,#9
;;;562    {
;;;563      /* Check the parameters */
;;;564      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;565      assert_param(IS_USART_DATA(Data)); 
;;;566        
;;;567      /* Transmit Data */
;;;568      USARTx->DR = (Data & (uint16_t)0x01FF);
0001d8  8081              STRH     r1,[r0,#4]
;;;569    }
0001da  4770              BX       lr
;;;570    
                          ENDP

                  USART_ReceiveData PROC
;;;577      */
;;;578    uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
0001dc  8880              LDRH     r0,[r0,#4]
;;;579    {
;;;580      /* Check the parameters */
;;;581      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;582      
;;;583      /* Receive Data */
;;;584      return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
0001de  f3c00008          UBFX     r0,r0,#0,#9
;;;585    }
0001e2  4770              BX       lr
;;;586    
                          ENDP

                  USART_SendBreak PROC
;;;593      */
;;;594    void USART_SendBreak(USART_TypeDef* USARTx)
0001e4  8981              LDRH     r1,[r0,#0xc]
;;;595    {
;;;596      /* Check the parameters */
;;;597      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;598      
;;;599      /* Send break characters */
;;;600      USARTx->CR1 |= CR1_SBK_Set;
0001e6  f0410101          ORR      r1,r1,#1
0001ea  8181              STRH     r1,[r0,#0xc]
;;;601    }
0001ec  4770              BX       lr
;;;602    
                          ENDP

                  USART_SetGuardTime PROC
;;;610      */
;;;611    void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
0001ee  8b02              LDRH     r2,[r0,#0x18]
;;;612    {    
;;;613      /* Check the parameters */
;;;614      assert_param(IS_USART_123_PERIPH(USARTx));
;;;615      
;;;616      /* Clear the USART Guard time */
;;;617      USARTx->GTPR &= GTPR_LSB_Mask;
0001f0  b2d2              UXTB     r2,r2
0001f2  8302              STRH     r2,[r0,#0x18]
;;;618      /* Set the USART guard time */
;;;619      USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
0001f4  8b02              LDRH     r2,[r0,#0x18]
0001f6  ea422101          ORR      r1,r2,r1,LSL #8
0001fa  8301              STRH     r1,[r0,#0x18]
;;;620    }
0001fc  4770              BX       lr
;;;621    
                          ENDP

                  USART_SetPrescaler PROC
;;;630      */
;;;631    void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
0001fe  8b02              LDRH     r2,[r0,#0x18]
;;;632    { 
;;;633      /* Check the parameters */
;;;634      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;635      
;;;636      /* Clear the USART prescaler */
;;;637      USARTx->GTPR &= GTPR_MSB_Mask;
000200  f402427f          AND      r2,r2,#0xff00
000204  8302              STRH     r2,[r0,#0x18]
;;;638      /* Set the USART prescaler */
;;;639      USARTx->GTPR |= USART_Prescaler;
000206  8b02              LDRH     r2,[r0,#0x18]
000208  430a              ORRS     r2,r2,r1
00020a  8302              STRH     r2,[r0,#0x18]
;;;640    }
00020c  4770              BX       lr
;;;641    
                          ENDP

                  USART_SmartCardCmd PROC
;;;650      */
;;;651    void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
00020e  2900              CMP      r1,#0
;;;652    {
;;;653      /* Check the parameters */
;;;654      assert_param(IS_USART_123_PERIPH(USARTx));
;;;655      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;656      if (NewState != DISABLE)
;;;657      {
;;;658        /* Enable the SC mode by setting the SCEN bit in the CR3 register */
;;;659        USARTx->CR3 |= CR3_SCEN_Set;
;;;660      }
;;;661      else
;;;662      {
;;;663        /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
;;;664        USARTx->CR3 &= CR3_SCEN_Reset;
000210  8a81              LDRH     r1,[r0,#0x14]
000212  d002              BEQ      |L1.538|
000214  f0410120          ORR      r1,r1,#0x20           ;659
000218  e001              B        |L1.542|
                  |L1.538|
00021a  f0210120          BIC      r1,r1,#0x20
                  |L1.542|
00021e  8281              STRH     r1,[r0,#0x14]         ;659
;;;665      }
;;;666    }
000220  4770              BX       lr
;;;667    
                          ENDP

                  USART_SmartCardNACKCmd PROC
;;;676      */
;;;677    void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000222  2900              CMP      r1,#0
;;;678    {
;;;679      /* Check the parameters */
;;;680      assert_param(IS_USART_123_PERIPH(USARTx));  
;;;681      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;682      if (NewState != DISABLE)
;;;683      {
;;;684        /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
;;;685        USARTx->CR3 |= CR3_NACK_Set;
;;;686      }
;;;687      else
;;;688      {
;;;689        /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
;;;690        USARTx->CR3 &= CR3_NACK_Reset;
000224  8a81              LDRH     r1,[r0,#0x14]
000226  d002              BEQ      |L1.558|
000228  f0410110          ORR      r1,r1,#0x10           ;685
00022c  e001              B        |L1.562|
                  |L1.558|
00022e  f0210110          BIC      r1,r1,#0x10
                  |L1.562|
000232  8281              STRH     r1,[r0,#0x14]         ;685
;;;691      }
;;;692    }
000234  4770              BX       lr
;;;693    
                          ENDP

                  USART_HalfDuplexCmd PROC
;;;702      */
;;;703    void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000236  2900              CMP      r1,#0
;;;704    {
;;;705      /* Check the parameters */
;;;706      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;707      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;708      
;;;709      if (NewState != DISABLE)
;;;710      {
;;;711        /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
;;;712        USARTx->CR3 |= CR3_HDSEL_Set;
;;;713      }
;;;714      else
;;;715      {
;;;716        /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
;;;717        USARTx->CR3 &= CR3_HDSEL_Reset;
000238  8a81              LDRH     r1,[r0,#0x14]
00023a  d002              BEQ      |L1.578|
00023c  f0410108          ORR      r1,r1,#8              ;712
000240  e001              B        |L1.582|
                  |L1.578|
000242  f0210108          BIC      r1,r1,#8
                  |L1.582|
000246  8281              STRH     r1,[r0,#0x14]         ;712
;;;718      }
;;;719    }
000248  4770              BX       lr
;;;720    
                          ENDP

                  USART_IrDAConfig PROC
;;;731      */
;;;732    void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
00024a  8a82              LDRH     r2,[r0,#0x14]
;;;733    {
;;;734      /* Check the parameters */
;;;735      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;736      assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
;;;737        
;;;738      USARTx->CR3 &= CR3_IRLP_Mask;
00024c  f0220204          BIC      r2,r2,#4
000250  8282              STRH     r2,[r0,#0x14]
;;;739      USARTx->CR3 |= USART_IrDAMode;
000252  8a82              LDRH     r2,[r0,#0x14]
000254  430a              ORRS     r2,r2,r1
000256  8282              STRH     r2,[r0,#0x14]
;;;740    }
000258  4770              BX       lr
;;;741    
                          ENDP

                  USART_IrDACmd PROC
;;;750      */
;;;751    void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
00025a  2900              CMP      r1,#0
;;;752    {
;;;753      /* Check the parameters */
;;;754      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;755      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;756        
;;;757      if (NewState != DISABLE)
;;;758      {
;;;759        /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
;;;760        USARTx->CR3 |= CR3_IREN_Set;
;;;761      }
;;;762      else
;;;763      {
;;;764        /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
;;;765        USARTx->CR3 &= CR3_IREN_Reset;
00025c  8a81              LDRH     r1,[r0,#0x14]
00025e  d002              BEQ      |L1.614|
000260  f0410102          ORR      r1,r1,#2              ;760
000264  e001              B        |L1.618|
                  |L1.614|
000266  f0210102          BIC      r1,r1,#2
                  |L1.618|
00026a  8281              STRH     r1,[r0,#0x14]         ;760
;;;766      }
;;;767    }
00026c  4770              BX       lr
;;;768    
                          ENDP

                  USART_GetFlagStatus PROC
;;;787      */
;;;788    FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
00026e  4602              MOV      r2,r0
;;;789    {
;;;790      FlagStatus bitstatus = RESET;
000270  2000              MOVS     r0,#0
;;;791      /* Check the parameters */
;;;792      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;793      assert_param(IS_USART_FLAG(USART_FLAG));
;;;794      assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   
;;;795      if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
000272  8812              LDRH     r2,[r2,#0]
000274  420a              TST      r2,r1
000276  d000              BEQ      |L1.634|
;;;796      {
;;;797        bitstatus = SET;
000278  2001              MOVS     r0,#1
                  |L1.634|
;;;798      }
;;;799      else
;;;800      {
;;;801        bitstatus = RESET;
;;;802      }
;;;803      return bitstatus;
;;;804    }
00027a  4770              BX       lr
;;;805    
                          ENDP

                  USART_ClearFlag PROC
;;;831      */
;;;832    void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
00027c  43c9              MVNS     r1,r1
;;;833    {
;;;834      /* Check the parameters */
;;;835      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;836      assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
;;;837      assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   
;;;838       
;;;839      USARTx->SR = (uint16_t)~USART_FLAG;
00027e  8001              STRH     r1,[r0,#0]
;;;840    }
000280  4770              BX       lr
;;;841    
                          ENDP

                  USART_GetITStatus PROC
;;;860      */
;;;861    ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
000282  b570              PUSH     {r4-r6,lr}
;;;862    {
;;;863      uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
;;;864      ITStatus bitstatus = RESET;
;;;865      /* Check the parameters */
;;;866      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;867      assert_param(IS_USART_GET_IT(USART_IT));
;;;868      assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */  
;;;869      
;;;870      /* Get the USART register index */
;;;871      usartreg = (((uint8_t)USART_IT) >> 0x05);
;;;872      /* Get the interrupt position */
;;;873      itmask = USART_IT & IT_Mask;
000284  f001061f          AND      r6,r1,#0x1f
;;;874      itmask = (uint32_t)0x01 << itmask;
000288  2201              MOVS     r2,#1
00028a  2500              MOVS     r5,#0                 ;864
00028c  f3c11342          UBFX     r3,r1,#5,#3           ;871
000290  fa02f406          LSL      r4,r2,r6
;;;875      
;;;876      if (usartreg == 0x01) /* The IT  is in CR1 register */
000294  2b01              CMP      r3,#1
000296  d00f              BEQ      |L1.696|
;;;877      {
;;;878        itmask &= USARTx->CR1;
;;;879      }
;;;880      else if (usartreg == 0x02) /* The IT  is in CR2 register */
000298  2b02              CMP      r3,#2
00029a  d00f              BEQ      |L1.700|
;;;881      {
;;;882        itmask &= USARTx->CR2;
;;;883      }
;;;884      else /* The IT  is in CR3 register */
;;;885      {
;;;886        itmask &= USARTx->CR3;
00029c  8a83              LDRH     r3,[r0,#0x14]
                  |L1.670|
;;;887      }
;;;888      
;;;889      bitpos = USART_IT >> 0x08;
00029e  ea4f2111          LSR      r1,r1,#8
;;;890      bitpos = (uint32_t)0x01 << bitpos;
;;;891      bitpos &= USARTx->SR;
0002a2  8800              LDRH     r0,[r0,#0]
0002a4  4223              TST      r3,r4                 ;882
0002a6  fa02f201          LSL      r2,r2,r1              ;890
0002aa  ea000002          AND      r0,r0,r2
;;;892      if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
0002ae  d001              BEQ      |L1.692|
0002b0  b100              CBZ      r0,|L1.692|
;;;893      {
;;;894        bitstatus = SET;
0002b2  2501              MOVS     r5,#1
                  |L1.692|
;;;895      }
;;;896      else
;;;897      {
;;;898        bitstatus = RESET;
;;;899      }
;;;900      
;;;901      return bitstatus;  
0002b4  4628              MOV      r0,r5
;;;902    }
0002b6  bd70              POP      {r4-r6,pc}
                  |L1.696|
0002b8  8983              LDRH     r3,[r0,#0xc]          ;878
0002ba  e7f0              B        |L1.670|
                  |L1.700|
0002bc  8a03              LDRH     r3,[r0,#0x10]         ;882
0002be  e7ee              B        |L1.670|
;;;903    
                          ENDP

                  USART_ClearITPendingBit PROC
;;;930      */
;;;931    void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
0002c0  0a0a              LSRS     r2,r1,#8
;;;932    {
;;;933      uint16_t bitpos = 0x00, itmask = 0x00;
;;;934      /* Check the parameters */
;;;935      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;936      assert_param(IS_USART_CLEAR_IT(USART_IT));
;;;937      assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */
;;;938      
;;;939      bitpos = USART_IT >> 0x08;
;;;940      itmask = (uint16_t)((uint16_t)0x01 << bitpos);
0002c2  2101              MOVS     r1,#1
0002c4  4091              LSLS     r1,r1,r2
;;;941      USARTx->SR = (uint16_t)~itmask;
0002c6  43c9              MVNS     r1,r1
0002c8  8001              STRH     r1,[r0,#0]
;;;942    }
0002ca  4770              BX       lr
;;;943    /**
                          ENDP

                  |L1.716|
                          DCD      0x40004c00
                  |L1.720|
                          DCD      0xbfffbc00
                  |L1.724|
                          DCD      0x40013800
