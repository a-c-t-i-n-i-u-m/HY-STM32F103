; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Obj\stm32f10x_sdio.o --depend=.\Obj\stm32f10x_sdio.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\FWlib\inc -I.\user -I.\fatfs -I.\fatfs -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\Obj\stm32f10x_sdio.crf FWlib\SRC\stm32f10x_sdio.c]
                          THUMB

                          AREA ||i.SDIO_CEATAITCmd||, CODE, READONLY, ALIGN=2

                  SDIO_CEATAITCmd PROC
;;;618      */
;;;619    void SDIO_CEATAITCmd(FunctionalState NewState)
000000  2101              MOVS     r1,#1
;;;620    { 
;;;621      /* Check the parameters */
;;;622      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;623      
;;;624      *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
000002  4381              BICS     r1,r1,r0
000004  4801              LDR      r0,|L1.12|
000006  6001              STR      r1,[r0,#0]
;;;625    }
000008  4770              BX       lr
;;;626    
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x423001b4

                          AREA ||i.SDIO_ClearFlag||, CODE, READONLY, ALIGN=2

                  SDIO_ClearFlag PROC
;;;709      */
;;;710    void SDIO_ClearFlag(uint32_t SDIO_FLAG)
000000  4901              LDR      r1,|L2.8|
;;;711    { 
;;;712      /* Check the parameters */
;;;713      assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
;;;714       
;;;715      SDIO->ICR = SDIO_FLAG;
000002  6388              STR      r0,[r1,#0x38]
;;;716    }
000004  4770              BX       lr
;;;717    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  SDIO_ClearITPendingBit PROC
;;;785      */
;;;786    void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
000000  4901              LDR      r1,|L3.8|
;;;787    { 
;;;788      /* Check the parameters */
;;;789      assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
;;;790       
;;;791      SDIO->ICR = SDIO_IT;
000002  6388              STR      r0,[r1,#0x38]
;;;792    }
000004  4770              BX       lr
;;;793    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_ClockCmd||, CODE, READONLY, ALIGN=2

                  SDIO_ClockCmd PROC
;;;236      */
;;;237    void SDIO_ClockCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L4.8|
;;;238    {
;;;239      /* Check the parameters */
;;;240      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;241      
;;;242      *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;243    }
000004  4770              BX       lr
;;;244    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      0x423000a0

                          AREA ||i.SDIO_CmdStructInit||, CODE, READONLY, ALIGN=1

                  SDIO_CmdStructInit PROC
;;;386      */
;;;387    void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
000000  2100              MOVS     r1,#0
;;;388    {
;;;389      /* SDIO_CmdInitStruct members default value */
;;;390      SDIO_CmdInitStruct->SDIO_Argument = 0x00;
;;;391      SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
000002  6001              STR      r1,[r0,#0]
;;;392      SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
000004  6041              STR      r1,[r0,#4]
;;;393      SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
000006  6081              STR      r1,[r0,#8]
;;;394      SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
000008  60c1              STR      r1,[r0,#0xc]
00000a  6101              STR      r1,[r0,#0x10]
;;;395    }
00000c  4770              BX       lr
;;;396    
                          ENDP


                          AREA ||i.SDIO_CommandCompletionCmd||, CODE, READONLY, ALIGN=2

                  SDIO_CommandCompletionCmd PROC
;;;604      */
;;;605    void SDIO_CommandCompletionCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L6.8|
;;;606    { 
;;;607      /* Check the parameters */
;;;608      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;609      
;;;610      *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;611    }
000004  4770              BX       lr
;;;612    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x423001b0

                          AREA ||i.SDIO_DMACmd||, CODE, READONLY, ALIGN=2

                  SDIO_DMACmd PROC
;;;334      */
;;;335    void SDIO_DMACmd(FunctionalState NewState)
000000  4901              LDR      r1,|L7.8|
;;;336    {
;;;337      /* Check the parameters */
;;;338      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;339      
;;;340      *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;341    }
000004  4770              BX       lr
;;;342    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      0x4230058c

                          AREA ||i.SDIO_DataConfig||, CODE, READONLY, ALIGN=2

                  SDIO_DataConfig PROC
;;;433      */
;;;434    void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;435    {
;;;436      uint32_t tmpreg = 0;
;;;437      
;;;438      /* Check the parameters */
;;;439      assert_param(IS_SDIO_DATA_LENGTH(SDIO_DataInitStruct->SDIO_DataLength));
;;;440      assert_param(IS_SDIO_BLOCK_SIZE(SDIO_DataInitStruct->SDIO_DataBlockSize));
;;;441      assert_param(IS_SDIO_TRANSFER_DIR(SDIO_DataInitStruct->SDIO_TransferDir));
;;;442      assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
;;;443      assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));
;;;444    
;;;445    /*---------------------------- SDIO DTIMER Configuration ---------------------*/
;;;446      /* Set the SDIO Data TimeOut value */
;;;447      SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
000002  4909              LDR      r1,|L8.40|
000004  6802              LDR      r2,[r0,#0]
000006  624a              STR      r2,[r1,#0x24]
;;;448    
;;;449    /*---------------------------- SDIO DLEN Configuration -----------------------*/
;;;450      /* Set the SDIO DataLength value */
;;;451      SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
000008  6842              LDR      r2,[r0,#4]
00000a  628a              STR      r2,[r1,#0x28]
;;;452    
;;;453    /*---------------------------- SDIO DCTRL Configuration ----------------------*/  
;;;454      /* Get the SDIO DCTRL value */
;;;455      tmpreg = SDIO->DCTRL;
00000c  6aca              LDR      r2,[r1,#0x2c]
;;;456      /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
;;;457      tmpreg &= DCTRL_CLEAR_MASK;
00000e  f02203f7          BIC      r3,r2,#0xf7
000012  e9d02502          LDRD     r2,r5,[r0,#8]
000016  e9d04004          LDRD     r4,r0,[r0,#0x10]
;;;458      /* Set DEN bit according to SDIO_DPSM value */
;;;459      /* Set DTMODE bit according to SDIO_TransferMode value */
;;;460      /* Set DTDIR bit according to SDIO_TransferDir value */
;;;461      /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
;;;462      tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
00001a  432a              ORRS     r2,r2,r5
00001c  4304              ORRS     r4,r4,r0
00001e  4322              ORRS     r2,r2,r4
000020  431a              ORRS     r2,r2,r3
;;;463               | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
;;;464    
;;;465      /* Write to SDIO DCTRL */
;;;466      SDIO->DCTRL = tmpreg;
000022  62ca              STR      r2,[r1,#0x2c]
;;;467    }
000024  bd30              POP      {r4,r5,pc}
;;;468    
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
                          DCD      0x40018000

                          AREA ||i.SDIO_DataStructInit||, CODE, READONLY, ALIGN=1

                  SDIO_DataStructInit PROC
;;;474      */
;;;475    void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
000000  f04f31ff          MOV      r1,#0xffffffff
;;;476    {
;;;477      /* SDIO_DataInitStruct members default value */
;;;478      SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
;;;479      SDIO_DataInitStruct->SDIO_DataLength = 0x00;
000004  6001              STR      r1,[r0,#0]
000006  2100              MOVS     r1,#0
;;;480      SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
000008  6041              STR      r1,[r0,#4]
;;;481      SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
00000a  6081              STR      r1,[r0,#8]
;;;482      SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
00000c  60c1              STR      r1,[r0,#0xc]
;;;483      SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
00000e  6101              STR      r1,[r0,#0x10]
000010  6141              STR      r1,[r0,#0x14]
;;;484    }
000012  4770              BX       lr
;;;485    
                          ENDP


                          AREA ||i.SDIO_DeInit||, CODE, READONLY, ALIGN=2

                  SDIO_DeInit PROC
;;;160      */
;;;161    void SDIO_DeInit(void)
000000  4806              LDR      r0,|L10.28|
;;;162    {
;;;163      SDIO->POWER = 0x00000000;
000002  2100              MOVS     r1,#0
000004  6001              STR      r1,[r0,#0]
;;;164      SDIO->CLKCR = 0x00000000;
000006  6041              STR      r1,[r0,#4]
;;;165      SDIO->ARG = 0x00000000;
000008  6081              STR      r1,[r0,#8]
;;;166      SDIO->CMD = 0x00000000;
00000a  60c1              STR      r1,[r0,#0xc]
;;;167      SDIO->DTIMER = 0x00000000;
00000c  6241              STR      r1,[r0,#0x24]
;;;168      SDIO->DLEN = 0x00000000;
00000e  6281              STR      r1,[r0,#0x28]
;;;169      SDIO->DCTRL = 0x00000000;
000010  62c1              STR      r1,[r0,#0x2c]
;;;170      SDIO->ICR = 0x00C007FF;
000012  4a03              LDR      r2,|L10.32|
000014  6382              STR      r2,[r0,#0x38]
;;;171      SDIO->MASK = 0x00000000;
000016  63c1              STR      r1,[r0,#0x3c]
;;;172    }
000018  4770              BX       lr
;;;173    
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      0x40018000
                  |L10.32|
                          DCD      0x00c007ff

                          AREA ||i.SDIO_GetCommandResponse||, CODE, READONLY, ALIGN=2

                  SDIO_GetCommandResponse PROC
;;;402      */
;;;403    uint8_t SDIO_GetCommandResponse(void)
000000  4801              LDR      r0,|L11.8|
;;;404    {
;;;405      return (uint8_t)(SDIO->RESPCMD);
000002  6900              LDR      r0,[r0,#0x10]
000004  b2c0              UXTB     r0,r0
;;;406    }
000006  4770              BX       lr
;;;407    
                          ENDP

                  |L11.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetDataCounter||, CODE, READONLY, ALIGN=2

                  SDIO_GetDataCounter PROC
;;;490      */
;;;491    uint32_t SDIO_GetDataCounter(void)
000000  4801              LDR      r0,|L12.8|
;;;492    { 
;;;493      return SDIO->DCOUNT;
000002  6b00              LDR      r0,[r0,#0x30]
;;;494    }
000004  4770              BX       lr
;;;495    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetFIFOCount||, CODE, READONLY, ALIGN=2

                  SDIO_GetFIFOCount PROC
;;;521      */
;;;522    uint32_t SDIO_GetFIFOCount(void)
000000  4801              LDR      r0,|L13.8|
;;;523    { 
;;;524      return SDIO->FIFOCNT;
000002  6c80              LDR      r0,[r0,#0x48]
;;;525    }
000004  4770              BX       lr
;;;526    
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  SDIO_GetFlagStatus PROC
;;;671      */
;;;672    FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
000000  4a03              LDR      r2,|L14.16|
;;;673    { 
000002  4601              MOV      r1,r0
;;;674      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;675      
;;;676      /* Check the parameters */
;;;677      assert_param(IS_SDIO_FLAG(SDIO_FLAG));
;;;678      
;;;679      if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
000006  6b52              LDR      r2,[r2,#0x34]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L14.14|
;;;680      {
;;;681        bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L14.14|
;;;682      }
;;;683      else
;;;684      {
;;;685        bitstatus = RESET;
;;;686      }
;;;687      return bitstatus;
;;;688    }
00000e  4770              BX       lr
;;;689    
                          ENDP

                  |L14.16|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetITStatus||, CODE, READONLY, ALIGN=2

                  SDIO_GetITStatus PROC
;;;749      */
;;;750    ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
000000  4a03              LDR      r2,|L15.16|
;;;751    { 
000002  4601              MOV      r1,r0
;;;752      ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;753      
;;;754      /* Check the parameters */
;;;755      assert_param(IS_SDIO_GET_IT(SDIO_IT));
;;;756      if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
000006  6b52              LDR      r2,[r2,#0x34]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L15.14|
;;;757      {
;;;758        bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L15.14|
;;;759      }
;;;760      else
;;;761      {
;;;762        bitstatus = RESET;
;;;763      }
;;;764      return bitstatus;
;;;765    }
00000e  4770              BX       lr
;;;766    
                          ENDP

                  |L15.16|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetPowerState||, CODE, READONLY, ALIGN=2

                  SDIO_GetPowerState PROC
;;;270      */
;;;271    uint32_t SDIO_GetPowerState(void)
000000  4802              LDR      r0,|L16.12|
;;;272    {
;;;273      return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
000002  6800              LDR      r0,[r0,#0]
000004  f0000003          AND      r0,r0,#3
;;;274    }
000008  4770              BX       lr
;;;275    
                          ENDP

00000a  0000              DCW      0x0000
                  |L16.12|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetResponse||, CODE, READONLY, ALIGN=2

                  SDIO_GetResponse PROC
;;;417      */
;;;418    uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
000000  4901              LDR      r1,|L17.8|
;;;419    {
;;;420      /* Check the parameters */
;;;421      assert_param(IS_SDIO_RESP(SDIO_RESP));
;;;422      
;;;423      return (*(__IO uint32_t *)(SDIO_RESP_ADDR + SDIO_RESP)); 
000002  4408              ADD      r0,r0,r1
000004  6940              LDR      r0,[r0,#0x14]
;;;424    }
000006  4770              BX       lr
;;;425    
                          ENDP

                  |L17.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_ITConfig||, CODE, READONLY, ALIGN=2

                  SDIO_ITConfig PROC
;;;310      */
;;;311    void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
000000  4a04              LDR      r2,|L18.20|
;;;312    {
;;;313      /* Check the parameters */
;;;314      assert_param(IS_SDIO_IT(SDIO_IT));
;;;315      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;316      
;;;317      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;318      {
;;;319        /* Enable the SDIO interrupts */
;;;320        SDIO->MASK |= SDIO_IT;
;;;321      }
;;;322      else
;;;323      {
;;;324        /* Disable the SDIO interrupts */
;;;325        SDIO->MASK &= ~SDIO_IT;
000004  6bd1              LDR      r1,[r2,#0x3c]
000006  d001              BEQ      |L18.12|
000008  4301              ORRS     r1,r1,r0              ;320
00000a  e000              B        |L18.14|
                  |L18.12|
00000c  4381              BICS     r1,r1,r0
                  |L18.14|
00000e  63d1              STR      r1,[r2,#0x3c]         ;320
;;;326      } 
;;;327    }
000010  4770              BX       lr
;;;328    
                          ENDP

000012  0000              DCW      0x0000
                  |L18.20|
                          DCD      0x40018000

                          AREA ||i.SDIO_Init||, CODE, READONLY, ALIGN=2

                  SDIO_Init PROC
;;;181      */
;;;182    void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;183    {
;;;184      uint32_t tmpreg = 0;
;;;185        
;;;186      /* Check the parameters */
;;;187      assert_param(IS_SDIO_CLOCK_EDGE(SDIO_InitStruct->SDIO_ClockEdge));
;;;188      assert_param(IS_SDIO_CLOCK_BYPASS(SDIO_InitStruct->SDIO_ClockBypass));
;;;189      assert_param(IS_SDIO_CLOCK_POWER_SAVE(SDIO_InitStruct->SDIO_ClockPowerSave));
;;;190      assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
;;;191      assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
;;;192       
;;;193    /*---------------------------- SDIO CLKCR Configuration ------------------------*/  
;;;194      /* Get the SDIO CLKCR value */
;;;195      tmpreg = SDIO->CLKCR;
000002  4b09              LDR      r3,|L19.40|
000004  685a              LDR      r2,[r3,#4]
;;;196      
;;;197      /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
;;;198      tmpreg &= CLKCR_CLEAR_MASK;
;;;199      
;;;200      /* Set CLKDIV bits according to SDIO_ClockDiv value */
;;;201      /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
;;;202      /* Set BYPASS bit according to SDIO_ClockBypass value */
;;;203      /* Set WIDBUS bits according to SDIO_BusWide value */
;;;204      /* Set NEGEDGE bits according to SDIO_ClockEdge value */
;;;205      /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
;;;206      tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
000006  f1000408          ADD      r4,r0,#8
00000a  f64761ff          MOV      r1,#0x7eff            ;198
00000e  cc70              LDM      r4,{r4-r6}
000010  438a              BICS     r2,r2,r1              ;198
000012  7801              LDRB     r1,[r0,#0]
000014  4334              ORRS     r4,r4,r6
000016  4329              ORRS     r1,r1,r5
000018  6845              LDR      r5,[r0,#4]
00001a  4321              ORRS     r1,r1,r4
00001c  6940              LDR      r0,[r0,#0x14]
00001e  4329              ORRS     r1,r1,r5
000020  4301              ORRS     r1,r1,r0
000022  4311              ORRS     r1,r1,r2
;;;207                 SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
;;;208                 SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
;;;209      
;;;210      /* Write to SDIO CLKCR */
;;;211      SDIO->CLKCR = tmpreg;
000024  6059              STR      r1,[r3,#4]
;;;212    }
000026  bd70              POP      {r4-r6,pc}
;;;213    
                          ENDP

                  |L19.40|
                          DCD      0x40018000

                          AREA ||i.SDIO_ReadData||, CODE, READONLY, ALIGN=2

                  SDIO_ReadData PROC
;;;500      */
;;;501    uint32_t SDIO_ReadData(void)
000000  4801              LDR      r0,|L20.8|
;;;502    { 
;;;503      return SDIO->FIFO;
000002  6800              LDR      r0,[r0,#0]
;;;504    }
000004  4770              BX       lr
;;;505    
                          ENDP

000006  0000              DCW      0x0000
                  |L20.8|
                          DCD      0x40018080

                          AREA ||i.SDIO_SendCEATACmd||, CODE, READONLY, ALIGN=2

                  SDIO_SendCEATACmd PROC
;;;632      */
;;;633    void SDIO_SendCEATACmd(FunctionalState NewState)
000000  4901              LDR      r1,|L21.8|
;;;634    { 
;;;635      /* Check the parameters */
;;;636      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;637      
;;;638      *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;639    }
000004  4770              BX       lr
;;;640    
                          ENDP

000006  0000              DCW      0x0000
                  |L21.8|
                          DCD      0x423001b8

                          AREA ||i.SDIO_SendCommand||, CODE, READONLY, ALIGN=2

                  SDIO_SendCommand PROC
;;;350      */
;;;351    void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;352    {
;;;353      uint32_t tmpreg = 0;
;;;354      
;;;355      /* Check the parameters */
;;;356      assert_param(IS_SDIO_CMD_INDEX(SDIO_CmdInitStruct->SDIO_CmdIndex));
;;;357      assert_param(IS_SDIO_RESPONSE(SDIO_CmdInitStruct->SDIO_Response));
;;;358      assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
;;;359      assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
;;;360      
;;;361    /*---------------------------- SDIO ARG Configuration ------------------------*/
;;;362      /* Set the SDIO Argument value */
;;;363      SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
000002  4a08              LDR      r2,|L22.36|
000004  6801              LDR      r1,[r0,#0]
000006  6091              STR      r1,[r2,#8]
;;;364      
;;;365    /*---------------------------- SDIO CMD Configuration ------------------------*/  
;;;366      /* Get the SDIO CMD value */
;;;367      tmpreg = SDIO->CMD;
000008  68d1              LDR      r1,[r2,#0xc]
;;;368      /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
;;;369      tmpreg &= CMD_CLEAR_MASK;
00000a  0acb              LSRS     r3,r1,#11
00000c  e9d01501          LDRD     r1,r5,[r0,#4]
000010  e9d04003          LDRD     r4,r0,[r0,#0xc]
;;;370      /* Set CMDINDEX bits according to SDIO_CmdIndex value */
;;;371      /* Set WAITRESP bits according to SDIO_Response value */
;;;372      /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
;;;373      /* Set CPSMEN bits according to SDIO_CPSM value */
;;;374      tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
000014  4329              ORRS     r1,r1,r5
000016  4304              ORRS     r4,r4,r0
000018  02db              LSLS     r3,r3,#11             ;369
00001a  4321              ORRS     r1,r1,r4
00001c  4319              ORRS     r1,r1,r3
;;;375               | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
;;;376      
;;;377      /* Write to SDIO CMD */
;;;378      SDIO->CMD = tmpreg;
00001e  60d1              STR      r1,[r2,#0xc]
;;;379    }
000020  bd30              POP      {r4,r5,pc}
;;;380    
                          ENDP

000022  0000              DCW      0x0000
                  |L22.36|
                          DCD      0x40018000

                          AREA ||i.SDIO_SendSDIOSuspendCmd||, CODE, READONLY, ALIGN=2

                  SDIO_SendSDIOSuspendCmd PROC
;;;590      */
;;;591    void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L23.8|
;;;592    { 
;;;593      /* Check the parameters */
;;;594      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;595      
;;;596      *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;597    }
000004  4770              BX       lr
;;;598    
                          ENDP

000006  0000              DCW      0x0000
                  |L23.8|
                          DCD      0x423001ac

                          AREA ||i.SDIO_SetPowerState||, CODE, READONLY, ALIGN=2

                  SDIO_SetPowerState PROC
;;;252      */
;;;253    void SDIO_SetPowerState(uint32_t SDIO_PowerState)
000000  4904              LDR      r1,|L24.20|
;;;254    {
;;;255      /* Check the parameters */
;;;256      assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
;;;257      
;;;258      SDIO->POWER &= PWR_PWRCTRL_MASK;
000002  680a              LDR      r2,[r1,#0]
000004  f0220203          BIC      r2,r2,#3
000008  600a              STR      r2,[r1,#0]
;;;259      SDIO->POWER |= SDIO_PowerState;
00000a  680a              LDR      r2,[r1,#0]
00000c  4302              ORRS     r2,r2,r0
00000e  600a              STR      r2,[r1,#0]
;;;260    }
000010  4770              BX       lr
;;;261    
                          ENDP

000012  0000              DCW      0x0000
                  |L24.20|
                          DCD      0x40018000

                          AREA ||i.SDIO_SetSDIOOperation||, CODE, READONLY, ALIGN=2

                  SDIO_SetSDIOOperation PROC
;;;576      */
;;;577    void SDIO_SetSDIOOperation(FunctionalState NewState)
000000  4901              LDR      r1,|L25.8|
;;;578    { 
;;;579      /* Check the parameters */
;;;580      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;581      
;;;582      *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;583    }
000004  4770              BX       lr
;;;584    
                          ENDP

000006  0000              DCW      0x0000
                  |L25.8|
                          DCD      0x423005ac

                          AREA ||i.SDIO_SetSDIOReadWaitMode||, CODE, READONLY, ALIGN=2

                  SDIO_SetSDIOReadWaitMode PROC
;;;562      */
;;;563    void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
000000  4901              LDR      r1,|L26.8|
;;;564    {
;;;565      /* Check the parameters */
;;;566      assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
;;;567      
;;;568      *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
000002  6008              STR      r0,[r1,#0]
;;;569    }
000004  4770              BX       lr
;;;570    
                          ENDP

000006  0000              DCW      0x0000
                  |L26.8|
                          DCD      0x423005a8

                          AREA ||i.SDIO_StartSDIOReadWait||, CODE, READONLY, ALIGN=2

                  SDIO_StartSDIOReadWait PROC
;;;532      */
;;;533    void SDIO_StartSDIOReadWait(FunctionalState NewState)
000000  4901              LDR      r1,|L27.8|
;;;534    { 
;;;535      /* Check the parameters */
;;;536      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;537      
;;;538      *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
000002  6008              STR      r0,[r1,#0]
;;;539    }
000004  4770              BX       lr
;;;540    
                          ENDP

000006  0000              DCW      0x0000
                  |L27.8|
                          DCD      0x423005a0

                          AREA ||i.SDIO_StopSDIOReadWait||, CODE, READONLY, ALIGN=2

                  SDIO_StopSDIOReadWait PROC
;;;546      */
;;;547    void SDIO_StopSDIOReadWait(FunctionalState NewState)
000000  4901              LDR      r1,|L28.8|
;;;548    { 
;;;549      /* Check the parameters */
;;;550      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;551      
;;;552      *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
000002  6008              STR      r0,[r1,#0]
;;;553    }
000004  4770              BX       lr
;;;554    
                          ENDP

000006  0000              DCW      0x0000
                  |L28.8|
                          DCD      0x423005a4

                          AREA ||i.SDIO_StructInit||, CODE, READONLY, ALIGN=1

                  SDIO_StructInit PROC
;;;219      */
;;;220    void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
000000  2100              MOVS     r1,#0
;;;221    {
;;;222      /* SDIO_InitStruct members default value */
;;;223      SDIO_InitStruct->SDIO_ClockDiv = 0x00;
000002  7001              STRB     r1,[r0,#0]
;;;224      SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;225      SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
000004  6041              STR      r1,[r0,#4]
;;;226      SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
000006  6081              STR      r1,[r0,#8]
;;;227      SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
000008  60c1              STR      r1,[r0,#0xc]
;;;228      SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
00000a  6101              STR      r1,[r0,#0x10]
00000c  6141              STR      r1,[r0,#0x14]
;;;229    }
00000e  4770              BX       lr
;;;230    
                          ENDP


                          AREA ||i.SDIO_WriteData||, CODE, READONLY, ALIGN=2

                  SDIO_WriteData PROC
;;;510      */
;;;511    void SDIO_WriteData(uint32_t Data)
000000  4901              LDR      r1,|L30.8|
;;;512    { 
;;;513      SDIO->FIFO = Data;
000002  6008              STR      r0,[r1,#0]
;;;514    }
000004  4770              BX       lr
;;;515    
                          ENDP

000006  0000              DCW      0x0000
                  |L30.8|
                          DCD      0x40018080
