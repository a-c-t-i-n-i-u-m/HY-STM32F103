; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Obj\stm32f10x_dma.o --depend=.\Obj\stm32f10x_dma.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\FWlib\inc -I.\user -I.\fatfs -I.\fatfs -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\Obj\stm32f10x_dma.crf FWlib\SRC\stm32f10x_dma.c]
                          THUMB

                          AREA ||i.DMA_ClearFlag||, CODE, READONLY, ALIGN=2

                  DMA_ClearFlag PROC
;;;490      */
;;;491    void DMA_ClearFlag(uint32_t DMA_FLAG)
000000  4903              LDR      r1,|L1.16|
;;;492    {
000002  00c2              LSLS     r2,r0,#3
;;;493      /* Check the parameters */
;;;494      assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
;;;495      /* Calculate the used DMA */
;;;496      if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
000004  d502              BPL      |L1.12|
;;;497      {
;;;498        /* Clear the selected DMA flags */
;;;499        DMA2->IFCR = DMA_FLAG;
000006  f8c10404          STR      r0,[r1,#0x404]
;;;500      }
;;;501      else
;;;502      {
;;;503        /* Clear the selected DMA flags */
;;;504        DMA1->IFCR = DMA_FLAG;
;;;505      }
;;;506    }
00000a  4770              BX       lr
                  |L1.12|
00000c  6048              STR      r0,[r1,#4]            ;504
00000e  4770              BX       lr
;;;507    
                          ENDP

                  |L1.16|
                          DCD      0x40020000

                          AREA ||i.DMA_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  DMA_ClearITPendingBit PROC
;;;649      */
;;;650    void DMA_ClearITPendingBit(uint32_t DMA_IT)
000000  4903              LDR      r1,|L2.16|
;;;651    {
000002  00c2              LSLS     r2,r0,#3
;;;652      /* Check the parameters */
;;;653      assert_param(IS_DMA_CLEAR_IT(DMA_IT));
;;;654      /* Calculate the used DMA */
;;;655      if ((DMA_IT & FLAG_Mask) != (uint32_t)RESET)
000004  d502              BPL      |L2.12|
;;;656      {
;;;657        /* Clear the selected DMA interrupt pending bits */
;;;658        DMA2->IFCR = DMA_IT;
000006  f8c10404          STR      r0,[r1,#0x404]
;;;659      }
;;;660      else
;;;661      {
;;;662        /* Clear the selected DMA interrupt pending bits */
;;;663        DMA1->IFCR = DMA_IT;
;;;664      }
;;;665    }
00000a  4770              BX       lr
                  |L2.12|
00000c  6048              STR      r0,[r1,#4]            ;663
00000e  4770              BX       lr
;;;666    
                          ENDP

                  |L2.16|
                          DCD      0x40020000

                          AREA ||i.DMA_Cmd||, CODE, READONLY, ALIGN=1

                  DMA_Cmd PROC
;;;281      */
;;;282    void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;283    {
;;;284      /* Check the parameters */
;;;285      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;286      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;287      if (NewState != DISABLE)
;;;288      {
;;;289        /* Enable the selected DMAy Channelx */
;;;290        DMAy_Channelx->CCR |= CCR_ENABLE_Set;
;;;291      }
;;;292      else
;;;293      {
;;;294        /* Disable the selected DMAy Channelx */
;;;295        DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
000002  6801              LDR      r1,[r0,#0]
000004  d002              BEQ      |L3.12|
000006  f0410101          ORR      r1,r1,#1              ;290
00000a  e001              B        |L3.16|
                  |L3.12|
00000c  f0210101          BIC      r1,r1,#1
                  |L3.16|
000010  6001              STR      r1,[r0,#0]            ;290
;;;296      }
;;;297    }
000012  4770              BX       lr
;;;298    
                          ENDP


                          AREA ||i.DMA_DeInit||, CODE, READONLY, ALIGN=2

                  DMA_DeInit PROC
;;;110      */
;;;111    void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
000000  6802              LDR      r2,[r0,#0]
;;;112    {
;;;113      /* Check the parameters */
;;;114      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;115      /* Disable the selected DMAy Channelx */
;;;116      DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
;;;117      /* Reset DMAy Channelx control register */
;;;118      DMAy_Channelx->CCR  = 0;
000002  2100              MOVS     r1,#0
000004  f0220201          BIC      r2,r2,#1              ;116
000008  6002              STR      r2,[r0,#0]            ;116
00000a  6001              STR      r1,[r0,#0]
;;;119      
;;;120      /* Reset DMAy Channelx remaining bytes register */
;;;121      DMAy_Channelx->CNDTR = 0;
00000c  6041              STR      r1,[r0,#4]
;;;122      
;;;123      /* Reset DMAy Channelx peripheral address register */
;;;124      DMAy_Channelx->CPAR  = 0;
00000e  6081              STR      r1,[r0,#8]
;;;125      
;;;126      /* Reset DMAy Channelx memory address register */
;;;127      DMAy_Channelx->CMAR = 0;
000010  60c1              STR      r1,[r0,#0xc]
;;;128      switch (*(uint32_t*)&DMAy_Channelx)
000012  4b30              LDR      r3,|L4.212|
;;;129      {
;;;130        case DMA1_Channel1_BASE:
;;;131          /* Reset interrupt pending bits for DMA1 Channel1 */
;;;132          DMA1->IFCR |= DMA1_Channel1_IT_Mask;
000014  492f              LDR      r1,|L4.212|
000016  1ac2              SUBS     r2,r0,r3              ;128
000018  3980              SUBS     r1,r1,#0x80
00001a  4298              CMP      r0,r3                 ;128
00001c  d045              BEQ      |L4.170|
00001e  dc18              BGT      |L4.82|
000020  4b2d              LDR      r3,|L4.216|
000022  eba00203          SUB      r2,r0,r3              ;128
000026  4298              CMP      r0,r3                 ;128
000028  d037              BEQ      |L4.154|
00002a  dc0a              BGT      |L4.66|
00002c  4a2b              LDR      r2,|L4.220|
00002e  1880              ADDS     r0,r0,r2              ;128
000030  d02b              BEQ      |L4.138|
000032  2814              CMP      r0,#0x14              ;128
000034  d02d              BEQ      |L4.146|
000036  2828              CMP      r0,#0x28              ;128
000038  d126              BNE      |L4.136|
;;;133          break;
;;;134        case DMA1_Channel2_BASE:
;;;135          /* Reset interrupt pending bits for DMA1 Channel2 */
;;;136          DMA1->IFCR |= DMA1_Channel2_IT_Mask;
;;;137          break;
;;;138        case DMA1_Channel3_BASE:
;;;139          /* Reset interrupt pending bits for DMA1 Channel3 */
;;;140          DMA1->IFCR |= DMA1_Channel3_IT_Mask;
00003a  6848              LDR      r0,[r1,#4]
00003c  f4406070          ORR      r0,r0,#0xf00
;;;141          break;
000040  e036              B        |L4.176|
                  |L4.66|
000042  2a14              CMP      r2,#0x14              ;128
000044  d02d              BEQ      |L4.162|
000046  2a28              CMP      r2,#0x28              ;128
000048  d11e              BNE      |L4.136|
;;;142        case DMA1_Channel4_BASE:
;;;143          /* Reset interrupt pending bits for DMA1 Channel4 */
;;;144          DMA1->IFCR |= DMA1_Channel4_IT_Mask;
;;;145          break;
;;;146        case DMA1_Channel5_BASE:
;;;147          /* Reset interrupt pending bits for DMA1 Channel5 */
;;;148          DMA1->IFCR |= DMA1_Channel5_IT_Mask;
;;;149          break;
;;;150        case DMA1_Channel6_BASE:
;;;151          /* Reset interrupt pending bits for DMA1 Channel6 */
;;;152          DMA1->IFCR |= DMA1_Channel6_IT_Mask;
00004a  6848              LDR      r0,[r1,#4]
00004c  f4400070          ORR      r0,r0,#0xf00000
;;;153          break;
000050  e02e              B        |L4.176|
                  |L4.82|
000052  f5b27f6c          CMP      r2,#0x3b0             ;128
000056  d032              BEQ      |L4.190|
000058  dc0a              BGT      |L4.112|
00005a  f5b27f62          CMP      r2,#0x388             ;128
00005e  d029              BEQ      |L4.180|
000060  f5b27f67          CMP      r2,#0x39c             ;128
000064  d110              BNE      |L4.136|
;;;154        case DMA1_Channel7_BASE:
;;;155          /* Reset interrupt pending bits for DMA1 Channel7 */
;;;156          DMA1->IFCR |= DMA1_Channel7_IT_Mask;
;;;157          break;
;;;158        case DMA2_Channel1_BASE:
;;;159          /* Reset interrupt pending bits for DMA2 Channel1 */
;;;160          DMA2->IFCR |= DMA2_Channel1_IT_Mask;
;;;161          break;
;;;162        case DMA2_Channel2_BASE:
;;;163          /* Reset interrupt pending bits for DMA2 Channel2 */
;;;164          DMA2->IFCR |= DMA2_Channel2_IT_Mask;
000066  f8d10404          LDR      r0,[r1,#0x404]
00006a  f04000f0          ORR      r0,r0,#0xf0
;;;165          break;
00006e  e009              B        |L4.132|
                  |L4.112|
000070  f5b27f71          CMP      r2,#0x3c4             ;128
000074  d028              BEQ      |L4.200|
000076  f5b27f76          CMP      r2,#0x3d8             ;128
00007a  d105              BNE      |L4.136|
;;;166        case DMA2_Channel3_BASE:
;;;167          /* Reset interrupt pending bits for DMA2 Channel3 */
;;;168          DMA2->IFCR |= DMA2_Channel3_IT_Mask;
;;;169          break;
;;;170        case DMA2_Channel4_BASE:
;;;171          /* Reset interrupt pending bits for DMA2 Channel4 */
;;;172          DMA2->IFCR |= DMA2_Channel4_IT_Mask;
;;;173          break;
;;;174        case DMA2_Channel5_BASE:
;;;175          /* Reset interrupt pending bits for DMA2 Channel5 */
;;;176          DMA2->IFCR |= DMA2_Channel5_IT_Mask;
00007c  f8d10404          LDR      r0,[r1,#0x404]
000080  f4402070          ORR      r0,r0,#0xf0000
                  |L4.132|
000084  f8c10404          STR      r0,[r1,#0x404]
                  |L4.136|
;;;177          break;
;;;178          
;;;179        default:
;;;180          break;
;;;181      }
;;;182    }
000088  4770              BX       lr
                  |L4.138|
00008a  6848              LDR      r0,[r1,#4]            ;132
00008c  f040000f          ORR      r0,r0,#0xf            ;132
000090  e00e              B        |L4.176|
                  |L4.146|
000092  6848              LDR      r0,[r1,#4]            ;136
000094  f04000f0          ORR      r0,r0,#0xf0           ;136
000098  e00a              B        |L4.176|
                  |L4.154|
00009a  6848              LDR      r0,[r1,#4]            ;144
00009c  f4404070          ORR      r0,r0,#0xf000         ;144
0000a0  e006              B        |L4.176|
                  |L4.162|
0000a2  6848              LDR      r0,[r1,#4]            ;148
0000a4  f4402070          ORR      r0,r0,#0xf0000        ;148
0000a8  e002              B        |L4.176|
                  |L4.170|
0000aa  6848              LDR      r0,[r1,#4]            ;156
0000ac  f0406070          ORR      r0,r0,#0xf000000      ;156
                  |L4.176|
0000b0  6048              STR      r0,[r1,#4]            ;156
0000b2  4770              BX       lr
                  |L4.180|
0000b4  f8d10404          LDR      r0,[r1,#0x404]        ;160
0000b8  f040000f          ORR      r0,r0,#0xf            ;160
0000bc  e7e2              B        |L4.132|
                  |L4.190|
0000be  f8d10404          LDR      r0,[r1,#0x404]        ;168
0000c2  f4406070          ORR      r0,r0,#0xf00          ;168
0000c6  e7dd              B        |L4.132|
                  |L4.200|
0000c8  f8d10404          LDR      r0,[r1,#0x404]        ;172
0000cc  f4404070          ORR      r0,r0,#0xf000         ;172
0000d0  e7d8              B        |L4.132|
;;;183    
                          ENDP

0000d2  0000              DCW      0x0000
                  |L4.212|
                          DCD      0x40020080
                  |L4.216|
                          DCD      0x40020044
                  |L4.220|
                          DCD      0xbffdfff8

                          AREA ||i.DMA_GetCurrDataCounter||, CODE, READONLY, ALIGN=1

                  DMA_GetCurrDataCounter PROC
;;;340      */
;;;341    uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
000000  6840              LDR      r0,[r0,#4]
;;;342    {
;;;343      /* Check the parameters */
;;;344      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;345      /* Return the number of remaining data units for DMAy Channelx */
;;;346      return ((uint16_t)(DMAy_Channelx->CNDTR));
000002  b280              UXTH     r0,r0
;;;347    }
000004  4770              BX       lr
;;;348    
                          ENDP


                          AREA ||i.DMA_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetFlagStatus PROC
;;;402      */
;;;403    FlagStatus DMA_GetFlagStatus(uint32_t DMA_FLAG)
000000  4601              MOV      r1,r0
;;;404    {
;;;405      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;406      uint32_t tmpreg = 0;
;;;407      /* Check the parameters */
;;;408      assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
;;;409      /* Calculate the used DMA */
;;;410      if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
;;;411      {
;;;412        /* Get DMA2 ISR register value */
;;;413        tmpreg = DMA2->ISR ;
000004  4a05              LDR      r2,|L6.28|
000006  00cb              LSLS     r3,r1,#3              ;405
000008  d502              BPL      |L6.16|
00000a  f8d22400          LDR      r2,[r2,#0x400]
00000e  e000              B        |L6.18|
                  |L6.16|
;;;414      }
;;;415      else
;;;416      {
;;;417        /* Get DMA1 ISR register value */
;;;418        tmpreg = DMA1->ISR ;
000010  6812              LDR      r2,[r2,#0]
                  |L6.18|
;;;419      }
;;;420      /* Check the status of the specified DMA flag */
;;;421      if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
000012  420a              TST      r2,r1
000014  d000              BEQ      |L6.24|
;;;422      {
;;;423        /* DMA_FLAG is set */
;;;424        bitstatus = SET;
000016  2001              MOVS     r0,#1
                  |L6.24|
;;;425      }
;;;426      else
;;;427      {
;;;428        /* DMA_FLAG is reset */
;;;429        bitstatus = RESET;
;;;430      }
;;;431      
;;;432      /* Return the DMA_FLAG status */
;;;433      return  bitstatus;
;;;434    }
000018  4770              BX       lr
;;;435    
                          ENDP

00001a  0000              DCW      0x0000
                  |L6.28|
                          DCD      0x40020000

                          AREA ||i.DMA_GetITStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetITStatus PROC
;;;562      */
;;;563    ITStatus DMA_GetITStatus(uint32_t DMA_IT)
000000  4601              MOV      r1,r0
;;;564    {
;;;565      ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;566      uint32_t tmpreg = 0;
;;;567      /* Check the parameters */
;;;568      assert_param(IS_DMA_GET_IT(DMA_IT));
;;;569      /* Calculate the used DMA */
;;;570      if ((DMA_IT & FLAG_Mask) != (uint32_t)RESET)
;;;571      {
;;;572        /* Get DMA2 ISR register value */
;;;573        tmpreg = DMA2->ISR ;
000004  4a05              LDR      r2,|L7.28|
000006  00cb              LSLS     r3,r1,#3              ;565
000008  d502              BPL      |L7.16|
00000a  f8d22400          LDR      r2,[r2,#0x400]
00000e  e000              B        |L7.18|
                  |L7.16|
;;;574      }
;;;575      else
;;;576      {
;;;577        /* Get DMA1 ISR register value */
;;;578        tmpreg = DMA1->ISR ;
000010  6812              LDR      r2,[r2,#0]
                  |L7.18|
;;;579      }
;;;580      /* Check the status of the specified DMA interrupt */
;;;581      if ((tmpreg & DMA_IT) != (uint32_t)RESET)
000012  420a              TST      r2,r1
000014  d000              BEQ      |L7.24|
;;;582      {
;;;583        /* DMA_IT is set */
;;;584        bitstatus = SET;
000016  2001              MOVS     r0,#1
                  |L7.24|
;;;585      }
;;;586      else
;;;587      {
;;;588        /* DMA_IT is reset */
;;;589        bitstatus = RESET;
;;;590      }
;;;591      /* Return the DMA_IT status */
;;;592      return  bitstatus;
;;;593    }
000018  4770              BX       lr
;;;594    
                          ENDP

00001a  0000              DCW      0x0000
                  |L7.28|
                          DCD      0x40020000

                          AREA ||i.DMA_ITConfig||, CODE, READONLY, ALIGN=1

                  DMA_ITConfig PROC
;;;313      */
;;;314    void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;315    {
;;;316      /* Check the parameters */
;;;317      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;318      assert_param(IS_DMA_CONFIG_IT(DMA_IT));
;;;319      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;320      if (NewState != DISABLE)
;;;321      {
;;;322        /* Enable the selected DMA interrupts */
;;;323        DMAy_Channelx->CCR |= DMA_IT;
;;;324      }
;;;325      else
;;;326      {
;;;327        /* Disable the selected DMA interrupts */
;;;328        DMAy_Channelx->CCR &= ~DMA_IT;
000002  6802              LDR      r2,[r0,#0]
000004  d001              BEQ      |L8.10|
000006  430a              ORRS     r2,r2,r1              ;323
000008  e000              B        |L8.12|
                  |L8.10|
00000a  438a              BICS     r2,r2,r1
                  |L8.12|
00000c  6002              STR      r2,[r0,#0]            ;323
;;;329      }
;;;330    }
00000e  4770              BX       lr
;;;331    
                          ENDP


                          AREA ||i.DMA_Init||, CODE, READONLY, ALIGN=1

                  DMA_Init PROC
;;;194      */
;;;195    void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;196    {
;;;197      uint32_t tmpreg = 0;
;;;198      /* Check the parameters */
;;;199      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;200      assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
;;;201      assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
;;;202      assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
;;;203      assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));   
;;;204      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
;;;205      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
;;;206      assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
;;;207      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
;;;208      assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
;;;209    /*--------------------------- DMAy Channelx CCR Configuration -----------------*/
;;;210      /* Get the DMAy_Channelx CCR value */
;;;211      tmpreg = DMAy_Channelx->CCR;
000002  6803              LDR      r3,[r0,#0]
;;;212      /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;213      tmpreg &= CCR_CLEAR_Mask;
000004  f64772f0          MOV      r2,#0x7ff0
000008  4393              BICS     r3,r3,r2
;;;214      /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
;;;215      /* Set DIR bit according to DMA_DIR value */
;;;216      /* Set CIRC bit according to DMA_Mode value */
;;;217      /* Set PINC bit according to DMA_PeripheralInc value */
;;;218      /* Set MINC bit according to DMA_MemoryInc value */
;;;219      /* Set PSIZE bits according to DMA_PeripheralDataSize value */
;;;220      /* Set MSIZE bits according to DMA_MemoryDataSize value */
;;;221      /* Set PL bits according to DMA_Priority value */
;;;222      /* Set the MEM2MEM bit according to DMA_M2M value */
;;;223      tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
00000a  e9d14604          LDRD     r4,r6,[r1,#0x10]
00000e  6a0d              LDR      r5,[r1,#0x20]
000010  688a              LDR      r2,[r1,#8]
000012  4334              ORRS     r4,r4,r6
000014  432a              ORRS     r2,r2,r5
000016  4322              ORRS     r2,r2,r4
000018  e9d15406          LDRD     r5,r4,[r1,#0x18]
00001c  432a              ORRS     r2,r2,r5
00001e  4322              ORRS     r2,r2,r4
000020  e9d15409          LDRD     r5,r4,[r1,#0x24]
000024  432a              ORRS     r2,r2,r5
000026  4322              ORRS     r2,r2,r4
000028  431a              ORRS     r2,r2,r3
;;;224                DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
;;;225                DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
;;;226                DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
;;;227      /* Write to DMAy Channelx CCR */
;;;228      DMAy_Channelx->CCR = tmpreg;
00002a  6002              STR      r2,[r0,#0]
;;;229    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;230      /* Write to DMAy Channelx CNDTR */
;;;231      DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
00002c  68ca              LDR      r2,[r1,#0xc]
00002e  6042              STR      r2,[r0,#4]
;;;232    /*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
;;;233      /* Write to DMAy Channelx CPAR */
;;;234      DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
000030  680a              LDR      r2,[r1,#0]
000032  6082              STR      r2,[r0,#8]
;;;235    /*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
;;;236      /* Write to DMAy Channelx CMAR */
;;;237      DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
000034  6849              LDR      r1,[r1,#4]
000036  60c1              STR      r1,[r0,#0xc]
;;;238    }
000038  bd70              POP      {r4-r6,pc}
;;;239    
                          ENDP


                          AREA ||i.DMA_StructInit||, CODE, READONLY, ALIGN=1

                  DMA_StructInit PROC
;;;245      */
;;;246    void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
000000  2100              MOVS     r1,#0
;;;247    {
;;;248    /*-------------- Reset DMA init structure parameters values ------------------*/
;;;249      /* Initialize the DMA_PeripheralBaseAddr member */
;;;250      DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
;;;251      /* Initialize the DMA_MemoryBaseAddr member */
;;;252      DMA_InitStruct->DMA_MemoryBaseAddr = 0;
000002  6001              STR      r1,[r0,#0]
;;;253      /* Initialize the DMA_DIR member */
;;;254      DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
000004  6041              STR      r1,[r0,#4]
;;;255      /* Initialize the DMA_BufferSize member */
;;;256      DMA_InitStruct->DMA_BufferSize = 0;
000006  6081              STR      r1,[r0,#8]
;;;257      /* Initialize the DMA_PeripheralInc member */
;;;258      DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000008  60c1              STR      r1,[r0,#0xc]
;;;259      /* Initialize the DMA_MemoryInc member */
;;;260      DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
00000a  6101              STR      r1,[r0,#0x10]
;;;261      /* Initialize the DMA_PeripheralDataSize member */
;;;262      DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
00000c  6141              STR      r1,[r0,#0x14]
;;;263      /* Initialize the DMA_MemoryDataSize member */
;;;264      DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
00000e  6181              STR      r1,[r0,#0x18]
;;;265      /* Initialize the DMA_Mode member */
;;;266      DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
000010  61c1              STR      r1,[r0,#0x1c]
;;;267      /* Initialize the DMA_Priority member */
;;;268      DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
000012  6201              STR      r1,[r0,#0x20]
;;;269      /* Initialize the DMA_M2M member */
;;;270      DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
000014  6241              STR      r1,[r0,#0x24]
000016  6281              STR      r1,[r0,#0x28]
;;;271    }
000018  4770              BX       lr
;;;272    
                          ENDP

