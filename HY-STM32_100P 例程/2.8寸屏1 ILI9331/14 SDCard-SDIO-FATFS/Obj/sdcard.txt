; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Obj\sdcard.o --depend=.\Obj\sdcard.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\FWlib\inc -I.\user -I.\fatfs -I.\fatfs -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\Obj\sdcard.crf user\sdcard.c]
                          THUMB

                          AREA ||i.CmdResp1Error||, CODE, READONLY, ALIGN=2

                  CmdResp1Error PROC
;;;2170   *******************************************************************************/
;;;2171   static SD_Error CmdResp1Error(u8 cmd)
000000  b570              PUSH     {r4-r6,lr}
;;;2172   {
;;;2173     SD_Error errorstatus = SD_OK;
;;;2174     u32 status;
;;;2175     u32 response_r1;
;;;2176   
;;;2177     status = SDIO->STA;
000002  4937              LDR      r1,|L1.224|
000004  4605              MOV      r5,r0                 ;2172
000006  242a              MOVS     r4,#0x2a              ;2173
                  |L1.8|
;;;2178   
;;;2179     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
;;;2180     {
;;;2181       status = SDIO->STA;
000008  6b48              LDR      r0,[r1,#0x34]
00000a  f0100f45          TST      r0,#0x45              ;2179
00000e  d0fb              BEQ      |L1.8|
;;;2182     }
;;;2183   
;;;2184     if (status & SDIO_FLAG_CTIMEOUT)
000010  0741              LSLS     r1,r0,#29
000012  d502              BPL      |L1.26|
;;;2185     {
;;;2186       errorstatus = SD_CMD_RSP_TIMEOUT;
000014  2403              MOVS     r4,#3
;;;2187       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000016  2004              MOVS     r0,#4
;;;2188       return(errorstatus);
000018  e003              B        |L1.34|
                  |L1.26|
;;;2189     }
;;;2190     else if (status & SDIO_FLAG_CCRCFAIL)
00001a  07c0              LSLS     r0,r0,#31
00001c  d004              BEQ      |L1.40|
;;;2191     {
;;;2192       errorstatus = SD_CMD_CRC_FAIL;
00001e  2401              MOVS     r4,#1
;;;2193       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
000020  4620              MOV      r0,r4
                  |L1.34|
000022  f7fffffe          BL       SDIO_ClearFlag
000026  e059              B        |L1.220|
                  |L1.40|
;;;2194       return(errorstatus);
;;;2195     }
;;;2196   
;;;2197     /* Check response received is of desired command */
;;;2198     if (SDIO_GetCommandResponse() != cmd)
000028  f7fffffe          BL       SDIO_GetCommandResponse
00002c  42a8              CMP      r0,r5
00002e  d12b              BNE      |L1.136|
;;;2199     {
;;;2200       errorstatus = SD_ILLEGAL_CMD;
;;;2201       return(errorstatus);
;;;2202     }
;;;2203   
;;;2204     /* Clear all the static flags */
;;;2205     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
000030  f24050ff          MOV      r0,#0x5ff
000034  f7fffffe          BL       SDIO_ClearFlag
;;;2206   
;;;2207     /* We have received response, retrieve it for analysis  */
;;;2208     response_r1 = SDIO_GetResponse(SDIO_RESP1);
000038  2000              MOVS     r0,#0
00003a  f7fffffe          BL       SDIO_GetResponse
;;;2209   
;;;2210     if ((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
00003e  4929              LDR      r1,|L1.228|
000040  4208              TST      r0,r1
000042  d04b              BEQ      |L1.220|
;;;2211     {
;;;2212       return(errorstatus);
;;;2213     }
;;;2214   
;;;2215     if (response_r1 & SD_OCR_ADDR_OUT_OF_RANGE)
000044  2800              CMP      r0,#0
000046  da01              BGE      |L1.76|
;;;2216     {
;;;2217       return(SD_ADDR_OUT_OF_RANGE);
000048  201c              MOVS     r0,#0x1c
;;;2218     }
;;;2219   
;;;2220     if (response_r1 & SD_OCR_ADDR_MISALIGNED)
;;;2221     {
;;;2222       return(SD_ADDR_MISALIGNED);
;;;2223     }
;;;2224   
;;;2225     if (response_r1 & SD_OCR_BLOCK_LEN_ERR)
;;;2226     {
;;;2227       return(SD_BLOCK_LEN_ERR);
;;;2228     }
;;;2229   
;;;2230     if (response_r1 & SD_OCR_ERASE_SEQ_ERR)
;;;2231     {
;;;2232       return(SD_ERASE_SEQ_ERR);
;;;2233     }
;;;2234   
;;;2235     if (response_r1 & SD_OCR_BAD_ERASE_PARAM)
;;;2236     {
;;;2237       return(SD_BAD_ERASE_PARAM);
;;;2238     }
;;;2239   
;;;2240     if (response_r1 & SD_OCR_WRITE_PROT_VIOLATION)
;;;2241     {
;;;2242       return(SD_WRITE_PROT_VIOLATION);
;;;2243     }
;;;2244   
;;;2245     if (response_r1 & SD_OCR_LOCK_UNLOCK_FAILED)
;;;2246     {
;;;2247       return(SD_LOCK_UNLOCK_FAILED);
;;;2248     }
;;;2249   
;;;2250     if (response_r1 & SD_OCR_COM_CRC_FAILED)
;;;2251     {
;;;2252       return(SD_COM_CRC_FAILED);
;;;2253     }
;;;2254   
;;;2255     if (response_r1 & SD_OCR_ILLEGAL_CMD)
;;;2256     {
;;;2257       return(SD_ILLEGAL_CMD);
;;;2258     }
;;;2259   
;;;2260     if (response_r1 & SD_OCR_CARD_ECC_FAILED)
;;;2261     {
;;;2262       return(SD_CARD_ECC_FAILED);
;;;2263     }
;;;2264   
;;;2265     if (response_r1 & SD_OCR_CC_ERROR)
;;;2266     {
;;;2267       return(SD_CC_ERROR);
;;;2268     }
;;;2269   
;;;2270     if (response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
;;;2271     {
;;;2272       return(SD_GENERAL_UNKNOWN_ERROR);
;;;2273     }
;;;2274   
;;;2275     if (response_r1 & SD_OCR_STREAM_READ_UNDERRUN)
;;;2276     {
;;;2277       return(SD_STREAM_READ_UNDERRUN);
;;;2278     }
;;;2279   
;;;2280     if (response_r1 & SD_OCR_STREAM_WRITE_OVERRUN)
;;;2281     {
;;;2282       return(SD_STREAM_WRITE_OVERRUN);
;;;2283     }
;;;2284   
;;;2285     if (response_r1 & SD_OCR_CID_CSD_OVERWRIETE)
;;;2286     {
;;;2287       return(SD_CID_CSD_OVERWRITE);
;;;2288     }
;;;2289   
;;;2290     if (response_r1 & SD_OCR_WP_ERASE_SKIP)
;;;2291     {
;;;2292       return(SD_WP_ERASE_SKIP);
;;;2293     }
;;;2294   
;;;2295     if (response_r1 & SD_OCR_CARD_ECC_DISABLED)
;;;2296     {
;;;2297       return(SD_CARD_ECC_DISABLED);
;;;2298     }
;;;2299   
;;;2300     if (response_r1 & SD_OCR_ERASE_RESET)
;;;2301     {
;;;2302       return(SD_ERASE_RESET);
;;;2303     }
;;;2304   
;;;2305     if (response_r1 & SD_OCR_AKE_SEQ_ERROR)
;;;2306     {
;;;2307       return(SD_AKE_SEQ_ERROR);
;;;2308     }
;;;2309     return(errorstatus);
;;;2310   }
00004a  bd70              POP      {r4-r6,pc}
                  |L1.76|
00004c  0041              LSLS     r1,r0,#1              ;2220
00004e  d501              BPL      |L1.84|
000050  2009              MOVS     r0,#9                 ;2222
000052  bd70              POP      {r4-r6,pc}
                  |L1.84|
000054  0081              LSLS     r1,r0,#2
000056  d501              BPL      |L1.92|
000058  200a              MOVS     r0,#0xa               ;2227
00005a  bd70              POP      {r4-r6,pc}
                  |L1.92|
00005c  00c1              LSLS     r1,r0,#3
00005e  d501              BPL      |L1.100|
000060  200b              MOVS     r0,#0xb               ;2232
000062  bd70              POP      {r4-r6,pc}
                  |L1.100|
000064  0101              LSLS     r1,r0,#4
000066  d501              BPL      |L1.108|
000068  200c              MOVS     r0,#0xc               ;2237
00006a  bd70              POP      {r4-r6,pc}
                  |L1.108|
00006c  0141              LSLS     r1,r0,#5              ;2240
00006e  d501              BPL      |L1.116|
000070  200d              MOVS     r0,#0xd               ;2242
000072  bd70              POP      {r4-r6,pc}
                  |L1.116|
000074  01c1              LSLS     r1,r0,#7              ;2245
000076  d501              BPL      |L1.124|
000078  200e              MOVS     r0,#0xe               ;2247
00007a  bd70              POP      {r4-r6,pc}
                  |L1.124|
00007c  0201              LSLS     r1,r0,#8              ;2250
00007e  d501              BPL      |L1.132|
000080  200f              MOVS     r0,#0xf               ;2252
000082  bd70              POP      {r4-r6,pc}
                  |L1.132|
000084  0241              LSLS     r1,r0,#9              ;2255
000086  d501              BPL      |L1.140|
                  |L1.136|
000088  2010              MOVS     r0,#0x10              ;2257
00008a  bd70              POP      {r4-r6,pc}
                  |L1.140|
00008c  0281              LSLS     r1,r0,#10             ;2260
00008e  d501              BPL      |L1.148|
000090  2011              MOVS     r0,#0x11              ;2262
000092  bd70              POP      {r4-r6,pc}
                  |L1.148|
000094  02c1              LSLS     r1,r0,#11             ;2265
000096  d501              BPL      |L1.156|
000098  2012              MOVS     r0,#0x12              ;2267
00009a  bd70              POP      {r4-r6,pc}
                  |L1.156|
00009c  0301              LSLS     r1,r0,#12             ;2270
00009e  d501              BPL      |L1.164|
0000a0  2013              MOVS     r0,#0x13              ;2272
0000a2  bd70              POP      {r4-r6,pc}
                  |L1.164|
0000a4  0341              LSLS     r1,r0,#13             ;2275
0000a6  d501              BPL      |L1.172|
0000a8  2014              MOVS     r0,#0x14              ;2277
0000aa  bd70              POP      {r4-r6,pc}
                  |L1.172|
0000ac  0381              LSLS     r1,r0,#14             ;2280
0000ae  d501              BPL      |L1.180|
0000b0  2015              MOVS     r0,#0x15              ;2282
0000b2  bd70              POP      {r4-r6,pc}
                  |L1.180|
0000b4  03c1              LSLS     r1,r0,#15             ;2285
0000b6  d501              BPL      |L1.188|
0000b8  2016              MOVS     r0,#0x16              ;2287
0000ba  bd70              POP      {r4-r6,pc}
                  |L1.188|
0000bc  0401              LSLS     r1,r0,#16             ;2290
0000be  d501              BPL      |L1.196|
0000c0  2017              MOVS     r0,#0x17              ;2292
0000c2  bd70              POP      {r4-r6,pc}
                  |L1.196|
0000c4  0441              LSLS     r1,r0,#17             ;2295
0000c6  d501              BPL      |L1.204|
0000c8  2018              MOVS     r0,#0x18              ;2297
0000ca  bd70              POP      {r4-r6,pc}
                  |L1.204|
0000cc  0481              LSLS     r1,r0,#18             ;2300
0000ce  d501              BPL      |L1.212|
0000d0  2019              MOVS     r0,#0x19              ;2302
0000d2  bd70              POP      {r4-r6,pc}
                  |L1.212|
0000d4  0700              LSLS     r0,r0,#28             ;2305
0000d6  d501              BPL      |L1.220|
0000d8  201a              MOVS     r0,#0x1a              ;2307
0000da  bd70              POP      {r4-r6,pc}
                  |L1.220|
0000dc  4620              MOV      r0,r4                 ;2309
0000de  bd70              POP      {r4-r6,pc}
;;;2311   
                          ENDP

                  |L1.224|
                          DCD      0x40018000
                  |L1.228|
                          DCD      0xfdffe008

                          AREA ||i.CmdResp2Error||, CODE, READONLY, ALIGN=2

                  CmdResp2Error PROC
;;;2350   *******************************************************************************/
;;;2351   static SD_Error CmdResp2Error(void)
000000  b510              PUSH     {r4,lr}
;;;2352   {
;;;2353     SD_Error errorstatus = SD_OK;
;;;2354     u32 status;
;;;2355   
;;;2356     status = SDIO->STA;
000002  480b              LDR      r0,|L2.48|
000004  242a              MOVS     r4,#0x2a              ;2353
                  |L2.6|
;;;2357   
;;;2358     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
;;;2359     {
;;;2360       status = SDIO->STA;
000006  6b41              LDR      r1,[r0,#0x34]
000008  f0110f45          TST      r1,#0x45              ;2358
00000c  d0fb              BEQ      |L2.6|
;;;2361     }
;;;2362   
;;;2363     if (status & SDIO_FLAG_CTIMEOUT)
00000e  0748              LSLS     r0,r1,#29
000010  d502              BPL      |L2.24|
;;;2364     {
;;;2365       errorstatus = SD_CMD_RSP_TIMEOUT;
000012  2403              MOVS     r4,#3
;;;2366       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000014  2004              MOVS     r0,#4
;;;2367       return(errorstatus);
000016  e003              B        |L2.32|
                  |L2.24|
;;;2368     }
;;;2369     else if (status & SDIO_FLAG_CCRCFAIL)
000018  07c8              LSLS     r0,r1,#31
00001a  d005              BEQ      |L2.40|
;;;2370     {
;;;2371       errorstatus = SD_CMD_CRC_FAIL;
00001c  2401              MOVS     r4,#1
;;;2372       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
00001e  4620              MOV      r0,r4
                  |L2.32|
;;;2373       return(errorstatus);
;;;2374     }
;;;2375   
;;;2376     /* Clear all the static flags */
;;;2377     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
000020  f7fffffe          BL       SDIO_ClearFlag
;;;2378   
;;;2379     return(errorstatus);
000024  4620              MOV      r0,r4
;;;2380   }
000026  bd10              POP      {r4,pc}
                  |L2.40|
000028  f24050ff          MOV      r0,#0x5ff             ;2377
00002c  e7f8              B        |L2.32|
;;;2381   
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
                          DCD      0x40018000

                          AREA ||i.CmdResp6Error||, CODE, READONLY, ALIGN=2

                  CmdResp6Error PROC
;;;2391   *******************************************************************************/
;;;2392   static SD_Error CmdResp6Error(u8 cmd, u16 *prca)
000000  b570              PUSH     {r4-r6,lr}
;;;2393   {
000002  460c              MOV      r4,r1
;;;2394     SD_Error errorstatus = SD_OK;
;;;2395     u32 status;
;;;2396     u32 response_r1;
;;;2397   
;;;2398     status = SDIO->STA;
000004  4919              LDR      r1,|L3.108|
000006  4606              MOV      r6,r0                 ;2393
000008  252a              MOVS     r5,#0x2a              ;2394
                  |L3.10|
;;;2399   
;;;2400     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
;;;2401     {
;;;2402       status = SDIO->STA;
00000a  6b48              LDR      r0,[r1,#0x34]
00000c  f0100f45          TST      r0,#0x45              ;2400
000010  d0fb              BEQ      |L3.10|
;;;2403     }
;;;2404   
;;;2405     if (status & SDIO_FLAG_CTIMEOUT)
000012  0741              LSLS     r1,r0,#29
000014  d502              BPL      |L3.28|
;;;2406     {
;;;2407       errorstatus = SD_CMD_RSP_TIMEOUT;
000016  2403              MOVS     r4,#3
;;;2408       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000018  2004              MOVS     r0,#4
;;;2409       return(errorstatus);
00001a  e003              B        |L3.36|
                  |L3.28|
;;;2410     }
;;;2411     else if (status & SDIO_FLAG_CCRCFAIL)
00001c  07c0              LSLS     r0,r0,#31
00001e  d005              BEQ      |L3.44|
;;;2412     {
;;;2413       errorstatus = SD_CMD_CRC_FAIL;
000020  2401              MOVS     r4,#1
;;;2414       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
000022  4620              MOV      r0,r4
                  |L3.36|
000024  f7fffffe          BL       SDIO_ClearFlag
;;;2415       return(errorstatus);
000028  4620              MOV      r0,r4
;;;2416     }
;;;2417   
;;;2418     /* Check response received is of desired command */
;;;2419     if (SDIO_GetCommandResponse() != cmd)
;;;2420     {
;;;2421       errorstatus = SD_ILLEGAL_CMD;
;;;2422       return(errorstatus);
;;;2423     }
;;;2424   
;;;2425     /* Clear all the static flags */
;;;2426     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2427   
;;;2428     /* We have received response, retrieve it.  */
;;;2429     response_r1 = SDIO_GetResponse(SDIO_RESP1);
;;;2430   
;;;2431     if (SD_ALLZERO == (response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)))
;;;2432     {
;;;2433       *prca = (u16) (response_r1 >> 16);
;;;2434       return(errorstatus);
;;;2435     }
;;;2436   
;;;2437     if (response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR)
;;;2438     {
;;;2439       return(SD_GENERAL_UNKNOWN_ERROR);
;;;2440     }
;;;2441   
;;;2442     if (response_r1 & SD_R6_ILLEGAL_CMD)
;;;2443     {
;;;2444       return(SD_ILLEGAL_CMD);
;;;2445     }
;;;2446   
;;;2447     if (response_r1 & SD_R6_COM_CRC_FAILED)
;;;2448     {
;;;2449       return(SD_COM_CRC_FAILED);
;;;2450     }
;;;2451   
;;;2452     return(errorstatus);
;;;2453   }
00002a  bd70              POP      {r4-r6,pc}
                  |L3.44|
00002c  f7fffffe          BL       SDIO_GetCommandResponse
000030  42b0              CMP      r0,r6                 ;2419
000032  d113              BNE      |L3.92|
000034  f24050ff          MOV      r0,#0x5ff             ;2426
000038  f7fffffe          BL       SDIO_ClearFlag
00003c  2000              MOVS     r0,#0                 ;2429
00003e  f7fffffe          BL       SDIO_GetResponse
000042  f4104f60          TST      r0,#0xe000            ;2431
000046  d003              BEQ      |L3.80|
000048  0481              LSLS     r1,r0,#18             ;2437
00004a  d505              BPL      |L3.88|
00004c  2013              MOVS     r0,#0x13              ;2439
00004e  bd70              POP      {r4-r6,pc}
                  |L3.80|
000050  ea4f4010          LSR      r0,r0,#16             ;2433
000054  8020              STRH     r0,[r4,#0]            ;2433
000056  e007              B        |L3.104|
                  |L3.88|
000058  0441              LSLS     r1,r0,#17             ;2442
00005a  d501              BPL      |L3.96|
                  |L3.92|
00005c  2010              MOVS     r0,#0x10              ;2444
00005e  bd70              POP      {r4-r6,pc}
                  |L3.96|
000060  0400              LSLS     r0,r0,#16             ;2447
000062  d501              BPL      |L3.104|
000064  200f              MOVS     r0,#0xf               ;2449
000066  bd70              POP      {r4-r6,pc}
                  |L3.104|
000068  4628              MOV      r0,r5                 ;2452
00006a  bd70              POP      {r4-r6,pc}
;;;2454   
                          ENDP

                  |L3.108|
                          DCD      0x40018000

                          AREA ||i.DMA_RxConfiguration||, CODE, READONLY, ALIGN=2

                  DMA_RxConfiguration PROC
;;;2932   *******************************************************************************/
;;;2933   static void DMA_RxConfiguration(u32 *BufferDST, u32 BufferSize)
000000  b570              PUSH     {r4-r6,lr}
;;;2934   {
000002  4605              MOV      r5,r0
000004  b08c              SUB      sp,sp,#0x30
000006  460c              MOV      r4,r1
;;;2935     DMA_InitTypeDef DMA_InitStructure;
;;;2936   
;;;2937     DMA_ClearFlag(DMA2_FLAG_TC4 | DMA2_FLAG_TE4 | DMA2_FLAG_HT4 | DMA2_FLAG_GL4);
000008  4811              LDR      r0,|L4.80|
00000a  f7fffffe          BL       DMA_ClearFlag
;;;2938   
;;;2939     /* DMA2 Channel4 disable */
;;;2940     DMA_Cmd(DMA2_Channel4, DISABLE);
00000e  4e11              LDR      r6,|L4.84|
000010  2100              MOVS     r1,#0
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       DMA_Cmd
;;;2941   
;;;2942     /* DMA2 Channel4 Config */
;;;2943     DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)SDIO_FIFO_Address;
000018  480f              LDR      r0,|L4.88|
00001a  e9cd0500          STRD     r0,r5,[sp,#0]
;;;2944     DMA_InitStructure.DMA_MemoryBaseAddr = (u32)BufferDST;
;;;2945     DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
00001e  2000              MOVS     r0,#0
;;;2946     DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
000020  08a1              LSRS     r1,r4,#2
000022  e9cd0102          STRD     r0,r1,[sp,#8]
;;;2947     DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
;;;2948     DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
000026  2180              MOVS     r1,#0x80
000028  e9cd0104          STRD     r0,r1,[sp,#0x10]
;;;2949     DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
00002c  0089              LSLS     r1,r1,#2
;;;2950     DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
00002e  9106              STR      r1,[sp,#0x18]
000030  0089              LSLS     r1,r1,#2
000032  e9cd1007          STRD     r1,r0,[sp,#0x1c]
;;;2951     DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
;;;2952     DMA_InitStructure.DMA_Priority = DMA_Priority_High;
000036  0089              LSLS     r1,r1,#2
000038  e9cd1009          STRD     r1,r0,[sp,#0x24]
;;;2953     DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
;;;2954     DMA_Init(DMA2_Channel4, &DMA_InitStructure);
00003c  4669              MOV      r1,sp
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       DMA_Init
;;;2955   
;;;2956     /* DMA2 Channel4 enable */
;;;2957     DMA_Cmd(DMA2_Channel4, ENABLE);
000044  2101              MOVS     r1,#1
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       DMA_Cmd
;;;2958   }
00004c  b00c              ADD      sp,sp,#0x30
00004e  bd70              POP      {r4-r6,pc}
;;;2959   
                          ENDP

                  |L4.80|
                          DCD      0x1000f000
                  |L4.84|
                          DCD      0x40020444
                  |L4.88|
                          DCD      0x40018080

                          AREA ||i.DMA_TxConfiguration||, CODE, READONLY, ALIGN=2

                  DMA_TxConfiguration PROC
;;;2897   *******************************************************************************/
;;;2898   static void DMA_TxConfiguration(u32 *BufferSRC, u32 BufferSize)
000000  b570              PUSH     {r4-r6,lr}
;;;2899   {
000002  4604              MOV      r4,r0
000004  b08c              SUB      sp,sp,#0x30
000006  460d              MOV      r5,r1
;;;2900     DMA_InitTypeDef DMA_InitStructure;
;;;2901   
;;;2902     DMA_ClearFlag(DMA2_FLAG_TC4 | DMA2_FLAG_TE4 | DMA2_FLAG_HT4 | DMA2_FLAG_GL4);
000008  4812              LDR      r0,|L5.84|
00000a  f7fffffe          BL       DMA_ClearFlag
;;;2903   
;;;2904     /* DMA2 Channel4 disable */
;;;2905     DMA_Cmd(DMA2_Channel4, DISABLE);
00000e  4e12              LDR      r6,|L5.88|
000010  2100              MOVS     r1,#0
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       DMA_Cmd
;;;2906   
;;;2907     /* DMA2 Channel4 Config */
;;;2908     DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)SDIO_FIFO_Address;
000018  4810              LDR      r0,|L5.92|
00001a  e9cd0400          STRD     r0,r4,[sp,#0]
;;;2909     DMA_InitStructure.DMA_MemoryBaseAddr = (u32)BufferSRC;
;;;2910     DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
00001e  2010              MOVS     r0,#0x10
;;;2911     DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
000020  9002              STR      r0,[sp,#8]
000022  08a8              LSRS     r0,r5,#2
;;;2912     DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000024  9003              STR      r0,[sp,#0xc]
000026  2000              MOVS     r0,#0
;;;2913     DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
000028  2180              MOVS     r1,#0x80
00002a  e9cd0104          STRD     r0,r1,[sp,#0x10]
;;;2914     DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
00002e  0089              LSLS     r1,r1,#2
;;;2915     DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
000030  9106              STR      r1,[sp,#0x18]
000032  0089              LSLS     r1,r1,#2
000034  e9cd1007          STRD     r1,r0,[sp,#0x1c]
;;;2916     DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
;;;2917     DMA_InitStructure.DMA_Priority = DMA_Priority_High;
000038  0089              LSLS     r1,r1,#2
00003a  e9cd1009          STRD     r1,r0,[sp,#0x24]
;;;2918     DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
;;;2919     DMA_Init(DMA2_Channel4, &DMA_InitStructure);
00003e  4669              MOV      r1,sp
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       DMA_Init
;;;2920   
;;;2921     /* DMA2 Channel4 enable */
;;;2922     DMA_Cmd(DMA2_Channel4, ENABLE);
000046  2101              MOVS     r1,#1
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       DMA_Cmd
;;;2923   }
00004e  b00c              ADD      sp,sp,#0x30
000050  bd70              POP      {r4-r6,pc}
;;;2924   
                          ENDP

000052  0000              DCW      0x0000
                  |L5.84|
                          DCD      0x1000f000
                  |L5.88|
                          DCD      0x40020444
                  |L5.92|
                          DCD      0x40018080

                          AREA ||i.FindSCR||, CODE, READONLY, ALIGN=2

                  FindSCR PROC
;;;2740   *******************************************************************************/
;;;2741   static SD_Error FindSCR(u16 rca, u32 *pscr)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;2742   {
;;;2743     u32 index = 0;
000004  2600              MOVS     r6,#0
;;;2744     SD_Error errorstatus = SD_OK;
;;;2745     u32 tempscr[2] = {0, 0};
;;;2746   
;;;2747     /* Set Block Size To 8 Bytes */
;;;2748     /* Send CMD55 APP_CMD with argument as card's RCA */
;;;2749     SDIO_CmdInitStructure.SDIO_Argument = (u32)8;
000006  4c48              LDR      r4,|L6.296|
000008  9600              STR      r6,[sp,#0]            ;2745
00000a  f04f0a08          MOV      r10,#8
00000e  9601              STR      r6,[sp,#4]
;;;2750     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
000010  2010              MOVS     r0,#0x10
;;;2751     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
000012  f04f0840          MOV      r8,#0x40
;;;2752     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2753     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000016  f8c4a000          STR      r10,[r4,#0]  ; SDIO_CmdInitStructure
00001a  e9c40801          STRD     r0,r8,[r4,#4]
00001e  f44f6980          MOV      r9,#0x400
;;;2754     SDIO_SendCommand(&SDIO_CmdInitStructure);
000022  e9c46903          STRD     r6,r9,[r4,#0xc]
000026  460f              MOV      r7,r1                 ;2742
000028  4635              MOV      r5,r6                 ;2745
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       SDIO_SendCommand
;;;2755   
;;;2756     errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
000030  2010              MOVS     r0,#0x10
000032  f7fffffe          BL       CmdResp1Error
;;;2757   
;;;2758     if (errorstatus != SD_OK)
000036  282a              CMP      r0,#0x2a
000038  d140              BNE      |L6.188|
;;;2759     {
;;;2760       return(errorstatus);
;;;2761     }
;;;2762   
;;;2763     /* Send CMD55 APP_CMD with argument as card's RCA */
;;;2764     SDIO_CmdInitStructure.SDIO_Argument = (u32) RCA << 16;
00003a  483c              LDR      r0,|L6.300|
00003c  6880              LDR      r0,[r0,#8]  ; RCA
00003e  0400              LSLS     r0,r0,#16
;;;2765     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
000040  6020              STR      r0,[r4,#0]  ; SDIO_CmdInitStructure
000042  2037              MOVS     r0,#0x37
000044  e9c40801          STRD     r0,r8,[r4,#4]
;;;2766     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2767     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2768     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2769     SDIO_SendCommand(&SDIO_CmdInitStructure);
000048  e9c45903          STRD     r5,r9,[r4,#0xc]
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       SDIO_SendCommand
;;;2770   
;;;2771     errorstatus = CmdResp1Error(SDIO_APP_CMD);
000052  2037              MOVS     r0,#0x37
000054  f7fffffe          BL       CmdResp1Error
;;;2772   
;;;2773     if (errorstatus != SD_OK)
000058  282a              CMP      r0,#0x2a
00005a  d12f              BNE      |L6.188|
;;;2774     {
;;;2775       return(errorstatus);
;;;2776     }
;;;2777     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
00005c  f1040014          ADD      r0,r4,#0x14
000060  4933              LDR      r1,|L6.304|
000062  e9c01a00          STRD     r1,r10,[r0,#0]
;;;2778     SDIO_DataInitStructure.SDIO_DataLength = 8;
;;;2779     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b;
000066  2130              MOVS     r1,#0x30
;;;2780     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
000068  6081              STR      r1,[r0,#8]  ; SDIO_DataInitStructure
00006a  2102              MOVS     r1,#2
00006c  e9c01503          STRD     r1,r5,[r0,#0xc]
;;;2781     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;2782     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
000070  2101              MOVS     r1,#1
;;;2783     SDIO_DataConfig(&SDIO_DataInitStructure);
000072  6141              STR      r1,[r0,#0x14]  ; SDIO_DataInitStructure
000074  f7fffffe          BL       SDIO_DataConfig
;;;2784   
;;;2785   
;;;2786     /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
;;;2787     SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;2788     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_SEND_SCR;
000078  2033              MOVS     r0,#0x33
00007a  e9c45000          STRD     r5,r0,[r4,#0]
;;;2789     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2790     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2791     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
00007e  f8c49010          STR      r9,[r4,#0x10]  ; SDIO_CmdInitStructure
000082  e9c48502          STRD     r8,r5,[r4,#8]
;;;2792     SDIO_SendCommand(&SDIO_CmdInitStructure);
000086  4620              MOV      r0,r4
000088  f7fffffe          BL       SDIO_SendCommand
;;;2793   
;;;2794     errorstatus = CmdResp1Error(SDIO_SD_APP_SEND_SCR);
00008c  2033              MOVS     r0,#0x33
00008e  f7fffffe          BL       CmdResp1Error
000092  4604              MOV      r4,r0
;;;2795   
;;;2796     if (errorstatus != SD_OK)
000094  282a              CMP      r0,#0x2a
000096  d111              BNE      |L6.188|
;;;2797     {
;;;2798       return(errorstatus);
;;;2799     }
;;;2800   
;;;2801     while (!(SDIO->STA & (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
000098  4d26              LDR      r5,|L6.308|
;;;2802     {
;;;2803       if (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
00009a  f44f1a00          MOV      r10,#0x200000
00009e  46e9              MOV      r9,sp                 ;2745
0000a0  f240682a          MOV      r8,#0x62a             ;2801
                  |L6.164|
0000a4  6b68              LDR      r0,[r5,#0x34]         ;2801
0000a6  ea100f08          TST      r0,r8                 ;2801
0000aa  d009              BEQ      |L6.192|
;;;2804       {
;;;2805         *(tempscr + index) = SDIO_ReadData();
;;;2806         index++;
;;;2807       }
;;;2808     }
;;;2809   
;;;2810     if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
0000ac  2008              MOVS     r0,#8
0000ae  f7fffffe          BL       SDIO_GetFlagStatus
0000b2  b180              CBZ      r0,|L6.214|
;;;2811     {
;;;2812       SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
0000b4  2008              MOVS     r0,#8
0000b6  f7fffffe          BL       SDIO_ClearFlag
;;;2813       errorstatus = SD_DATA_TIMEOUT;
0000ba  2004              MOVS     r0,#4
                  |L6.188|
;;;2814       return(errorstatus);
;;;2815     }
;;;2816     else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;2817     {
;;;2818       SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;2819       errorstatus = SD_DATA_CRC_FAIL;
;;;2820       return(errorstatus);
;;;2821     }
;;;2822     else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;2823     {
;;;2824       SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;2825       errorstatus = SD_RX_OVERRUN;
;;;2826       return(errorstatus);
;;;2827     }
;;;2828     else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;2829     {
;;;2830       SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;2831       errorstatus = SD_START_BIT_ERR;
;;;2832       return(errorstatus);
;;;2833     }
;;;2834   
;;;2835     /* Clear all the static flags */
;;;2836     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2837   
;;;2838     *(pscr + 1) = ((tempscr[0] & SD_0TO7BITS) << 24) | ((tempscr[0] & SD_8TO15BITS) << 8) | ((tempscr[0] & SD_16TO23BITS) >> 8) | ((tempscr[0] & SD_24TO31BITS) >> 24);
;;;2839   
;;;2840     *(pscr) = ((tempscr[1] & SD_0TO7BITS) << 24) | ((tempscr[1] & SD_8TO15BITS) << 8) | ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
;;;2841   
;;;2842     return(errorstatus);
;;;2843   }
0000bc  e8bd87fc          POP      {r2-r10,pc}
                  |L6.192|
0000c0  4650              MOV      r0,r10                ;2803
0000c2  f7fffffe          BL       SDIO_GetFlagStatus
0000c6  2800              CMP      r0,#0                 ;2803
0000c8  d0ec              BEQ      |L6.164|
0000ca  f7fffffe          BL       SDIO_ReadData
0000ce  f8490026          STR      r0,[r9,r6,LSL #2]     ;2805
0000d2  1c76              ADDS     r6,r6,#1              ;2806
0000d4  e7e6              B        |L6.164|
                  |L6.214|
0000d6  2002              MOVS     r0,#2                 ;2816
0000d8  f7fffffe          BL       SDIO_GetFlagStatus
0000dc  b120              CBZ      r0,|L6.232|
0000de  2002              MOVS     r0,#2                 ;2818
0000e0  f7fffffe          BL       SDIO_ClearFlag
0000e4  2002              MOVS     r0,#2                 ;2819
0000e6  e7e9              B        |L6.188|
                  |L6.232|
0000e8  2020              MOVS     r0,#0x20              ;2822
0000ea  f7fffffe          BL       SDIO_GetFlagStatus
0000ee  b120              CBZ      r0,|L6.250|
0000f0  2020              MOVS     r0,#0x20              ;2824
0000f2  f7fffffe          BL       SDIO_ClearFlag
0000f6  2006              MOVS     r0,#6                 ;2825
0000f8  e7e0              B        |L6.188|
                  |L6.250|
0000fa  f44f7500          MOV      r5,#0x200             ;2828
0000fe  4628              MOV      r0,r5                 ;2828
000100  f7fffffe          BL       SDIO_GetFlagStatus
000104  b120              CBZ      r0,|L6.272|
000106  4628              MOV      r0,r5                 ;2830
000108  f7fffffe          BL       SDIO_ClearFlag
00010c  2007              MOVS     r0,#7                 ;2831
00010e  e7d5              B        |L6.188|
                  |L6.272|
000110  f24050ff          MOV      r0,#0x5ff             ;2836
000114  f7fffffe          BL       SDIO_ClearFlag
000118  9800              LDR      r0,[sp,#0]            ;2838
00011a  ba00              REV      r0,r0                 ;2838
00011c  6078              STR      r0,[r7,#4]            ;2840
00011e  9801              LDR      r0,[sp,#4]            ;2840
000120  ba00              REV      r0,r0                 ;2840
000122  6038              STR      r0,[r7,#0]            ;2842
000124  4620              MOV      r0,r4                 ;2842
000126  e7c9              B        |L6.188|
;;;2844   
                          ENDP

                  |L6.296|
                          DCD      ||.bss||+0x38
                  |L6.300|
                          DCD      ||.data||
                  |L6.304|
                          DCD      0x000fffff
                  |L6.308|
                          DCD      0x40018000

                          AREA ||i.IsCardProgramming||, CODE, READONLY, ALIGN=2

                  IsCardProgramming PROC
;;;2579   *******************************************************************************/
;;;2580   static SD_Error IsCardProgramming(u8 *pstatus)
000000  b570              PUSH     {r4-r6,lr}
;;;2581   {
000002  4604              MOV      r4,r0
;;;2582     SD_Error errorstatus = SD_OK;
;;;2583     vu32 respR1 = 0, status = 0;
;;;2584   
;;;2585     SDIO_CmdInitStructure.SDIO_Argument = (u32) RCA << 16;
000004  4840              LDR      r0,|L7.264|
000006  252a              MOVS     r5,#0x2a              ;2582
000008  6880              LDR      r0,[r0,#8]  ; RCA
00000a  0401              LSLS     r1,r0,#16
00000c  483f              LDR      r0,|L7.268|
;;;2586     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
00000e  6001              STR      r1,[r0,#0]  ; SDIO_CmdInitStructure
000010  210d              MOVS     r1,#0xd
;;;2587     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
000012  6041              STR      r1,[r0,#4]  ; SDIO_CmdInitStructure
000014  2140              MOVS     r1,#0x40
;;;2588     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000016  6081              STR      r1,[r0,#8]  ; SDIO_CmdInitStructure
000018  2100              MOVS     r1,#0
;;;2589     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
00001a  60c1              STR      r1,[r0,#0xc]  ; SDIO_CmdInitStructure
00001c  f44f6180          MOV      r1,#0x400
;;;2590     SDIO_SendCommand(&SDIO_CmdInitStructure);
000020  6101              STR      r1,[r0,#0x10]  ; SDIO_CmdInitStructure
000022  f7fffffe          BL       SDIO_SendCommand
;;;2591   
;;;2592     status = SDIO->STA;
000026  493a              LDR      r1,|L7.272|
                  |L7.40|
;;;2593     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
;;;2594     {
;;;2595       status = SDIO->STA;
000028  6b48              LDR      r0,[r1,#0x34]
00002a  f0100f45          TST      r0,#0x45              ;2593
00002e  d0fb              BEQ      |L7.40|
;;;2596     }
;;;2597   
;;;2598     if (status & SDIO_FLAG_CTIMEOUT)
000030  0741              LSLS     r1,r0,#29
000032  d502              BPL      |L7.58|
;;;2599     {
;;;2600       errorstatus = SD_CMD_RSP_TIMEOUT;
000034  2403              MOVS     r4,#3
;;;2601       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000036  2004              MOVS     r0,#4
;;;2602       return(errorstatus);
000038  e003              B        |L7.66|
                  |L7.58|
;;;2603     }
;;;2604     else if (status & SDIO_FLAG_CCRCFAIL)
00003a  07c0              LSLS     r0,r0,#31
00003c  d005              BEQ      |L7.74|
;;;2605     {
;;;2606       errorstatus = SD_CMD_CRC_FAIL;
00003e  2401              MOVS     r4,#1
;;;2607       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
000040  4620              MOV      r0,r4
                  |L7.66|
000042  f7fffffe          BL       SDIO_ClearFlag
;;;2608       return(errorstatus);
000046  4620              MOV      r0,r4
;;;2609     }
;;;2610   
;;;2611     status = (u32)SDIO_GetCommandResponse();
;;;2612   
;;;2613     /* Check response received is of desired command */
;;;2614     if (status != SDIO_SEND_STATUS)
;;;2615     {
;;;2616       errorstatus = SD_ILLEGAL_CMD;
;;;2617       return(errorstatus);
;;;2618     }
;;;2619   
;;;2620     /* Clear all the static flags */
;;;2621     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2622   
;;;2623   
;;;2624     /* We have received response, retrieve it for analysis  */
;;;2625     respR1 = SDIO_GetResponse(SDIO_RESP1);
;;;2626   
;;;2627     /* Find out card status */
;;;2628     *pstatus = (u8) ((respR1 >> 9) & 0x0000000F);
;;;2629   
;;;2630     if ((respR1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
;;;2631     {
;;;2632       return(errorstatus);
;;;2633     }
;;;2634   
;;;2635     if (respR1 & SD_OCR_ADDR_OUT_OF_RANGE)
;;;2636     {
;;;2637       return(SD_ADDR_OUT_OF_RANGE);
;;;2638     }
;;;2639   
;;;2640     if (respR1 & SD_OCR_ADDR_MISALIGNED)
;;;2641     {
;;;2642       return(SD_ADDR_MISALIGNED);
;;;2643     }
;;;2644   
;;;2645     if (respR1 & SD_OCR_BLOCK_LEN_ERR)
;;;2646     {
;;;2647       return(SD_BLOCK_LEN_ERR);
;;;2648     }
;;;2649   
;;;2650     if (respR1 & SD_OCR_ERASE_SEQ_ERR)
;;;2651     {
;;;2652       return(SD_ERASE_SEQ_ERR);
;;;2653     }
;;;2654   
;;;2655     if (respR1 & SD_OCR_BAD_ERASE_PARAM)
;;;2656     {
;;;2657       return(SD_BAD_ERASE_PARAM);
;;;2658     }
;;;2659   
;;;2660     if (respR1 & SD_OCR_WRITE_PROT_VIOLATION)
;;;2661     {
;;;2662       return(SD_WRITE_PROT_VIOLATION);
;;;2663     }
;;;2664   
;;;2665     if (respR1 & SD_OCR_LOCK_UNLOCK_FAILED)
;;;2666     {
;;;2667       return(SD_LOCK_UNLOCK_FAILED);
;;;2668     }
;;;2669   
;;;2670     if (respR1 & SD_OCR_COM_CRC_FAILED)
;;;2671     {
;;;2672       return(SD_COM_CRC_FAILED);
;;;2673     }
;;;2674   
;;;2675     if (respR1 & SD_OCR_ILLEGAL_CMD)
;;;2676     {
;;;2677       return(SD_ILLEGAL_CMD);
;;;2678     }
;;;2679   
;;;2680     if (respR1 & SD_OCR_CARD_ECC_FAILED)
;;;2681     {
;;;2682       return(SD_CARD_ECC_FAILED);
;;;2683     }
;;;2684   
;;;2685     if (respR1 & SD_OCR_CC_ERROR)
;;;2686     {
;;;2687       return(SD_CC_ERROR);
;;;2688     }
;;;2689   
;;;2690     if (respR1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
;;;2691     {
;;;2692       return(SD_GENERAL_UNKNOWN_ERROR);
;;;2693     }
;;;2694   
;;;2695     if (respR1 & SD_OCR_STREAM_READ_UNDERRUN)
;;;2696     {
;;;2697       return(SD_STREAM_READ_UNDERRUN);
;;;2698     }
;;;2699   
;;;2700     if (respR1 & SD_OCR_STREAM_WRITE_OVERRUN)
;;;2701     {
;;;2702       return(SD_STREAM_WRITE_OVERRUN);
;;;2703     }
;;;2704   
;;;2705     if (respR1 & SD_OCR_CID_CSD_OVERWRIETE)
;;;2706     {
;;;2707       return(SD_CID_CSD_OVERWRITE);
;;;2708     }
;;;2709   
;;;2710     if (respR1 & SD_OCR_WP_ERASE_SKIP)
;;;2711     {
;;;2712       return(SD_WP_ERASE_SKIP);
;;;2713     }
;;;2714   
;;;2715     if (respR1 & SD_OCR_CARD_ECC_DISABLED)
;;;2716     {
;;;2717       return(SD_CARD_ECC_DISABLED);
;;;2718     }
;;;2719   
;;;2720     if (respR1 & SD_OCR_ERASE_RESET)
;;;2721     {
;;;2722       return(SD_ERASE_RESET);
;;;2723     }
;;;2724   
;;;2725     if (respR1 & SD_OCR_AKE_SEQ_ERROR)
;;;2726     {
;;;2727       return(SD_AKE_SEQ_ERROR);
;;;2728     }
;;;2729   
;;;2730     return(errorstatus);
;;;2731   }
000048  bd70              POP      {r4-r6,pc}
                  |L7.74|
00004a  f7fffffe          BL       SDIO_GetCommandResponse
00004e  280d              CMP      r0,#0xd               ;2614
000050  d12e              BNE      |L7.176|
000052  f24050ff          MOV      r0,#0x5ff             ;2621
000056  f7fffffe          BL       SDIO_ClearFlag
00005a  2000              MOVS     r0,#0                 ;2625
00005c  f7fffffe          BL       SDIO_GetResponse
000060  f3c02143          UBFX     r1,r0,#9,#4           ;2628
000064  7021              STRB     r1,[r4,#0]            ;2628
000066  492b              LDR      r1,|L7.276|
000068  4208              TST      r0,r1                 ;2630
00006a  d04b              BEQ      |L7.260|
00006c  2800              CMP      r0,#0                 ;2635
00006e  da01              BGE      |L7.116|
000070  201c              MOVS     r0,#0x1c              ;2637
000072  bd70              POP      {r4-r6,pc}
                  |L7.116|
000074  0041              LSLS     r1,r0,#1              ;2640
000076  d501              BPL      |L7.124|
000078  2009              MOVS     r0,#9                 ;2642
00007a  bd70              POP      {r4-r6,pc}
                  |L7.124|
00007c  0081              LSLS     r1,r0,#2
00007e  d501              BPL      |L7.132|
000080  200a              MOVS     r0,#0xa               ;2647
000082  bd70              POP      {r4-r6,pc}
                  |L7.132|
000084  00c1              LSLS     r1,r0,#3
000086  d501              BPL      |L7.140|
000088  200b              MOVS     r0,#0xb               ;2652
00008a  bd70              POP      {r4-r6,pc}
                  |L7.140|
00008c  0101              LSLS     r1,r0,#4
00008e  d501              BPL      |L7.148|
000090  200c              MOVS     r0,#0xc               ;2657
000092  bd70              POP      {r4-r6,pc}
                  |L7.148|
000094  0141              LSLS     r1,r0,#5              ;2660
000096  d501              BPL      |L7.156|
000098  200d              MOVS     r0,#0xd               ;2662
00009a  bd70              POP      {r4-r6,pc}
                  |L7.156|
00009c  01c1              LSLS     r1,r0,#7              ;2665
00009e  d501              BPL      |L7.164|
0000a0  200e              MOVS     r0,#0xe               ;2667
0000a2  bd70              POP      {r4-r6,pc}
                  |L7.164|
0000a4  0201              LSLS     r1,r0,#8              ;2670
0000a6  d501              BPL      |L7.172|
0000a8  200f              MOVS     r0,#0xf               ;2672
0000aa  bd70              POP      {r4-r6,pc}
                  |L7.172|
0000ac  0241              LSLS     r1,r0,#9              ;2675
0000ae  d501              BPL      |L7.180|
                  |L7.176|
0000b0  2010              MOVS     r0,#0x10              ;2677
0000b2  bd70              POP      {r4-r6,pc}
                  |L7.180|
0000b4  0281              LSLS     r1,r0,#10             ;2680
0000b6  d501              BPL      |L7.188|
0000b8  2011              MOVS     r0,#0x11              ;2682
0000ba  bd70              POP      {r4-r6,pc}
                  |L7.188|
0000bc  02c1              LSLS     r1,r0,#11             ;2685
0000be  d501              BPL      |L7.196|
0000c0  2012              MOVS     r0,#0x12              ;2687
0000c2  bd70              POP      {r4-r6,pc}
                  |L7.196|
0000c4  0301              LSLS     r1,r0,#12             ;2690
0000c6  d501              BPL      |L7.204|
0000c8  2013              MOVS     r0,#0x13              ;2692
0000ca  bd70              POP      {r4-r6,pc}
                  |L7.204|
0000cc  0341              LSLS     r1,r0,#13             ;2695
0000ce  d501              BPL      |L7.212|
0000d0  2014              MOVS     r0,#0x14              ;2697
0000d2  bd70              POP      {r4-r6,pc}
                  |L7.212|
0000d4  0381              LSLS     r1,r0,#14             ;2700
0000d6  d501              BPL      |L7.220|
0000d8  2015              MOVS     r0,#0x15              ;2702
0000da  bd70              POP      {r4-r6,pc}
                  |L7.220|
0000dc  03c1              LSLS     r1,r0,#15             ;2705
0000de  d501              BPL      |L7.228|
0000e0  2016              MOVS     r0,#0x16              ;2707
0000e2  bd70              POP      {r4-r6,pc}
                  |L7.228|
0000e4  0401              LSLS     r1,r0,#16             ;2710
0000e6  d501              BPL      |L7.236|
0000e8  2017              MOVS     r0,#0x17              ;2712
0000ea  bd70              POP      {r4-r6,pc}
                  |L7.236|
0000ec  0441              LSLS     r1,r0,#17             ;2715
0000ee  d501              BPL      |L7.244|
0000f0  2018              MOVS     r0,#0x18              ;2717
0000f2  bd70              POP      {r4-r6,pc}
                  |L7.244|
0000f4  0481              LSLS     r1,r0,#18             ;2720
0000f6  d501              BPL      |L7.252|
0000f8  2019              MOVS     r0,#0x19              ;2722
0000fa  bd70              POP      {r4-r6,pc}
                  |L7.252|
0000fc  0700              LSLS     r0,r0,#28             ;2725
0000fe  d501              BPL      |L7.260|
000100  201a              MOVS     r0,#0x1a              ;2727
000102  bd70              POP      {r4-r6,pc}
                  |L7.260|
000104  4628              MOV      r0,r5                 ;2730
000106  bd70              POP      {r4-r6,pc}
;;;2732   
                          ENDP

                  |L7.264|
                          DCD      ||.data||
                  |L7.268|
                          DCD      ||.bss||+0x38
                  |L7.272|
                          DCD      0x40018000
                  |L7.276|
                          DCD      0xfdffe008

                          AREA ||i.SDEnWideBus||, CODE, READONLY, ALIGN=2

                  SDEnWideBus PROC
;;;2462   *******************************************************************************/
;;;2463   static SD_Error SDEnWideBus(FunctionalState NewState)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;2464   {
;;;2465     SD_Error errorstatus = SD_OK;
;;;2466   
;;;2467     u32 scr[2] = {0, 0};
000004  2500              MOVS     r5,#0
000006  4680              MOV      r8,r0                 ;2464
000008  9500              STR      r5,[sp,#0]
;;;2468   
;;;2469     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
00000a  4628              MOV      r0,r5
00000c  9501              STR      r5,[sp,#4]
00000e  f7fffffe          BL       SDIO_GetResponse
000012  0180              LSLS     r0,r0,#6
000014  d502              BPL      |L8.28|
;;;2470     {
;;;2471       errorstatus = SD_LOCK_UNLOCK_FAILED;
000016  200e              MOVS     r0,#0xe
                  |L8.24|
;;;2472       return(errorstatus);
;;;2473     }
;;;2474   
;;;2475     /* Get SCR Register */
;;;2476     errorstatus = FindSCR(RCA, scr);
;;;2477   
;;;2478     if (errorstatus != SD_OK)
;;;2479     {
;;;2480       return(errorstatus);
;;;2481     }
;;;2482   
;;;2483     /* If wide bus operation to be enabled */
;;;2484     if (NewState == ENABLE)
;;;2485     {
;;;2486       /* If requested card supports wide bus operation */
;;;2487       if ((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
;;;2488       {
;;;2489         /* Send CMD55 APP_CMD with argument as card's RCA.*/
;;;2490         SDIO_CmdInitStructure.SDIO_Argument = (u32) RCA << 16;
;;;2491         SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
;;;2492         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2493         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2494         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2495         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2496   
;;;2497         errorstatus = CmdResp1Error(SDIO_APP_CMD);
;;;2498   
;;;2499         if (errorstatus != SD_OK)
;;;2500         {
;;;2501           return(errorstatus);
;;;2502         }
;;;2503   
;;;2504         /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
;;;2505         SDIO_CmdInitStructure.SDIO_Argument = 0x2;
;;;2506         SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_SD_SET_BUSWIDTH;
;;;2507         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2508         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2509         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2510         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2511   
;;;2512         errorstatus = CmdResp1Error(SDIO_APP_SD_SET_BUSWIDTH);
;;;2513   
;;;2514         if (errorstatus != SD_OK)
;;;2515         {
;;;2516           return(errorstatus);
;;;2517         }
;;;2518         return(errorstatus);
;;;2519       }
;;;2520       else
;;;2521       {
;;;2522         errorstatus = SD_REQUEST_NOT_APPLICABLE;
;;;2523         return(errorstatus);
;;;2524       }
;;;2525     }   /* If wide bus operation to be disabled */
;;;2526     else
;;;2527     {
;;;2528       /* If requested card supports 1 bit mode operation */
;;;2529       if ((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
;;;2530       {
;;;2531         /* Send CMD55 APP_CMD with argument as card's RCA.*/
;;;2532         SDIO_CmdInitStructure.SDIO_Argument = (u32) RCA << 16;
;;;2533         SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
;;;2534         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2535         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2536         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2537         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2538   
;;;2539   
;;;2540         errorstatus = CmdResp1Error(SDIO_APP_CMD);
;;;2541   
;;;2542         if (errorstatus != SD_OK)
;;;2543         {
;;;2544           return(errorstatus);
;;;2545         }
;;;2546   
;;;2547         /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
;;;2548         SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;2549         SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_SD_SET_BUSWIDTH;
;;;2550         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2551         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2552         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2553         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2554   
;;;2555         errorstatus = CmdResp1Error(SDIO_APP_SD_SET_BUSWIDTH);
;;;2556   
;;;2557         if (errorstatus != SD_OK)
;;;2558         {
;;;2559           return(errorstatus);
;;;2560         }
;;;2561   
;;;2562         return(errorstatus);
;;;2563       }
;;;2564       else
;;;2565       {
;;;2566         errorstatus = SD_REQUEST_NOT_APPLICABLE;
;;;2567         return(errorstatus);
;;;2568       }
;;;2569     }
;;;2570   }
000018  e8bd87fc          POP      {r2-r10,pc}
                  |L8.28|
00001c  4f26              LDR      r7,|L8.184|
00001e  4669              MOV      r1,sp                 ;2476
000020  68b8              LDR      r0,[r7,#8]            ;2476  ; RCA
000022  b280              UXTH     r0,r0                 ;2476
000024  f7fffffe          BL       FindSCR
000028  282a              CMP      r0,#0x2a              ;2478
00002a  d1f5              BNE      |L8.24|
00002c  2037              MOVS     r0,#0x37              ;2491
00002e  4c23              LDR      r4,|L8.188|
000030  9901              LDR      r1,[sp,#4]            ;2484
000032  f04f0a06          MOV      r10,#6                ;2506
000036  f04f0940          MOV      r9,#0x40              ;2492
00003a  f44f6680          MOV      r6,#0x400             ;2494
00003e  f1b80f01          CMP      r8,#1                 ;2484
000042  d01e              BEQ      |L8.130|
000044  03c9              LSLS     r1,r1,#15             ;2529
000046  d534              BPL      |L8.178|
000048  68b9              LDR      r1,[r7,#8]            ;2532  ; RCA
00004a  f8c49008          STR      r9,[r4,#8]            ;2534  ; SDIO_CmdInitStructure
00004e  0409              LSLS     r1,r1,#16             ;2532
000050  e9c41000          STRD     r1,r0,[r4,#0]         ;2534
000054  e9c45603          STRD     r5,r6,[r4,#0xc]       ;2537
000058  4620              MOV      r0,r4                 ;2537
00005a  f7fffffe          BL       SDIO_SendCommand
00005e  2037              MOVS     r0,#0x37              ;2540
000060  f7fffffe          BL       CmdResp1Error
000064  282a              CMP      r0,#0x2a              ;2542
000066  d1d7              BNE      |L8.24|
000068  f8c49008          STR      r9,[r4,#8]            ;2550  ; SDIO_CmdInitStructure
00006c  e9c45a00          STRD     r5,r10,[r4,#0]        ;2550
                  |L8.112|
000070  e9c45603          STRD     r5,r6,[r4,#0xc]       ;2550
000074  4811              LDR      r0,|L8.188|
000076  f7fffffe          BL       SDIO_SendCommand
00007a  2006              MOVS     r0,#6                 ;2555
00007c  f7fffffe          BL       CmdResp1Error
000080  e7ca              B        |L8.24|
                  |L8.130|
000082  0349              LSLS     r1,r1,#13             ;2487
000084  d515              BPL      |L8.178|
000086  68b9              LDR      r1,[r7,#8]            ;2490  ; RCA
000088  f8c49008          STR      r9,[r4,#8]            ;2492  ; SDIO_CmdInitStructure
00008c  0409              LSLS     r1,r1,#16             ;2490
00008e  e9c41000          STRD     r1,r0,[r4,#0]         ;2492
000092  e9c45603          STRD     r5,r6,[r4,#0xc]       ;2495
000096  4809              LDR      r0,|L8.188|
000098  f7fffffe          BL       SDIO_SendCommand
00009c  2037              MOVS     r0,#0x37              ;2497
00009e  f7fffffe          BL       CmdResp1Error
0000a2  282a              CMP      r0,#0x2a              ;2499
0000a4  d1b8              BNE      |L8.24|
0000a6  2002              MOVS     r0,#2                 ;2505
0000a8  f8c49008          STR      r9,[r4,#8]            ;2507  ; SDIO_CmdInitStructure
0000ac  e9c40a00          STRD     r0,r10,[r4,#0]        ;2507
0000b0  e7de              B        |L8.112|
                  |L8.178|
0000b2  2025              MOVS     r0,#0x25              ;2566
0000b4  e7b0              B        |L8.24|
;;;2571   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L8.184|
                          DCD      ||.data||
                  |L8.188|
                          DCD      ||.bss||+0x38

                          AREA ||i.SD_EnableWideBusOperation||, CODE, READONLY, ALIGN=2

                  SD_EnableWideBusOperation PROC
;;;659    *******************************************************************************/
;;;660    SD_Error SD_EnableWideBusOperation(u32 WideMode)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;661    {
000004  4601              MOV      r1,r0
;;;662      SD_Error errorstatus = SD_OK;
;;;663    
;;;664      /* MMC Card doesn't support this feature */
;;;665      if (SDIO_MULTIMEDIA_CARD == CardType)
000006  481a              LDR      r0,|L9.112|
000008  262a              MOVS     r6,#0x2a              ;662
00000a  6840              LDR      r0,[r0,#4]  ; CardType
00000c  2803              CMP      r0,#3
00000e  d015              BEQ      |L9.60|
;;;666      {
;;;667        errorstatus = SD_UNSUPPORTED_FEATURE;
;;;668        return(errorstatus);
;;;669      }
;;;670      else if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
000010  b118              CBZ      r0,|L9.26|
000012  2801              CMP      r0,#1
000014  d001              BEQ      |L9.26|
000016  2802              CMP      r0,#2
000018  d128              BNE      |L9.108|
                  |L9.26|
;;;671      {
;;;672        if (SDIO_BusWide_8b == WideMode)
00001a  f5b15f80          CMP      r1,#0x1000
00001e  d00d              BEQ      |L9.60|
;;;673        {
;;;674          errorstatus = SD_UNSUPPORTED_FEATURE;
;;;675          return(errorstatus);
;;;676        }
;;;677        else if (SDIO_BusWide_4b == WideMode)
000020  f44f6800          MOV      r8,#0x800
000024  2500              MOVS     r5,#0                 ;665
000026  2701              MOVS     r7,#1                 ;665
;;;678        {
;;;679          errorstatus = SDEnWideBus(ENABLE);
;;;680    
;;;681          if (SD_OK == errorstatus)
;;;682          {
;;;683            /* Configure the SDIO peripheral */
;;;684            SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
000028  4c12              LDR      r4,|L9.116|
00002a  4541              CMP      r1,r8                 ;677
00002c  d10f              BNE      |L9.78|
00002e  2001              MOVS     r0,#1                 ;679
000030  f7fffffe          BL       SDEnWideBus
000034  4606              MOV      r6,r0                 ;679
000036  282a              CMP      r0,#0x2a              ;681
000038  d003              BEQ      |L9.66|
00003a  e017              B        |L9.108|
                  |L9.60|
00003c  2027              MOVS     r0,#0x27              ;674
                  |L9.62|
;;;685            SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;686            SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
;;;687            SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
;;;688            SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_4b;
;;;689            SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
;;;690            SDIO_Init(&SDIO_InitStructure);
;;;691          }
;;;692        }
;;;693        else
;;;694        {
;;;695          errorstatus = SDEnWideBus(DISABLE);
;;;696    
;;;697          if (SD_OK == errorstatus)
;;;698          {
;;;699            /* Configure the SDIO peripheral */
;;;700            SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
;;;701            SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;702            SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
;;;703            SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
;;;704            SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
;;;705            SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
;;;706            SDIO_Init(&SDIO_InitStructure);
;;;707          }
;;;708        }
;;;709      }
;;;710    
;;;711      return(errorstatus);
;;;712    }
00003e  e8bd81f0          POP      {r4-r8,pc}
                  |L9.66|
000042  7027              STRB     r7,[r4,#0]            ;684
000044  6065              STR      r5,[r4,#4]            ;686  ; SDIO_InitStructure
000046  60a5              STR      r5,[r4,#8]            ;686  ; SDIO_InitStructure
000048  e9c45803          STRD     r5,r8,[r4,#0xc]       ;686
00004c  e00a              B        |L9.100|
                  |L9.78|
00004e  2000              MOVS     r0,#0                 ;695
000050  f7fffffe          BL       SDEnWideBus
000054  4606              MOV      r6,r0                 ;695
000056  282a              CMP      r0,#0x2a              ;697
000058  d108              BNE      |L9.108|
00005a  7027              STRB     r7,[r4,#0]            ;700
00005c  6065              STR      r5,[r4,#4]            ;702  ; SDIO_InitStructure
00005e  60a5              STR      r5,[r4,#8]            ;703  ; SDIO_InitStructure
000060  60e5              STR      r5,[r4,#0xc]          ;704  ; SDIO_InitStructure
000062  6125              STR      r5,[r4,#0x10]         ;704  ; SDIO_InitStructure
                  |L9.100|
000064  4803              LDR      r0,|L9.116|
000066  6165              STR      r5,[r4,#0x14]         ;706  ; SDIO_InitStructure
000068  f7fffffe          BL       SDIO_Init
                  |L9.108|
00006c  4630              MOV      r0,r6                 ;711
00006e  e7e6              B        |L9.62|
;;;713    
                          ENDP

                  |L9.112|
                          DCD      ||.data||
                  |L9.116|
                          DCD      ||.bss||+0x20

                          AREA ||i.SD_Erase||, CODE, READONLY, ALIGN=2

                  SD_Erase PROC
;;;1704   *******************************************************************************/
;;;1705   SD_Error SD_Erase(u32 startaddr, u32 endaddr)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;1706   {
000004  4605              MOV      r5,r0
;;;1707     SD_Error errorstatus = SD_OK;
;;;1708     u32 delay = 0;
;;;1709     vu32 maxdelay = 0;
;;;1710     u8 cardstate = 0;
;;;1711   
;;;1712     /* Check if the card coomnd class supports erase command */
;;;1713     if (((CSD_Tab[1] >> 20) & SD_CCCC_ERASE) == 0)
000006  4839              LDR      r0,|L10.236|
000008  2400              MOVS     r4,#0                 ;1708
00000a  f88d4000          STRB     r4,[sp,#0]            ;1710
00000e  6840              LDR      r0,[r0,#4]  ; CSD_Tab
000010  460e              MOV      r6,r1                 ;1706
000012  ea4f5010          LSR      r0,r0,#20
000016  46a0              MOV      r8,r4                 ;1710
000018  0680              LSLS     r0,r0,#26
00001a  d402              BMI      |L10.34|
;;;1714     {
;;;1715       errorstatus = SD_REQUEST_NOT_APPLICABLE;
00001c  2025              MOVS     r0,#0x25
                  |L10.30|
;;;1716       return(errorstatus);
;;;1717     }
;;;1718   
;;;1719     maxdelay = 72000 / ((SDIO->CLKCR & 0xFF) + 2);
;;;1720   
;;;1721     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
;;;1722     {
;;;1723       errorstatus = SD_LOCK_UNLOCK_FAILED;
;;;1724       return(errorstatus);
;;;1725     }
;;;1726   
;;;1727     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;1728     {
;;;1729       startaddr /= 512;
;;;1730       endaddr /= 512;
;;;1731     }
;;;1732     
;;;1733     /* According to sd-card spec 1.0 ERASE_GROUP_START (CMD32) and erase_group_end(CMD33) */
;;;1734     if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;1735     {
;;;1736       /* Send CMD32 SD_ERASE_GRP_START with argument as addr  */
;;;1737       SDIO_CmdInitStructure.SDIO_Argument = startaddr;
;;;1738       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_ERASE_GRP_START;
;;;1739       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1740       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1741       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1742       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1743   
;;;1744       errorstatus = CmdResp1Error(SDIO_SD_ERASE_GRP_START);
;;;1745       if (errorstatus != SD_OK)
;;;1746       {
;;;1747         return(errorstatus);
;;;1748       }
;;;1749   
;;;1750       /* Send CMD33 SD_ERASE_GRP_END with argument as addr  */
;;;1751       SDIO_CmdInitStructure.SDIO_Argument = endaddr;
;;;1752       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_ERASE_GRP_END;
;;;1753       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1754       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1755       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1756       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1757   
;;;1758       errorstatus = CmdResp1Error(SDIO_SD_ERASE_GRP_END);
;;;1759       if (errorstatus != SD_OK)
;;;1760       {
;;;1761         return(errorstatus);
;;;1762       }
;;;1763     }
;;;1764   
;;;1765     /* Send CMD38 ERASE */
;;;1766     SDIO_CmdInitStructure.SDIO_Argument = 0;
;;;1767     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_ERASE;
;;;1768     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1769     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1770     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1771     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1772   
;;;1773     errorstatus = CmdResp1Error(SDIO_ERASE);
;;;1774   
;;;1775     if (errorstatus != SD_OK)
;;;1776     {
;;;1777       return(errorstatus);
;;;1778     }
;;;1779   
;;;1780     for (delay = 0; delay < maxdelay; delay++)
;;;1781     {}
;;;1782   
;;;1783     /* Wait till the card is in programming state */
;;;1784     errorstatus = IsCardProgramming(&cardstate);
;;;1785   
;;;1786     while ((errorstatus == SD_OK) && ((SD_CARD_PROGRAMMING == cardstate) || (SD_CARD_RECEIVING == cardstate)))
;;;1787     {
;;;1788       errorstatus = IsCardProgramming(&cardstate);
;;;1789     }
;;;1790   
;;;1791     return(errorstatus);
;;;1792   }
00001e  e8bd8ff8          POP      {r3-r11,pc}
                  |L10.34|
000022  4833              LDR      r0,|L10.240|
000024  6840              LDR      r0,[r0,#4]            ;1719
000026  4933              LDR      r1,|L10.244|
000028  b2c0              UXTB     r0,r0                 ;1719
00002a  1c80              ADDS     r0,r0,#2              ;1719
00002c  fbb1f7f0          UDIV     r7,r1,r0              ;1719
000030  2000              MOVS     r0,#0                 ;1721
000032  f7fffffe          BL       SDIO_GetResponse
000036  0180              LSLS     r0,r0,#6              ;1721
000038  d501              BPL      |L10.62|
00003a  200e              MOVS     r0,#0xe               ;1723
00003c  e7ef              B        |L10.30|
                  |L10.62|
00003e  482e              LDR      r0,|L10.248|
000040  f8df90a8          LDR      r9,|L10.236|
000044  f04f0b40          MOV      r11,#0x40             ;1739
000048  6840              LDR      r0,[r0,#4]            ;1727  ; CardType
00004a  f1090938          ADD      r9,r9,#0x38           ;1737
00004e  f44f6a80          MOV      r10,#0x400            ;1741
000052  2802              CMP      r0,#2                 ;1727
000054  d005              BEQ      |L10.98|
000056  b130              CBZ      r0,|L10.102|
000058  2801              CMP      r0,#1                 ;1734
00005a  d004              BEQ      |L10.102|
00005c  2802              CMP      r0,#2                 ;1734
00005e  d002              BEQ      |L10.102|
000060  e024              B        |L10.172|
                  |L10.98|
000062  0a6d              LSRS     r5,r5,#9              ;1729
000064  0a76              LSRS     r6,r6,#9              ;1730
                  |L10.102|
000066  2120              MOVS     r1,#0x20              ;1738
000068  e9c95100          STRD     r5,r1,[r9,#0]         ;1738
00006c  e9c9b802          STRD     r11,r8,[r9,#8]        ;1739
000070  481e              LDR      r0,|L10.236|
000072  465d              MOV      r5,r11                ;1739
000074  3038              ADDS     r0,r0,#0x38           ;1742
000076  f8c9a010          STR      r10,[r9,#0x10]        ;1742  ; SDIO_CmdInitStructure
00007a  f7fffffe          BL       SDIO_SendCommand
00007e  2020              MOVS     r0,#0x20              ;1744
000080  f7fffffe          BL       CmdResp1Error
000084  282a              CMP      r0,#0x2a              ;1745
000086  d1ca              BNE      |L10.30|
000088  f1090004          ADD      r0,r9,#4              ;1752
00008c  2121              MOVS     r1,#0x21              ;1752
00008e  f8c96000          STR      r6,[r9,#0]            ;1752  ; SDIO_CmdInitStructure
000092  e8a00122          STM      r0!,{r1,r5,r8}        ;1752
000096  4815              LDR      r0,|L10.236|
000098  f8c9a010          STR      r10,[r9,#0x10]        ;1756  ; SDIO_CmdInitStructure
00009c  3038              ADDS     r0,r0,#0x38           ;1756
00009e  f7fffffe          BL       SDIO_SendCommand
0000a2  2021              MOVS     r0,#0x21              ;1758
0000a4  f7fffffe          BL       CmdResp1Error
0000a8  282a              CMP      r0,#0x2a              ;1759
0000aa  d1b8              BNE      |L10.30|
                  |L10.172|
0000ac  4641              MOV      r1,r8                 ;1766
0000ae  2226              MOVS     r2,#0x26              ;1767
0000b0  e8890806          STM      r9,{r1,r2,r11}        ;1767
0000b4  480d              LDR      r0,|L10.236|
0000b6  e9c98a03          STRD     r8,r10,[r9,#0xc]      ;1771
0000ba  3038              ADDS     r0,r0,#0x38           ;1771
0000bc  f7fffffe          BL       SDIO_SendCommand
0000c0  2026              MOVS     r0,#0x26              ;1773
0000c2  f7fffffe          BL       CmdResp1Error
0000c6  282a              CMP      r0,#0x2a              ;1775
0000c8  d1a9              BNE      |L10.30|
0000ca  e000              B        |L10.206|
                  |L10.204|
0000cc  1c64              ADDS     r4,r4,#1              ;1780
                  |L10.206|
0000ce  42bc              CMP      r4,r7                 ;1780
0000d0  d3fc              BCC      |L10.204|
                  |L10.210|
0000d2  4668              MOV      r0,sp                 ;1784
0000d4  f7fffffe          BL       IsCardProgramming
0000d8  282a              CMP      r0,#0x2a              ;1786
0000da  d1a0              BNE      |L10.30|
0000dc  f89d1000          LDRB     r1,[sp,#0]            ;1786
0000e0  2907              CMP      r1,#7                 ;1786
0000e2  d0f6              BEQ      |L10.210|
0000e4  2906              CMP      r1,#6                 ;1786
0000e6  d0f4              BEQ      |L10.210|
0000e8  e799              B        |L10.30|
;;;1793   
                          ENDP

0000ea  0000              DCW      0x0000
                  |L10.236|
                          DCD      ||.bss||
                  |L10.240|
                          DCD      0x40018000
                  |L10.244|
                          DCD      0x00011940
                  |L10.248|
                          DCD      ||.data||

                          AREA ||i.SD_GetCardInfo||, CODE, READONLY, ALIGN=2

                  SD_GetCardInfo PROC
;;;445    *******************************************************************************/
;;;446    SD_Error SD_GetCardInfo(SD_CardInfo *cardinfo)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;447    {
;;;448      SD_Error errorstatus = SD_OK;
;;;449      u8 tmp = 0;
;;;450    
;;;451      cardinfo->CardType = (u8)CardType;
000004  4998              LDR      r1,|L11.616|
;;;452      cardinfo->RCA = (u16)RCA;
;;;453    
;;;454      /* Byte 0 */
;;;455      tmp = (u8)((CSD_Tab[0] & 0xFF000000) >> 24);
000006  f8dfa264          LDR      r10,|L11.620|
00000a  f04f0c2a          MOV      r12,#0x2a             ;448
00000e  684d              LDR      r5,[r1,#4]            ;451  ; CardType
000010  f880504e          STRB     r5,[r0,#0x4e]         ;451
000014  6889              LDR      r1,[r1,#8]            ;452  ; RCA
000016  f8a0104c          STRH     r1,[r0,#0x4c]         ;452
00001a  f8da1000          LDR      r1,[r10,#0]  ; CSD_Tab
00001e  0e0b              LSRS     r3,r1,#24
;;;456      cardinfo->SD_csd.CSDStruct = (tmp & 0xC0) >> 6;
000020  099c              LSRS     r4,r3,#6
000022  7004              STRB     r4,[r0,#0]
;;;457      cardinfo->SD_csd.SysSpecVersion = (tmp & 0x3C) >> 2;
000024  f3c30483          UBFX     r4,r3,#2,#4
000028  7044              STRB     r4,[r0,#1]
;;;458      cardinfo->SD_csd.Reserved1 = tmp & 0x03;
00002a  f0030303          AND      r3,r3,#3
00002e  7083              STRB     r3,[r0,#2]
;;;459    
;;;460      /* Byte 1 */
;;;461      tmp = (u8)((CSD_Tab[0] & 0x00FF0000) >> 16);
000030  0c0b              LSRS     r3,r1,#16
;;;462      cardinfo->SD_csd.TAAC = tmp;
000032  70c3              STRB     r3,[r0,#3]
;;;463    
;;;464      /* Byte 2 */
;;;465      tmp = (u8)((CSD_Tab[0] & 0x0000FF00) >> 8);
000034  0a0b              LSRS     r3,r1,#8
;;;466      cardinfo->SD_csd.NSAC = tmp;
000036  7103              STRB     r3,[r0,#4]
;;;467    
;;;468      /* Byte 3 */
;;;469      tmp = (u8)(CSD_Tab[0] & 0x000000FF);
;;;470      cardinfo->SD_csd.MaxBusClkFrec = tmp;
000038  7141              STRB     r1,[r0,#5]
;;;471    
;;;472      /* Byte 4 */
;;;473      tmp = (u8)((CSD_Tab[1] & 0xFF000000) >> 24);
00003a  f8da4004          LDR      r4,[r10,#4]  ; CSD_Tab
00003e  0e21              LSRS     r1,r4,#24
;;;474      cardinfo->SD_csd.CardComdClasses = tmp << 4;
000040  0109              LSLS     r1,r1,#4
000042  80c1              STRH     r1,[r0,#6]
;;;475    
;;;476      /* Byte 5 */
;;;477      tmp = (u8)((CSD_Tab[1] & 0x00FF0000) >> 16);
;;;478      cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
000044  88c2              LDRH     r2,[r0,#6]
000046  f3c44107          UBFX     r1,r4,#16,#8          ;477
;;;479      cardinfo->SD_csd.RdBlockLen = tmp & 0x0F;
00004a  f001030f          AND      r3,r1,#0xf
00004e  ea421111          ORR      r1,r2,r1,LSR #4       ;478
000052  80c1              STRH     r1,[r0,#6]            ;478
000054  7203              STRB     r3,[r0,#8]
;;;480    
;;;481      /* Byte 6 */
;;;482      tmp = (u8)((CSD_Tab[1] & 0x0000FF00) >> 8);
000056  f3c42107          UBFX     r1,r4,#8,#8
;;;483      cardinfo->SD_csd.PartBlockRead = (tmp & 0x80) >> 7;
00005a  09ca              LSRS     r2,r1,#7
00005c  7242              STRB     r2,[r0,#9]
;;;484      cardinfo->SD_csd.WrBlockMisalign = (tmp & 0x40) >> 6;
00005e  f3c11280          UBFX     r2,r1,#6,#1
000062  7282              STRB     r2,[r0,#0xa]
;;;485      cardinfo->SD_csd.RdBlockMisalign = (tmp & 0x20) >> 5;
000064  f3c11240          UBFX     r2,r1,#5,#1
000068  72c2              STRB     r2,[r0,#0xb]
;;;486      cardinfo->SD_csd.DSRImpl = (tmp & 0x10) >> 4;
00006a  f3c11200          UBFX     r2,r1,#4,#1
00006e  7302              STRB     r2,[r0,#0xc]
;;;487      cardinfo->SD_csd.Reserved2 = 0; /* Reserved */
000070  f04f0800          MOV      r8,#0
000074  f880800d          STRB     r8,[r0,#0xd]
000078  4652              MOV      r2,r10                ;455
00007a  f04f0901          MOV      r9,#1                 ;451
;;;488    
;;;489      if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
;;;490      {
;;;491        cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
;;;492    
;;;493        /* Byte 7 */
;;;494        tmp = (u8)(CSD_Tab[1] & 0x000000FF);
;;;495        cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
;;;496    
;;;497        /* Byte 8 */
;;;498        tmp = (u8)((CSD_Tab[2] & 0xFF000000) >> 24);
;;;499        cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
;;;500    
;;;501        cardinfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
;;;502        cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
;;;503    
;;;504        /* Byte 9 */
;;;505        tmp = (u8)((CSD_Tab[2] & 0x00FF0000) >> 16);
00007e  6896              LDR      r6,[r2,#8]
000080  f3c64207          UBFX     r2,r6,#16,#8
;;;506        cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
;;;507        cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
;;;508        cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
;;;509        /* Byte 10 */
;;;510        tmp = (u8)((CSD_Tab[2] & 0x0000FF00) >> 8);
000084  f3c62707          UBFX     r7,r6,#8,#8
000088  ea4f6316          LSR      r3,r6,#24             ;498
00008c  b125              CBZ      r5,|L11.152|
00008e  2d01              CMP      r5,#1                 ;489
000090  d002              BEQ      |L11.152|
;;;511        cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
;;;512        
;;;513        cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
;;;514        cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
;;;515        cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
;;;516        cardinfo->CardCapacity *= cardinfo->CardBlockSize;
;;;517      }
;;;518      else if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
000092  2d02              CMP      r5,#2
000094  d02b              BEQ      |L11.238|
000096  e03c              B        |L11.274|
                  |L11.152|
000098  0789              LSLS     r1,r1,#30             ;491
00009a  0d09              LSRS     r1,r1,#20             ;491
00009c  6101              STR      r1,[r0,#0x10]         ;491
00009e  b2e1              UXTB     r1,r4                 ;494
0000a0  6904              LDR      r4,[r0,#0x10]         ;495
0000a2  ea440181          ORR      r1,r4,r1,LSL #2       ;495
0000a6  6101              STR      r1,[r0,#0x10]         ;495
0000a8  6904              LDR      r4,[r0,#0x10]         ;499
0000aa  f3c305c2          UBFX     r5,r3,#3,#3           ;501
0000ae  ea441493          ORR      r4,r4,r3,LSR #6       ;499
0000b2  6104              STR      r4,[r0,#0x10]         ;499
0000b4  7505              STRB     r5,[r0,#0x14]         ;501
0000b6  f0030107          AND      r1,r3,#7              ;502
0000ba  7541              STRB     r1,[r0,#0x15]         ;502
0000bc  0951              LSRS     r1,r2,#5              ;506
0000be  7581              STRB     r1,[r0,#0x16]         ;506
0000c0  f3c20182          UBFX     r1,r2,#2,#3           ;507
0000c4  75c1              STRB     r1,[r0,#0x17]         ;507
0000c6  0791              LSLS     r1,r2,#30             ;508
0000c8  0f49              LSRS     r1,r1,#29             ;508
0000ca  7601              STRB     r1,[r0,#0x18]         ;508
0000cc  7e02              LDRB     r2,[r0,#0x18]         ;511
0000ce  4639              MOV      r1,r7                 ;508
0000d0  ea4212d7          ORR      r2,r2,r7,LSR #7       ;511
0000d4  7602              STRB     r2,[r0,#0x18]         ;511
0000d6  6902              LDR      r2,[r0,#0x10]         ;513
0000d8  7e03              LDRB     r3,[r0,#0x18]         ;514
0000da  7a04              LDRB     r4,[r0,#8]            ;515
0000dc  1c52              ADDS     r2,r2,#1              ;513
0000de  1c9b              ADDS     r3,r3,#2              ;514
0000e0  409a              LSLS     r2,r2,r3              ;514
0000e2  fa09f304          LSL      r3,r9,r4              ;515
0000e6  435a              MULS     r2,r3,r2              ;516
0000e8  e9c02311          STRD     r2,r3,[r0,#0x44]      ;516
0000ec  e011              B        |L11.274|
                  |L11.238|
;;;519      {
;;;520        /* Byte 7 */
;;;521        tmp = (u8)(CSD_Tab[1] & 0x000000FF);
;;;522        cardinfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
0000ee  06a1              LSLS     r1,r4,#26
0000f0  0a89              LSRS     r1,r1,#10
0000f2  6101              STR      r1,[r0,#0x10]
;;;523    
;;;524        /* Byte 8 */
;;;525        tmp = (u8)((CSD_Tab[2] & 0xFF000000) >> 24);
;;;526    
;;;527        cardinfo->SD_csd.DeviceSize |= (tmp << 8);
0000f4  6901              LDR      r1,[r0,#0x10]
0000f6  ea412103          ORR      r1,r1,r3,LSL #8
0000fa  6101              STR      r1,[r0,#0x10]
;;;528    
;;;529        /* Byte 9 */
;;;530        tmp = (u8)((CSD_Tab[2] & 0x00FF0000) >> 16);
;;;531    
;;;532        cardinfo->SD_csd.DeviceSize |= (tmp);
0000fc  6903              LDR      r3,[r0,#0x10]
0000fe  4639              MOV      r1,r7
000100  4313              ORRS     r3,r3,r2
000102  6103              STR      r3,[r0,#0x10]
;;;533    
;;;534        /* Byte 10 */
;;;535        tmp = (u8)((CSD_Tab[2] & 0x0000FF00) >> 8);
;;;536        
;;;537        cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
000104  6902              LDR      r2,[r0,#0x10]
000106  1c52              ADDS     r2,r2,#1
000108  04d2              LSLS     r2,r2,#19
;;;538        cardinfo->CardBlockSize = 512;    
00010a  6442              STR      r2,[r0,#0x44]
00010c  f44f7200          MOV      r2,#0x200
000110  6482              STR      r2,[r0,#0x48]
                  |L11.274|
;;;539      }
;;;540    
;;;541    
;;;542      cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
000112  f1000018          ADD      r0,r0,#0x18
000116  f3c11280          UBFX     r2,r1,#6,#1
00011a  7042              STRB     r2,[r0,#1]
;;;543      cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
00011c  ea4f6181          LSL      r1,r1,#26
000120  ea4f6151          LSR      r1,r1,#25
000124  7081              STRB     r1,[r0,#2]
;;;544    
;;;545      /* Byte 11 */
;;;546      tmp = (u8)(CSD_Tab[2] & 0x000000FF);
;;;547      cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
000126  7883              LDRB     r3,[r0,#2]
000128  b2f1              UXTB     r1,r6                 ;546
00012a  ea4313d1          ORR      r3,r3,r1,LSR #7
00012e  7083              STRB     r3,[r0,#2]
;;;548      cardinfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
000130  f001017f          AND      r1,r1,#0x7f
000134  70c1              STRB     r1,[r0,#3]
;;;549    
;;;550      /* Byte 12 */
;;;551      tmp = (u8)((CSD_Tab[3] & 0xFF000000) >> 24);
000136  f8da200c          LDR      r2,[r10,#0xc]  ; CSD_Tab
00013a  ea4f6112          LSR      r1,r2,#24
;;;552      cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
00013e  ea4f13d1          LSR      r3,r1,#7
000142  7103              STRB     r3,[r0,#4]
;;;553      cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
000144  f3c11341          UBFX     r3,r1,#5,#2
000148  7143              STRB     r3,[r0,#5]
;;;554      cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
00014a  f3c10382          UBFX     r3,r1,#2,#3
00014e  7183              STRB     r3,[r0,#6]
;;;555      cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
000150  ea4f7181          LSL      r1,r1,#30
000154  ea4f7111          LSR      r1,r1,#28
000158  71c1              STRB     r1,[r0,#7]
;;;556    
;;;557      /* Byte 13 */
;;;558      tmp = (u8)((CSD_Tab[3] & 0x00FF0000) >> 16);
;;;559      cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
00015a  79c3              LDRB     r3,[r0,#7]
00015c  f3c24107          UBFX     r1,r2,#16,#8          ;558
000160  ea431391          ORR      r3,r3,r1,LSR #6
000164  71c3              STRB     r3,[r0,#7]
;;;560      cardinfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
000166  f3c11340          UBFX     r3,r1,#5,#1
00016a  7203              STRB     r3,[r0,#8]
;;;561      cardinfo->SD_csd.Reserved3 = 0;
00016c  f8808009          STRB     r8,[r0,#9]
;;;562      cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
000170  f0010101          AND      r1,r1,#1
000174  7281              STRB     r1,[r0,#0xa]
;;;563    
;;;564      /* Byte 14 */
;;;565      tmp = (u8)((CSD_Tab[3] & 0x0000FF00) >> 8);
000176  f3c22107          UBFX     r1,r2,#8,#8
;;;566      cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
00017a  ea4f13d1          LSR      r3,r1,#7
00017e  72c3              STRB     r3,[r0,#0xb]
;;;567      cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
000180  f3c11380          UBFX     r3,r1,#6,#1
000184  7303              STRB     r3,[r0,#0xc]
;;;568      cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
000186  f3c11340          UBFX     r3,r1,#5,#1
00018a  7343              STRB     r3,[r0,#0xd]
;;;569      cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
00018c  f3c11300          UBFX     r3,r1,#4,#1
000190  7383              STRB     r3,[r0,#0xe]
;;;570      cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
000192  f3c10381          UBFX     r3,r1,#2,#2
000196  73c3              STRB     r3,[r0,#0xf]
;;;571      cardinfo->SD_csd.ECC = (tmp & 0x03);
000198  f0010103          AND      r1,r1,#3
00019c  7401              STRB     r1,[r0,#0x10]
;;;572    
;;;573      /* Byte 15 */
;;;574      tmp = (u8)(CSD_Tab[3] & 0x000000FF);
;;;575      cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
00019e  f3c20146          UBFX     r1,r2,#1,#7
0001a2  7441              STRB     r1,[r0,#0x11]
;;;576      cardinfo->SD_csd.Reserved4 = 1;
0001a4  464b              MOV      r3,r9
0001a6  f8809012          STRB     r9,[r0,#0x12]
;;;577    
;;;578    
;;;579      /* Byte 0 */
;;;580      tmp = (u8)((CID_Tab[0] & 0xFF000000) >> 24);
0001aa  4a30              LDR      r2,|L11.620|
0001ac  f1020210          ADD      r2,r2,#0x10
0001b0  6811              LDR      r1,[r2,#0]  ; CID_Tab
0001b2  ea4f6411          LSR      r4,r1,#24
;;;581      cardinfo->SD_cid.ManufacturerID = tmp;
0001b6  7504              STRB     r4,[r0,#0x14]
;;;582    
;;;583      /* Byte 1 */
;;;584      tmp = (u8)((CID_Tab[0] & 0x00FF0000) >> 16);
0001b8  f3c14407          UBFX     r4,r1,#16,#8
;;;585      cardinfo->SD_cid.OEM_AppliID = tmp << 8;
0001bc  ea4f2404          LSL      r4,r4,#8
0001c0  82c4              STRH     r4,[r0,#0x16]
;;;586    
;;;587      /* Byte 2 */
;;;588      tmp = (u8)((CID_Tab[0] & 0x000000FF00) >> 8);
;;;589      cardinfo->SD_cid.OEM_AppliID |= tmp;
0001c2  8ac5              LDRH     r5,[r0,#0x16]
0001c4  f3c12407          UBFX     r4,r1,#8,#8           ;588
0001c8  ea450504          ORR      r5,r5,r4
0001cc  82c5              STRH     r5,[r0,#0x16]
;;;590    
;;;591      /* Byte 3 */
;;;592      tmp = (u8)(CID_Tab[0] & 0x000000FF);
;;;593      cardinfo->SD_cid.ProdName1 = tmp << 24;
0001ce  ea4f6101          LSL      r1,r1,#24
0001d2  6181              STR      r1,[r0,#0x18]
;;;594    
;;;595      /* Byte 4 */
;;;596      tmp = (u8)((CID_Tab[1] & 0xFF000000) >> 24);
0001d4  6851              LDR      r1,[r2,#4]  ; CID_Tab
;;;597      cardinfo->SD_cid.ProdName1 |= tmp << 16;
0001d6  6985              LDR      r5,[r0,#0x18]
0001d8  ea4f6411          LSR      r4,r1,#24             ;596
0001dc  ea454404          ORR      r4,r5,r4,LSL #16
0001e0  6184              STR      r4,[r0,#0x18]
;;;598    
;;;599      /* Byte 5 */
;;;600      tmp = (u8)((CID_Tab[1] & 0x00FF0000) >> 16);
;;;601      cardinfo->SD_cid.ProdName1 |= tmp << 8;
0001e2  6985              LDR      r5,[r0,#0x18]
0001e4  f3c14407          UBFX     r4,r1,#16,#8          ;600
0001e8  ea452404          ORR      r4,r5,r4,LSL #8
0001ec  6184              STR      r4,[r0,#0x18]
;;;602    
;;;603      /* Byte 6 */
;;;604      tmp = (u8)((CID_Tab[1] & 0x0000FF00) >> 8);
;;;605      cardinfo->SD_cid.ProdName1 |= tmp;
0001ee  6985              LDR      r5,[r0,#0x18]
0001f0  f3c12407          UBFX     r4,r1,#8,#8           ;604
0001f4  ea450504          ORR      r5,r5,r4
0001f8  6185              STR      r5,[r0,#0x18]
;;;606    
;;;607      /* Byte 7 */
;;;608      tmp = (u8)(CID_Tab[1] & 0x000000FF);
;;;609      cardinfo->SD_cid.ProdName2 = tmp;
0001fa  7701              STRB     r1,[r0,#0x1c]
;;;610    
;;;611      /* Byte 8 */
;;;612      tmp = (u8)((CID_Tab[2] & 0xFF000000) >> 24);
0001fc  6891              LDR      r1,[r2,#8]  ; CID_Tab
0001fe  ea4f6411          LSR      r4,r1,#24
;;;613      cardinfo->SD_cid.ProdRev = tmp;
000202  7744              STRB     r4,[r0,#0x1d]
;;;614    
;;;615      /* Byte 9 */
;;;616      tmp = (u8)((CID_Tab[2] & 0x00FF0000) >> 16);
000204  f3c14407          UBFX     r4,r1,#16,#8
;;;617      cardinfo->SD_cid.ProdSN = tmp << 24;
000208  ea4f6404          LSL      r4,r4,#24
00020c  6204              STR      r4,[r0,#0x20]
;;;618    
;;;619      /* Byte 10 */
;;;620      tmp = (u8)((CID_Tab[2] & 0x0000FF00) >> 8);
;;;621      cardinfo->SD_cid.ProdSN |= tmp << 16;
00020e  6a05              LDR      r5,[r0,#0x20]
000210  f3c12407          UBFX     r4,r1,#8,#8           ;620
000214  ea454404          ORR      r4,r5,r4,LSL #16
000218  6204              STR      r4,[r0,#0x20]
;;;622    
;;;623      /* Byte 11 */
;;;624      tmp = (u8)(CID_Tab[2] & 0x000000FF);
;;;625      cardinfo->SD_cid.ProdSN |= tmp << 8;
00021a  6a04              LDR      r4,[r0,#0x20]
00021c  b2c9              UXTB     r1,r1                 ;624
00021e  ea442101          ORR      r1,r4,r1,LSL #8
000222  6201              STR      r1,[r0,#0x20]
;;;626    
;;;627      /* Byte 12 */
;;;628      tmp = (u8)((CID_Tab[3] & 0xFF000000) >> 24);
;;;629      cardinfo->SD_cid.ProdSN |= tmp;
000224  68d1              LDR      r1,[r2,#0xc]  ; CID_Tab
000226  6a04              LDR      r4,[r0,#0x20]
000228  ea446411          ORR      r4,r4,r1,LSR #24
00022c  6204              STR      r4,[r0,#0x20]
;;;630    
;;;631      /* Byte 13 */
;;;632      tmp = (u8)((CID_Tab[3] & 0x00FF0000) >> 16);
;;;633      cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
00022e  f8904024          LDRB     r4,[r0,#0x24]
000232  f3c14207          UBFX     r2,r1,#16,#8          ;632
000236  ea441412          ORR      r4,r4,r2,LSR #4
00023a  f8804024          STRB     r4,[r0,#0x24]
;;;634      cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
00023e  ea4f7202          LSL      r2,r2,#28
000242  ea4f5212          LSR      r2,r2,#20
000246  84c2              STRH     r2,[r0,#0x26]
;;;635    
;;;636      /* Byte 14 */
;;;637      tmp = (u8)((CID_Tab[3] & 0x0000FF00) >> 8);
;;;638      cardinfo->SD_cid.ManufactDate |= tmp;
000248  8cc4              LDRH     r4,[r0,#0x26]
00024a  f3c12207          UBFX     r2,r1,#8,#8           ;637
00024e  ea440402          ORR      r4,r4,r2
000252  84c4              STRH     r4,[r0,#0x26]
;;;639    
;;;640      /* Byte 15 */
;;;641      tmp = (u8)(CID_Tab[3] & 0x000000FF);
;;;642      cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
000254  f3c10146          UBFX     r1,r1,#1,#7
000258  f8801028          STRB     r1,[r0,#0x28]
;;;643      cardinfo->SD_cid.Reserved2 = 1;
00025c  f8803029          STRB     r3,[r0,#0x29]
;;;644      
;;;645      return(errorstatus);
000260  4660              MOV      r0,r12
;;;646    }
000262  e8bd87f0          POP      {r4-r10,pc}
;;;647    
                          ENDP

000266  0000              DCW      0x0000
                  |L11.616|
                          DCD      ||.data||
                  |L11.620|
                          DCD      ||.bss||

                          AREA ||i.SD_GetTransferState||, CODE, READONLY, ALIGN=2

                  SD_GetTransferState PROC
;;;1660   *******************************************************************************/
;;;1661   SDTransferState SD_GetTransferState(void)
000000  4803              LDR      r0,|L12.16|
;;;1662   {
;;;1663     if (SDIO->STA & (SDIO_FLAG_TXACT | SDIO_FLAG_RXACT))
000002  6b40              LDR      r0,[r0,#0x34]
000004  f4105040          ANDS     r0,r0,#0x3000
000008  d000              BEQ      |L12.12|
;;;1664     {
;;;1665       return(SD_TRANSFER_IN_PROGRESS);
00000a  2001              MOVS     r0,#1
                  |L12.12|
;;;1666     }
;;;1667     else
;;;1668     {
;;;1669       return(SD_NO_TRANSFER);
;;;1670     }
;;;1671   }
00000c  4770              BX       lr
;;;1672   
                          ENDP

00000e  0000              DCW      0x0000
                  |L12.16|
                          DCD      0x40018000

                          AREA ||i.SD_Init||, CODE, READONLY, ALIGN=2

                  SD_Init PROC
;;;127    *******************************************************************************/
;;;128    SD_Error SD_Init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;129    {
;;;130      SD_Error errorstatus = SD_OK;
;;;131    
;;;132      {
;;;133      GPIO_InitTypeDef GPIO_InitStructure;
;;;134    
;;;135      RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;136    
;;;137      GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_5;
00000a  2020              MOVS     r0,#0x20
00000c  f8ad0000          STRH     r0,[sp,#0]
;;;138      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;139      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;140      GPIO_Init(GPIOB, &GPIO_InitStructure);
000016  4d22              LDR      r5,|L13.160|
000018  2403              MOVS     r4,#3                 ;139
00001a  f88d4002          STRB     r4,[sp,#2]            ;139
00001e  4669              MOV      r1,sp
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       GPIO_Init
;;;141      
;;;142      GPIO_ResetBits(GPIOB, GPIO_Pin_5) ;
000026  2120              MOVS     r1,#0x20
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       GPIO_ResetBits
00002e  2101              MOVS     r1,#1
000030  2030              MOVS     r0,#0x30
000032  f7fffffe          BL       RCC_APB2PeriphClockCmd
000036  f44f50f8          MOV      r0,#0x1f00
00003a  f8ad0000          STRH     r0,[sp,#0]
00003e  f88d4002          STRB     r4,[sp,#2]
000042  2018              MOVS     r0,#0x18
000044  f88d0003          STRB     r0,[sp,#3]
000048  4669              MOV      r1,sp
00004a  4816              LDR      r0,|L13.164|
00004c  f7fffffe          BL       GPIO_Init
000050  2004              MOVS     r0,#4
000052  f8ad0000          STRH     r0,[sp,#0]
000056  4669              MOV      r1,sp
000058  4813              LDR      r0,|L13.168|
00005a  f7fffffe          BL       GPIO_Init
;;;143      }
;;;144      
;;;145      /* Configure SDIO interface GPIO */
;;;146      GPIO_Configuration();
;;;147    
;;;148      /* Enable the SDIO AHB Clock */
;;;149      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SDIO, ENABLE);
00005e  2101              MOVS     r1,#1
000060  0288              LSLS     r0,r1,#10
000062  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;150    
;;;151      /* Enable the DMA2 Clock */
;;;152      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
000066  2101              MOVS     r1,#1
000068  2002              MOVS     r0,#2
00006a  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;153    
;;;154      SDIO_DeInit();
00006e  f7fffffe          BL       SDIO_DeInit
;;;155    
;;;156      errorstatus = SD_PowerON();
000072  f7fffffe          BL       SD_PowerON
;;;157    
;;;158      if (errorstatus != SD_OK)
000076  282a              CMP      r0,#0x2a
000078  d111              BNE      |L13.158|
;;;159      {
;;;160        /* CMD Response TimeOut (wait for CMDSENT flag) */
;;;161        return(errorstatus);
;;;162      }
;;;163    
;;;164      errorstatus = SD_InitializeCards();
00007a  f7fffffe          BL       SD_InitializeCards
00007e  4604              MOV      r4,r0
;;;165    
;;;166      if (errorstatus != SD_OK)
000080  282a              CMP      r0,#0x2a
000082  d10c              BNE      |L13.158|
;;;167      {
;;;168        /* CMD Response TimeOut (wait for CMDSENT flag) */
;;;169        return(errorstatus);
;;;170      }
;;;171    
;;;172      /* Configure the SDIO peripheral */
;;;173      /* HCLK = 72 MHz, SDIOCLK = 72 MHz, SDIO_CK = HCLK/(2 + 1) = 24 MHz */  
;;;174      SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
000084  4909              LDR      r1,|L13.172|
000086  2001              MOVS     r0,#1
;;;175      SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
000088  2200              MOVS     r2,#0
00008a  7008              STRB     r0,[r1,#0]            ;174
;;;176      SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
00008c  604a              STR      r2,[r1,#4]  ; SDIO_InitStructure
;;;177      SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
00008e  608a              STR      r2,[r1,#8]  ; SDIO_InitStructure
;;;178      SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
000090  60ca              STR      r2,[r1,#0xc]  ; SDIO_InitStructure
;;;179      SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
000092  610a              STR      r2,[r1,#0x10]  ; SDIO_InitStructure
;;;180      SDIO_Init(&SDIO_InitStructure);
000094  4608              MOV      r0,r1
000096  614a              STR      r2,[r1,#0x14]  ; SDIO_InitStructure
000098  f7fffffe          BL       SDIO_Init
;;;181    
;;;182      return(errorstatus);
00009c  4620              MOV      r0,r4
                  |L13.158|
;;;183    }
00009e  bd38              POP      {r3-r5,pc}
;;;184    
                          ENDP

                  |L13.160|
                          DCD      0x40010c00
                  |L13.164|
                          DCD      0x40011000
                  |L13.168|
                          DCD      0x40011400
                  |L13.172|
                          DCD      ||.bss||+0x20

                          AREA ||i.SD_InitializeCards||, CODE, READONLY, ALIGN=2

                  SD_InitializeCards PROC
;;;354    *******************************************************************************/
;;;355    SD_Error SD_InitializeCards(void)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;356    {
;;;357      SD_Error errorstatus = SD_OK;
;;;358      u16 rca = 0x01;
000004  2001              MOVS     r0,#1
000006  252a              MOVS     r5,#0x2a              ;357
000008  f8ad0000          STRH     r0,[sp,#0]
;;;359    
;;;360      if (SDIO_GetPowerState() == SDIO_PowerState_OFF)
00000c  f7fffffe          BL       SDIO_GetPowerState
000010  b3b8              CBZ      r0,|L14.130|
;;;361      {
;;;362        errorstatus = SD_REQUEST_NOT_APPLICABLE;
;;;363        return(errorstatus);
;;;364      }
;;;365    
;;;366      if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
000012  f8df90ec          LDR      r9,|L14.256|
000016  f8d90004          LDR      r0,[r9,#4]  ; CardType
00001a  2804              CMP      r0,#4
00001c  d06e              BEQ      |L14.252|
;;;367      {
;;;368        /* Send CMD2 ALL_SEND_CID */
;;;369        SDIO_CmdInitStructure.SDIO_Argument = 0x0;
00001e  4c39              LDR      r4,|L14.260|
;;;370        SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_ALL_SEND_CID;
;;;371        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
000020  f04f0ac0          MOV      r10,#0xc0
000024  2600              MOVS     r6,#0                 ;369
000026  2002              MOVS     r0,#2                 ;370
000028  f8c4a008          STR      r10,[r4,#8]  ; SDIO_CmdInitStructure
00002c  e9c46000          STRD     r6,r0,[r4,#0]
;;;372        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;373        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000030  f44f6880          MOV      r8,#0x400
;;;374        SDIO_SendCommand(&SDIO_CmdInitStructure);
000034  e9c46803          STRD     r6,r8,[r4,#0xc]
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       SDIO_SendCommand
;;;375    
;;;376        errorstatus = CmdResp2Error();
00003e  f7fffffe          BL       CmdResp2Error
000042  4605              MOV      r5,r0
;;;377    
;;;378        if (SD_OK != errorstatus)
000044  282a              CMP      r0,#0x2a
000046  d11e              BNE      |L14.134|
;;;379        {
;;;380          return(errorstatus);
;;;381        }
;;;382    
;;;383        CID_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
000048  2000              MOVS     r0,#0
00004a  f7fffffe          BL       SDIO_GetResponse
00004e  f1a40728          SUB      r7,r4,#0x28
;;;384        CID_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
000052  6038              STR      r0,[r7,#0]  ; CID_Tab
000054  2004              MOVS     r0,#4
000056  f7fffffe          BL       SDIO_GetResponse
;;;385        CID_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
00005a  6078              STR      r0,[r7,#4]  ; CID_Tab
00005c  2008              MOVS     r0,#8
00005e  f7fffffe          BL       SDIO_GetResponse
;;;386        CID_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
000062  60b8              STR      r0,[r7,#8]  ; CID_Tab
000064  200c              MOVS     r0,#0xc
000066  f7fffffe          BL       SDIO_GetResponse
;;;387      }
;;;388      if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) ||  (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) ||  (SDIO_SECURE_DIGITAL_IO_COMBO_CARD == CardType)
00006a  60f8              STR      r0,[r7,#0xc]  ; CID_Tab
00006c  f8d90004          LDR      r0,[r9,#4]  ; CardType
000070  464f              MOV      r7,r9
000072  b150              CBZ      r0,|L14.138|
000074  2801              CMP      r0,#1
000076  d008              BEQ      |L14.138|
000078  2806              CMP      r0,#6
00007a  d006              BEQ      |L14.138|
;;;389          ||  (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
00007c  2802              CMP      r0,#2
00007e  d004              BEQ      |L14.138|
000080  e015              B        |L14.174|
                  |L14.130|
000082  e7ff              B        |L14.132|
                  |L14.132|
000084  2025              MOVS     r0,#0x25              ;362
                  |L14.134|
;;;390      {
;;;391        /* Send CMD3 SET_REL_ADDR with argument 0 */
;;;392        /* SD Card publishes its RCA. */
;;;393        SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;394        SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_REL_ADDR;
;;;395        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;396        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;397        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;398        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;399    
;;;400        errorstatus = CmdResp6Error(SDIO_SET_REL_ADDR, &rca);
;;;401    
;;;402        if (SD_OK != errorstatus)
;;;403        {
;;;404          return(errorstatus);
;;;405        }
;;;406      }
;;;407    
;;;408      if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
;;;409      {
;;;410        RCA = rca;
;;;411    
;;;412        /* Send CMD9 SEND_CSD with argument as card's RCA */
;;;413        SDIO_CmdInitStructure.SDIO_Argument = (u32)(rca << 16);
;;;414        SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_CSD;
;;;415        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
;;;416        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;417        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;418        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;419    
;;;420        errorstatus = CmdResp2Error();
;;;421    
;;;422        if (SD_OK != errorstatus)
;;;423        {
;;;424          return(errorstatus);
;;;425        }
;;;426    
;;;427        CSD_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
;;;428        CSD_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
;;;429        CSD_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
;;;430        CSD_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
;;;431      }
;;;432    
;;;433      errorstatus = SD_OK; /* All cards get intialized */
;;;434    
;;;435      return(errorstatus);
;;;436    }
000086  e8bd8ff8          POP      {r3-r11,pc}
                  |L14.138|
00008a  2003              MOVS     r0,#3                 ;394
00008c  e9c46000          STRD     r6,r0,[r4,#0]         ;394
000090  f1040108          ADD      r1,r4,#8              ;395
000094  2040              MOVS     r0,#0x40              ;395
000096  e8a10141          STM      r1!,{r0,r6,r8}        ;395
00009a  481a              LDR      r0,|L14.260|
00009c  f7fffffe          BL       SDIO_SendCommand
0000a0  4669              MOV      r1,sp                 ;400
0000a2  2003              MOVS     r0,#3                 ;400
0000a4  f7fffffe          BL       CmdResp6Error
0000a8  4605              MOV      r5,r0                 ;400
0000aa  282a              CMP      r0,#0x2a              ;402
0000ac  d1eb              BNE      |L14.134|
                  |L14.174|
0000ae  6878              LDR      r0,[r7,#4]            ;408  ; CardType
0000b0  2804              CMP      r0,#4                 ;408
0000b2  d023              BEQ      |L14.252|
0000b4  f8bd0000          LDRH     r0,[sp,#0]            ;410
0000b8  60b8              STR      r0,[r7,#8]            ;413  ; RCA
0000ba  0400              LSLS     r0,r0,#16             ;413
0000bc  6020              STR      r0,[r4,#0]            ;414  ; SDIO_CmdInitStructure
0000be  2009              MOVS     r0,#9                 ;414
0000c0  e9c40a01          STRD     r0,r10,[r4,#4]        ;414
0000c4  e9c46803          STRD     r6,r8,[r4,#0xc]       ;414
0000c8  480e              LDR      r0,|L14.260|
0000ca  f7fffffe          BL       SDIO_SendCommand
0000ce  f7fffffe          BL       CmdResp2Error
0000d2  4605              MOV      r5,r0                 ;420
0000d4  282a              CMP      r0,#0x2a              ;422
0000d6  d1d6              BNE      |L14.134|
0000d8  2000              MOVS     r0,#0                 ;427
0000da  f7fffffe          BL       SDIO_GetResponse
0000de  4c09              LDR      r4,|L14.260|
0000e0  3c38              SUBS     r4,r4,#0x38           ;427
0000e2  6020              STR      r0,[r4,#0]            ;428  ; CSD_Tab
0000e4  2004              MOVS     r0,#4                 ;428
0000e6  f7fffffe          BL       SDIO_GetResponse
0000ea  6060              STR      r0,[r4,#4]            ;429  ; CSD_Tab
0000ec  2008              MOVS     r0,#8                 ;429
0000ee  f7fffffe          BL       SDIO_GetResponse
0000f2  60a0              STR      r0,[r4,#8]            ;430  ; CSD_Tab
0000f4  200c              MOVS     r0,#0xc               ;430
0000f6  f7fffffe          BL       SDIO_GetResponse
0000fa  60e0              STR      r0,[r4,#0xc]          ;430  ; CSD_Tab
                  |L14.252|
0000fc  4628              MOV      r0,r5                 ;435
0000fe  e7c2              B        |L14.134|
;;;437    
                          ENDP

                  |L14.256|
                          DCD      ||.data||
                  |L14.260|
                          DCD      ||.bss||+0x38

                          AREA ||i.SD_PowerOFF||, CODE, READONLY, ALIGN=1

                  SD_PowerOFF PROC
;;;336    *******************************************************************************/
;;;337    SD_Error SD_PowerOFF(void)
000000  b510              PUSH     {r4,lr}
;;;338    {
;;;339      SD_Error errorstatus = SD_OK;
000002  242a              MOVS     r4,#0x2a
;;;340    
;;;341      /* Set Power State to OFF */
;;;342      SDIO_SetPowerState(SDIO_PowerState_OFF);
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       SDIO_SetPowerState
;;;343    
;;;344      return(errorstatus);
00000a  4620              MOV      r0,r4
;;;345    }
00000c  bd10              POP      {r4,pc}
;;;346    
                          ENDP


                          AREA ||i.SD_PowerON||, CODE, READONLY, ALIGN=2

                  SD_PowerON PROC
;;;192    *******************************************************************************/
;;;193    SD_Error SD_PowerON(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;194    {
;;;195      SD_Error errorstatus = SD_OK;
;;;196      u32 response = 0, count = 0;
000004  f04f0a00          MOV      r10,#0
;;;197      bool validvoltage = FALSE;
;;;198      u32 SDType = SD_STD_CAPACITY;
;;;199    
;;;200      /* Power ON Sequence -------------------------------------------------------*/
;;;201      /* Configure the SDIO peripheral */
;;;202      SDIO_InitStructure.SDIO_ClockDiv = SDIO_INIT_CLK_DIV; /* HCLK = 72MHz, SDIOCLK = 72MHz, SDIO_CK = HCLK/(178 + 2) = 400 KHz */
000008  486a              LDR      r0,|L16.436|
00000a  21b2              MOVS     r1,#0xb2
00000c  4656              MOV      r6,r10                ;196
00000e  7001              STRB     r1,[r0,#0]
;;;203      SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;204      SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
000010  f8c0a004          STR      r10,[r0,#4]  ; SDIO_InitStructure
;;;205      SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
000014  f8c0a008          STR      r10,[r0,#8]  ; SDIO_InitStructure
;;;206      SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
000018  f8c0a00c          STR      r10,[r0,#0xc]  ; SDIO_InitStructure
;;;207      SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
00001c  f8c0a010          STR      r10,[r0,#0x10]  ; SDIO_InitStructure
000020  4657              MOV      r7,r10                ;198
000022  4654              MOV      r4,r10                ;203
;;;208      SDIO_Init(&SDIO_InitStructure);
000024  f8c0a014          STR      r10,[r0,#0x14]  ; SDIO_InitStructure
000028  f7fffffe          BL       SDIO_Init
;;;209    
;;;210      /* Set Power State to ON */
;;;211      SDIO_SetPowerState(SDIO_PowerState_ON);
00002c  2003              MOVS     r0,#3
00002e  f7fffffe          BL       SDIO_SetPowerState
;;;212    
;;;213      /* Enable SDIO Clock */
;;;214      SDIO_ClockCmd(ENABLE);
000032  2001              MOVS     r0,#1
000034  f7fffffe          BL       SDIO_ClockCmd
;;;215    
;;;216      /* CMD0: GO_IDLE_STATE -------------------------------------------------------*/
;;;217      /* No CMD response required */
;;;218      SDIO_CmdInitStructure.SDIO_Argument = 0x0;
000038  f8df8178          LDR      r8,|L16.436|
;;;219      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_GO_IDLE_STATE;
;;;220      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_No;
;;;221      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;222      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
00003c  f44f6980          MOV      r9,#0x400
000040  f1080818          ADD      r8,r8,#0x18           ;218
;;;223      SDIO_SendCommand(&SDIO_CmdInitStructure);
000044  4640              MOV      r0,r8
000046  f8c84000          STR      r4,[r8,#0]            ;219  ; SDIO_CmdInitStructure
00004a  f8c84004          STR      r4,[r8,#4]            ;220  ; SDIO_CmdInitStructure
00004e  f8c84008          STR      r4,[r8,#8]            ;221  ; SDIO_CmdInitStructure
000052  e9c84903          STRD     r4,r9,[r8,#0xc]
000056  f7fffffe          BL       SDIO_SendCommand
00005a  f2427b10          MOV      r11,#0x2710
00005e  465d              MOV      r5,r11
000060  e001              B        |L16.102|
                  |L16.98|
000062  1e6d              SUBS     r5,r5,#1
000064  d01d              BEQ      |L16.162|
                  |L16.102|
000066  2080              MOVS     r0,#0x80
000068  f7fffffe          BL       SDIO_GetFlagStatus
00006c  2800              CMP      r0,#0
00006e  d0f8              BEQ      |L16.98|
000070  b1bd              CBZ      r5,|L16.162|
000072  f24050ff          MOV      r0,#0x5ff
000076  f7fffffe          BL       SDIO_ClearFlag
;;;224    
;;;225      errorstatus = CmdError();
;;;226    
;;;227      if (errorstatus != SD_OK)
;;;228      {
;;;229        /* CMD Response TimeOut (wait for CMDSENT flag) */
;;;230        return(errorstatus);
;;;231      }
;;;232    
;;;233      /* CMD8: SEND_IF_COND --------------------------------------------------------*/
;;;234      /* Send CMD8 to verify SD card interface operating condition */
;;;235      /* Argument: - [31:12]: Reserved (shall be set to '0')
;;;236                   - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
;;;237                   - [7:0]: Check Pattern (recommended 0xAA) */
;;;238      /* CMD Response: R7 */
;;;239      SDIO_CmdInitStructure.SDIO_Argument = SD_CHECK_PATTERN;
00007a  f44f70d5          MOV      r0,#0x1aa
;;;240      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_IF_COND;
00007e  f8c80000          STR      r0,[r8,#0]  ; SDIO_CmdInitStructure
000082  4645              MOV      r5,r8                 ;239
000084  2008              MOVS     r0,#8
;;;241      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
000086  f04f0840          MOV      r8,#0x40
00008a  e9c50801          STRD     r0,r8,[r5,#4]
;;;242      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;243      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;244      SDIO_SendCommand(&SDIO_CmdInitStructure);
00008e  4849              LDR      r0,|L16.436|
000090  e9c54903          STRD     r4,r9,[r5,#0xc]
000094  3018              ADDS     r0,r0,#0x18
000096  f7fffffe          BL       SDIO_SendCommand
00009a  4a47              LDR      r2,|L16.440|
00009c  4658              MOV      r0,r11
00009e  6b51              LDR      r1,[r2,#0x34]
0000a0  e006              B        |L16.176|
                  |L16.162|
0000a2  2003              MOVS     r0,#3
                  |L16.164|
;;;245    
;;;246      errorstatus = CmdResp7Error();
;;;247    
;;;248      if (errorstatus == SD_OK)
;;;249      {
;;;250        CardType = SDIO_STD_CAPACITY_SD_CARD_V2_0; /* SD Card 2.0 */
;;;251        SDType = SD_HIGH_CAPACITY;
;;;252      }
;;;253      else
;;;254      {
;;;255        /* CMD55 */
;;;256        SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;257        SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
;;;258        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;259        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;260        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;261        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;262        errorstatus = CmdResp1Error(SDIO_APP_CMD);
;;;263      }
;;;264      /* CMD55 */
;;;265      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;266      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
;;;267      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;268      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;269      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;270      SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;271      errorstatus = CmdResp1Error(SDIO_APP_CMD);
;;;272    
;;;273      /* If errorstatus is Command TimeOut, it is a MMC card */
;;;274      /* If errorstatus is SD_OK it is a SD card: SD card 2.0 (voltage range mismatch)
;;;275         or SD card 1.x */
;;;276      if (errorstatus == SD_OK)
;;;277      {
;;;278        /* SD CARD */
;;;279        /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
;;;280        while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
;;;281        {
;;;282    
;;;283          /* SEND CMD55 APP_CMD with RCA as 0 */
;;;284          SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;285          SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
;;;286          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;287          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;288          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;289          SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;290    
;;;291          errorstatus = CmdResp1Error(SDIO_APP_CMD);
;;;292    
;;;293          if (errorstatus != SD_OK)
;;;294          {
;;;295            return(errorstatus);
;;;296          }
;;;297          SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;
;;;298          SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_OP_COND;
;;;299          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;300          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;301          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;302          SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;303    
;;;304          errorstatus = CmdResp3Error();
;;;305          if (errorstatus != SD_OK)
;;;306          {
;;;307            return(errorstatus);
;;;308          }
;;;309    
;;;310          response = SDIO_GetResponse(SDIO_RESP1);
;;;311          validvoltage = (bool) (((response >> 31) == 1) ? 1 : 0);
;;;312          count++;
;;;313        }
;;;314        if (count >= SD_MAX_VOLT_TRIAL)
;;;315        {
;;;316          errorstatus = SD_INVALID_VOLTRANGE;
;;;317          return(errorstatus);
;;;318        }
;;;319    
;;;320        if (response &= SD_HIGH_CAPACITY)
;;;321        {
;;;322          CardType = SDIO_HIGH_CAPACITY_SD_CARD;
;;;323        }
;;;324    
;;;325      }/* else MMC Card */
;;;326    
;;;327      return(errorstatus);
;;;328    }
0000a4  e8bd9ff0          POP      {r4-r12,pc}
                  |L16.168|
0000a8  4943              LDR      r1,|L16.440|
0000aa  f1a00001          SUB      r0,r0,#1
0000ae  6b49              LDR      r1,[r1,#0x34]
                  |L16.176|
0000b0  f0110f45          TST      r1,#0x45
0000b4  d014              BEQ      |L16.224|
0000b6  b108              CBZ      r0,|L16.188|
0000b8  0748              LSLS     r0,r1,#29
0000ba  d514              BPL      |L16.230|
                  |L16.188|
0000bc  2004              MOVS     r0,#4
0000be  f7fffffe          BL       SDIO_ClearFlag
0000c2  2037              MOVS     r0,#0x37              ;257
0000c4  e9c54000          STRD     r4,r0,[r5,#0]         ;257
0000c8  f8c59010          STR      r9,[r5,#0x10]         ;261  ; SDIO_CmdInitStructure
0000cc  4839              LDR      r0,|L16.436|
0000ce  e9c58402          STRD     r8,r4,[r5,#8]         ;261
0000d2  3018              ADDS     r0,r0,#0x18           ;261
0000d4  f7fffffe          BL       SDIO_SendCommand
0000d8  2037              MOVS     r0,#0x37              ;262
0000da  f7fffffe          BL       CmdResp1Error
0000de  e00b              B        |L16.248|
                  |L16.224|
0000e0  2800              CMP      r0,#0                 ;262
0000e2  d1e1              BNE      |L16.168|
0000e4  e7ea              B        |L16.188|
                  |L16.230|
0000e6  0648              LSLS     r0,r1,#25             ;262
0000e8  d502              BPL      |L16.240|
0000ea  2040              MOVS     r0,#0x40              ;262
0000ec  f7fffffe          BL       SDIO_ClearFlag
                  |L16.240|
0000f0  4832              LDR      r0,|L16.444|
0000f2  2101              MOVS     r1,#1                 ;250
0000f4  078f              LSLS     r7,r1,#30             ;251
0000f6  6041              STR      r1,[r0,#4]            ;251  ; CardType
                  |L16.248|
0000f8  2100              MOVS     r1,#0                 ;265
0000fa  2237              MOVS     r2,#0x37              ;266
0000fc  e8850106          STM      r5,{r1,r2,r8}         ;266
000100  482c              LDR      r0,|L16.436|
000102  e9c51903          STRD     r1,r9,[r5,#0xc]       ;270
000106  46ab              MOV      r11,r5                ;265
000108  3018              ADDS     r0,r0,#0x18           ;270
00010a  f7fffffe          BL       SDIO_SendCommand
00010e  2037              MOVS     r0,#0x37              ;271
000110  f7fffffe          BL       CmdResp1Error
000114  4605              MOV      r5,r0                 ;271
000116  282a              CMP      r0,#0x2a              ;276
000118  d03c              BEQ      |L16.404|
00011a  e049              B        |L16.432|
                  |L16.284|
00011c  2500              MOVS     r5,#0                 ;284
00011e  2137              MOVS     r1,#0x37              ;285
000120  e9cb5100          STRD     r5,r1,[r11,#0]        ;285
000124  e9cb8502          STRD     r8,r5,[r11,#8]        ;285
000128  4822              LDR      r0,|L16.436|
00012a  f8cb9010          STR      r9,[r11,#0x10]        ;289  ; SDIO_CmdInitStructure
00012e  3018              ADDS     r0,r0,#0x18           ;289
000130  f7fffffe          BL       SDIO_SendCommand
000134  2037              MOVS     r0,#0x37              ;291
000136  f7fffffe          BL       CmdResp1Error
00013a  282a              CMP      r0,#0x2a              ;293
00013c  d1b2              BNE      |L16.164|
00013e  4820              LDR      r0,|L16.448|
000140  ea470100          ORR      r1,r7,r0              ;297
000144  f8cb1000          STR      r1,[r11,#0]           ;298  ; SDIO_CmdInitStructure
000148  2129              MOVS     r1,#0x29              ;298
00014a  f8cb500c          STR      r5,[r11,#0xc]         ;300  ; SDIO_CmdInitStructure
00014e  e9cb1801          STRD     r1,r8,[r11,#4]        ;300
000152  4818              LDR      r0,|L16.436|
000154  f8cb9010          STR      r9,[r11,#0x10]        ;302  ; SDIO_CmdInitStructure
000158  3018              ADDS     r0,r0,#0x18           ;302
00015a  f7fffffe          BL       SDIO_SendCommand
00015e  4916              LDR      r1,|L16.440|
000160  252a              MOVS     r5,#0x2a              ;302
                  |L16.354|
000162  6b48              LDR      r0,[r1,#0x34]         ;302
000164  f0100f45          TST      r0,#0x45              ;302
000168  d0fb              BEQ      |L16.354|
00016a  0740              LSLS     r0,r0,#29             ;302
00016c  d505              BPL      |L16.378|
00016e  2403              MOVS     r4,#3                 ;302
000170  2004              MOVS     r0,#4                 ;302
000172  f7fffffe          BL       SDIO_ClearFlag
000176  4620              MOV      r0,r4                 ;302
000178  e794              B        |L16.164|
                  |L16.378|
00017a  f24050ff          MOV      r0,#0x5ff
00017e  f7fffffe          BL       SDIO_ClearFlag
000182  2000              MOVS     r0,#0                 ;310
000184  f7fffffe          BL       SDIO_GetResponse
000188  4682              MOV      r10,r0                ;310
00018a  0fc0              LSRS     r0,r0,#31             ;311
00018c  f1060601          ADD      r6,r6,#1              ;312
000190  d002              BEQ      |L16.408|
000192  e003              B        |L16.412|
                  |L16.404|
000194  f64f74ff          MOV      r4,#0xffff            ;280
                  |L16.408|
000198  42a6              CMP      r6,r4                 ;280
00019a  d3bf              BCC      |L16.284|
                  |L16.412|
00019c  42a6              CMP      r6,r4                 ;314
00019e  d301              BCC      |L16.420|
0001a0  201b              MOVS     r0,#0x1b              ;316
0001a2  e77f              B        |L16.164|
                  |L16.420|
0001a4  f01a4f80          TST      r10,#0x40000000       ;320
0001a8  d002              BEQ      |L16.432|
0001aa  4804              LDR      r0,|L16.444|
0001ac  2102              MOVS     r1,#2                 ;322
0001ae  6041              STR      r1,[r0,#4]            ;322  ; CardType
                  |L16.432|
0001b0  4628              MOV      r0,r5                 ;327
0001b2  e777              B        |L16.164|
;;;329    
                          ENDP

                  |L16.436|
                          DCD      ||.bss||+0x20
                  |L16.440|
                          DCD      0x40018000
                  |L16.444|
                          DCD      ||.data||
                  |L16.448|
                          DCD      0x80100000

                          AREA ||i.SD_ProcessIRQSrc||, CODE, READONLY, ALIGN=2

                  SD_ProcessIRQSrc PROC
;;;1963   *******************************************************************************/
;;;1964   SD_Error SD_ProcessIRQSrc(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1965   {
;;;1966     u32 count = 0, restwords = 0;
;;;1967   
;;;1968     if (DeviceMode == SD_INTERRUPT_MODE)
000004  4d63              LDR      r5,|L17.404|
000006  2400              MOVS     r4,#0                 ;1966
000008  68e8              LDR      r0,[r5,#0xc]  ; DeviceMode
00000a  2801              CMP      r0,#1
00000c  d141              BNE      |L17.146|
;;;1969     {
;;;1970       if (SDIO_GetITStatus(SDIO_IT_RXFIFOHF) != RESET)
00000e  03c0              LSLS     r0,r0,#15
000010  f7fffffe          BL       SDIO_GetITStatus
000014  b160              CBZ      r0,|L17.48|
;;;1971       {
;;;1972         for (count = 0; count < SD_HALFFIFO; count++)
;;;1973         {
;;;1974           *(DestBuffer + count) = SDIO_ReadData();
000016  bf00              NOP      
                  |L17.24|
000018  f7fffffe          BL       SDIO_ReadData
00001c  6a69              LDR      r1,[r5,#0x24]  ; DestBuffer
00001e  f8410024          STR      r0,[r1,r4,LSL #2]
000022  1c64              ADDS     r4,r4,#1              ;1972
000024  2c08              CMP      r4,#8                 ;1972
000026  d3f7              BCC      |L17.24|
;;;1975         }
;;;1976         DestBuffer += SD_HALFFIFO;
000028  6a68              LDR      r0,[r5,#0x24]  ; DestBuffer
00002a  3020              ADDS     r0,r0,#0x20
;;;1977         NumberOfBytes += SD_HALFFIFOBYTES;
00002c  6268              STR      r0,[r5,#0x24]  ; DestBuffer
00002e  e02d              B        |L17.140|
                  |L17.48|
;;;1978       }
;;;1979       else if (SDIO_GetITStatus(SDIO_IT_TXFIFOHE) != RESET)
000030  f44f4080          MOV      r0,#0x4000
000034  f7fffffe          BL       SDIO_GetITStatus
000038  b358              CBZ      r0,|L17.146|
;;;1980       {
;;;1981         if ((TotalNumberOfBytes - NumberOfBytes) < SD_HALFFIFOBYTES)
00003a  69e9              LDR      r1,[r5,#0x1c]  ; NumberOfBytes
00003c  6928              LDR      r0,[r5,#0x10]  ; TotalNumberOfBytes
00003e  1a41              SUBS     r1,r0,r1
000040  2920              CMP      r1,#0x20
000042  d218              BCS      |L17.118|
;;;1982         {
;;;1983           restwords = ((TotalNumberOfBytes - NumberOfBytes) %  4 == 0) ?
000044  69e9              LDR      r1,[r5,#0x1c]  ; NumberOfBytes
000046  1a41              SUBS     r1,r0,r1
000048  0789              LSLS     r1,r1,#30
;;;1984                       ((TotalNumberOfBytes - NumberOfBytes) / 4) :
;;;1985                       ((TotalNumberOfBytes - NumberOfBytes) / 4 + 1);
00004a  69e9              LDR      r1,[r5,#0x1c]  ; NumberOfBytes
00004c  eba00001          SUB      r0,r0,r1
000050  ea4f0690          LSR      r6,r0,#2
000054  d00c              BEQ      |L17.112|
000056  1c76              ADDS     r6,r6,#1
000058  e00a              B        |L17.112|
                  |L17.90|
;;;1986   
;;;1987           for (count = 0; count < restwords;  count++, SrcBuffer++, NumberOfBytes += 4)
;;;1988           {
;;;1989             SDIO_WriteData(*SrcBuffer);
00005a  6a28              LDR      r0,[r5,#0x20]  ; SrcBuffer
00005c  6800              LDR      r0,[r0,#0]
00005e  f7fffffe          BL       SDIO_WriteData
000062  6a28              LDR      r0,[r5,#0x20]         ;1987  ; SrcBuffer
000064  1c64              ADDS     r4,r4,#1              ;1987
000066  1d00              ADDS     r0,r0,#4              ;1987
000068  6228              STR      r0,[r5,#0x20]         ;1987  ; SrcBuffer
00006a  69e8              LDR      r0,[r5,#0x1c]         ;1987  ; NumberOfBytes
00006c  1d00              ADDS     r0,r0,#4              ;1987
00006e  61e8              STR      r0,[r5,#0x1c]         ;1987  ; NumberOfBytes
                  |L17.112|
000070  42b4              CMP      r4,r6                 ;1987
000072  d3f2              BCC      |L17.90|
000074  e00d              B        |L17.146|
                  |L17.118|
;;;1990           }
;;;1991         }
;;;1992         else
;;;1993         {
;;;1994           for (count = 0; count < SD_HALFFIFO; count++)
;;;1995           {
;;;1996             SDIO_WriteData(*(SrcBuffer + count));
000076  6a28              LDR      r0,[r5,#0x20]  ; SrcBuffer
000078  f8500024          LDR      r0,[r0,r4,LSL #2]
00007c  f7fffffe          BL       SDIO_WriteData
000080  1c64              ADDS     r4,r4,#1              ;1994
000082  2c08              CMP      r4,#8                 ;1994
000084  d3f7              BCC      |L17.118|
;;;1997           }
;;;1998   
;;;1999           SrcBuffer += SD_HALFFIFO;
000086  6a28              LDR      r0,[r5,#0x20]  ; SrcBuffer
000088  3020              ADDS     r0,r0,#0x20
00008a  6228              STR      r0,[r5,#0x20]  ; SrcBuffer
                  |L17.140|
;;;2000           NumberOfBytes += SD_HALFFIFOBYTES;
00008c  69e8              LDR      r0,[r5,#0x1c]  ; NumberOfBytes
00008e  3020              ADDS     r0,r0,#0x20
000090  61e8              STR      r0,[r5,#0x1c]  ; NumberOfBytes
                  |L17.146|
;;;2001         }
;;;2002       }
;;;2003     }
;;;2004   
;;;2005     if (SDIO_GetITStatus(SDIO_IT_DATAEND) != RESET)
000092  f44f7680          MOV      r6,#0x100
000096  4630              MOV      r0,r6
000098  f7fffffe          BL       SDIO_GetITStatus
00009c  2400              MOVS     r4,#0                 ;1966
;;;2006     {
;;;2007       if (DeviceMode != SD_DMA_MODE)
;;;2008       {
;;;2009         while ((SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)  &&  (NumberOfBytes < TotalNumberOfBytes))
;;;2010         {
;;;2011           *DestBuffer = SDIO_ReadData();
;;;2012           DestBuffer++;
;;;2013           NumberOfBytes += 4;
;;;2014         }
;;;2015       }
;;;2016   
;;;2017       if (StopCondition == 1)
;;;2018       {
;;;2019         TransferError = SD_StopTransfer();
;;;2020       }
;;;2021       else
;;;2022       {
;;;2023         TransferError = SD_OK;
;;;2024       }
;;;2025       SDIO_ClearITPendingBit(SDIO_IT_DATAEND);
;;;2026       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
00009e  f24c383a          MOV      r8,#0xc33a
0000a2  b340              CBZ      r0,|L17.246|
0000a4  68e8              LDR      r0,[r5,#0xc]          ;2007  ; DeviceMode
0000a6  b188              CBZ      r0,|L17.204|
0000a8  0377              LSLS     r7,r6,#13             ;2009
                  |L17.170|
0000aa  4638              MOV      r0,r7                 ;2009
0000ac  f7fffffe          BL       SDIO_GetFlagStatus
0000b0  b160              CBZ      r0,|L17.204|
0000b2  69e8              LDR      r0,[r5,#0x1c]         ;2009  ; NumberOfBytes
0000b4  6929              LDR      r1,[r5,#0x10]         ;2009  ; TotalNumberOfBytes
0000b6  4288              CMP      r0,r1                 ;2009
0000b8  d208              BCS      |L17.204|
0000ba  f7fffffe          BL       SDIO_ReadData
0000be  6a69              LDR      r1,[r5,#0x24]         ;2011  ; DestBuffer
0000c0  c101              STM      r1!,{r0}              ;2011
0000c2  6269              STR      r1,[r5,#0x24]         ;2013  ; DestBuffer
0000c4  69e8              LDR      r0,[r5,#0x1c]         ;2013  ; NumberOfBytes
0000c6  1d00              ADDS     r0,r0,#4              ;2013
0000c8  61e8              STR      r0,[r5,#0x1c]         ;2013  ; NumberOfBytes
0000ca  e7ee              B        |L17.170|
                  |L17.204|
0000cc  6968              LDR      r0,[r5,#0x14]         ;2017  ; StopCondition
0000ce  2801              CMP      r0,#1                 ;2017
0000d0  d00e              BEQ      |L17.240|
0000d2  202a              MOVS     r0,#0x2a              ;2023
                  |L17.212|
0000d4  7028              STRB     r0,[r5,#0]            ;2023
0000d6  4630              MOV      r0,r6                 ;2025
0000d8  f7fffffe          BL       SDIO_ClearITPendingBit
0000dc  2100              MOVS     r1,#0
0000de  4640              MOV      r0,r8
0000e0  f7fffffe          BL       SDIO_ITConfig
;;;2027                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2028                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2029       TransferEnd = 1;
0000e4  2001              MOVS     r0,#1
0000e6  61a8              STR      r0,[r5,#0x18]  ; TransferEnd
;;;2030       NumberOfBytes = 0;
0000e8  61ec              STR      r4,[r5,#0x1c]  ; NumberOfBytes
;;;2031       return(TransferError);
0000ea  7828              LDRB     r0,[r5,#0]  ; TransferError
                  |L17.236|
;;;2032     }
;;;2033   
;;;2034     if (SDIO_GetITStatus(SDIO_IT_DCRCFAIL) != RESET)
;;;2035     {
;;;2036       SDIO_ClearITPendingBit(SDIO_IT_DCRCFAIL);
;;;2037       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;2038                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2039                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2040       NumberOfBytes = 0;
;;;2041       TransferError = SD_DATA_CRC_FAIL;
;;;2042       return(SD_DATA_CRC_FAIL);
;;;2043     }
;;;2044   
;;;2045     if (SDIO_GetITStatus(SDIO_IT_DTIMEOUT) != RESET)
;;;2046     {
;;;2047       SDIO_ClearITPendingBit(SDIO_IT_DTIMEOUT);
;;;2048       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;2049                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2050                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2051       NumberOfBytes = 0;
;;;2052       TransferError = SD_DATA_TIMEOUT;
;;;2053       return(SD_DATA_TIMEOUT);
;;;2054     }
;;;2055   
;;;2056     if (SDIO_GetITStatus(SDIO_IT_RXOVERR) != RESET)
;;;2057     {
;;;2058       SDIO_ClearITPendingBit(SDIO_IT_RXOVERR);
;;;2059       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;2060                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2061                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2062       NumberOfBytes = 0;
;;;2063       TransferError = SD_RX_OVERRUN;
;;;2064       return(SD_RX_OVERRUN);
;;;2065     }
;;;2066   
;;;2067     if (SDIO_GetITStatus(SDIO_IT_TXUNDERR) != RESET)
;;;2068     {
;;;2069       SDIO_ClearITPendingBit(SDIO_IT_TXUNDERR);
;;;2070       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;2071                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2072                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2073       NumberOfBytes = 0;
;;;2074       TransferError = SD_TX_UNDERRUN;
;;;2075       return(SD_TX_UNDERRUN);
;;;2076     }
;;;2077   
;;;2078     if (SDIO_GetITStatus(SDIO_IT_STBITERR) != RESET)
;;;2079     {
;;;2080       SDIO_ClearITPendingBit(SDIO_IT_STBITERR);
;;;2081       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;2082                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2083                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2084       NumberOfBytes = 0;
;;;2085       TransferError = SD_START_BIT_ERR;
;;;2086       return(SD_START_BIT_ERR);
;;;2087     }
;;;2088   
;;;2089     return(SD_OK);
;;;2090   }
0000ec  e8bd81f0          POP      {r4-r8,pc}
                  |L17.240|
0000f0  f7fffffe          BL       SD_StopTransfer
0000f4  e7ee              B        |L17.212|
                  |L17.246|
0000f6  2002              MOVS     r0,#2                 ;2034
0000f8  f7fffffe          BL       SDIO_GetITStatus
0000fc  b150              CBZ      r0,|L17.276|
0000fe  2002              MOVS     r0,#2                 ;2036
000100  f7fffffe          BL       SDIO_ClearITPendingBit
000104  2100              MOVS     r1,#0                 ;2037
000106  4640              MOV      r0,r8                 ;2037
000108  f7fffffe          BL       SDIO_ITConfig
00010c  61ec              STR      r4,[r5,#0x1c]         ;2040  ; NumberOfBytes
00010e  2002              MOVS     r0,#2                 ;2041
000110  7028              STRB     r0,[r5,#0]            ;2041
000112  e7eb              B        |L17.236|
                  |L17.276|
000114  2008              MOVS     r0,#8                 ;2045
000116  f7fffffe          BL       SDIO_GetITStatus
00011a  b150              CBZ      r0,|L17.306|
00011c  2008              MOVS     r0,#8                 ;2047
00011e  f7fffffe          BL       SDIO_ClearITPendingBit
000122  2100              MOVS     r1,#0                 ;2048
000124  4640              MOV      r0,r8                 ;2048
000126  f7fffffe          BL       SDIO_ITConfig
00012a  61ec              STR      r4,[r5,#0x1c]         ;2051  ; NumberOfBytes
00012c  2004              MOVS     r0,#4                 ;2052
00012e  7028              STRB     r0,[r5,#0]            ;2052
000130  e7dc              B        |L17.236|
                  |L17.306|
000132  2020              MOVS     r0,#0x20              ;2056
000134  f7fffffe          BL       SDIO_GetITStatus
000138  b150              CBZ      r0,|L17.336|
00013a  2020              MOVS     r0,#0x20              ;2058
00013c  f7fffffe          BL       SDIO_ClearITPendingBit
000140  2100              MOVS     r1,#0                 ;2059
000142  4640              MOV      r0,r8                 ;2059
000144  f7fffffe          BL       SDIO_ITConfig
000148  61ec              STR      r4,[r5,#0x1c]         ;2062  ; NumberOfBytes
00014a  2006              MOVS     r0,#6                 ;2063
00014c  7028              STRB     r0,[r5,#0]            ;2063
00014e  e7cd              B        |L17.236|
                  |L17.336|
000150  2010              MOVS     r0,#0x10              ;2067
000152  f7fffffe          BL       SDIO_GetITStatus
000156  b150              CBZ      r0,|L17.366|
000158  2010              MOVS     r0,#0x10              ;2069
00015a  f7fffffe          BL       SDIO_ClearITPendingBit
00015e  2100              MOVS     r1,#0                 ;2070
000160  4640              MOV      r0,r8                 ;2070
000162  f7fffffe          BL       SDIO_ITConfig
000166  61ec              STR      r4,[r5,#0x1c]         ;2073  ; NumberOfBytes
000168  2005              MOVS     r0,#5                 ;2074
00016a  7028              STRB     r0,[r5,#0]            ;2074
00016c  e7be              B        |L17.236|
                  |L17.366|
00016e  f44f7600          MOV      r6,#0x200             ;2078
000172  4630              MOV      r0,r6                 ;2078
000174  f7fffffe          BL       SDIO_GetITStatus
000178  b150              CBZ      r0,|L17.400|
00017a  4630              MOV      r0,r6                 ;2080
00017c  f7fffffe          BL       SDIO_ClearITPendingBit
000180  2100              MOVS     r1,#0                 ;2081
000182  4640              MOV      r0,r8                 ;2081
000184  f7fffffe          BL       SDIO_ITConfig
000188  61ec              STR      r4,[r5,#0x1c]         ;2084  ; NumberOfBytes
00018a  2007              MOVS     r0,#7                 ;2085
00018c  7028              STRB     r0,[r5,#0]            ;2085
00018e  e7ad              B        |L17.236|
                  |L17.400|
000190  202a              MOVS     r0,#0x2a              ;2089
000192  e7ab              B        |L17.236|
;;;2091   
                          ENDP

                  |L17.404|
                          DCD      ||.data||

                          AREA ||i.SD_ReadBlock||, CODE, READONLY, ALIGN=2

                  SD_ReadBlock PROC
;;;775    *******************************************************************************/
;;;776    SD_Error SD_ReadBlock(u32 addr, u32 *readbuff, u16 BlockSize)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;777    {
000004  4607              MOV      r7,r0
000006  000d              MOVS     r5,r1
000008  4614              MOV      r4,r2
;;;778      SD_Error errorstatus = SD_OK;
;;;779      u32 count = 0, *tempbuff = readbuff;
;;;780      u8 power = 0;
;;;781    
;;;782      if (NULL == readbuff)
00000a  d030              BEQ      |L18.110|
;;;783      {
;;;784        errorstatus = SD_INVALID_PARAMETER;
;;;785        return(errorstatus);
;;;786      }
;;;787    
;;;788      TransferError = SD_OK;
00000c  4e77              LDR      r6,|L18.492|
00000e  202a              MOVS     r0,#0x2a
000010  7030              STRB     r0,[r6,#0]
;;;789      TransferEnd = 0;
000012  f04f0a00          MOV      r10,#0
000016  f8c6a018          STR      r10,[r6,#0x18]  ; TransferEnd
;;;790      TotalNumberOfBytes = 0;
;;;791    
;;;792      /* Clear all DPSM configuration */
;;;793      SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
00001a  f8dfb1d8          LDR      r11,|L18.500|
00001e  4a74              LDR      r2,|L18.496|
000020  f8c6a010          STR      r10,[r6,#0x10]  ; TotalNumberOfBytes
000024  e9cb2a00          STRD     r2,r10,[r11,#0]
;;;794      SDIO_DataInitStructure.SDIO_DataLength = 0;
;;;795      SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
;;;796      SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
000028  f8cba008          STR      r10,[r11,#8]  ; SDIO_DataInitStructure
;;;797      SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
00002c  f8cba00c          STR      r10,[r11,#0xc]  ; SDIO_DataInitStructure
;;;798      SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
000030  f8cba010          STR      r10,[r11,#0x10]  ; SDIO_DataInitStructure
;;;799      SDIO_DataConfig(&SDIO_DataInitStructure);
000034  4658              MOV      r0,r11
000036  f8cba014          STR      r10,[r11,#0x14]  ; SDIO_DataInitStructure
00003a  f7fffffe          BL       SDIO_DataConfig
;;;800      SDIO_DMACmd(DISABLE);
00003e  2000              MOVS     r0,#0
000040  f7fffffe          BL       SDIO_DMACmd
;;;801    
;;;802      if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
000044  2000              MOVS     r0,#0
000046  f7fffffe          BL       SDIO_GetResponse
00004a  0180              LSLS     r0,r0,#6
00004c  d502              BPL      |L18.84|
;;;803      {
;;;804        errorstatus = SD_LOCK_UNLOCK_FAILED;
00004e  200e              MOVS     r0,#0xe
                  |L18.80|
;;;805        return(errorstatus);
;;;806      }
;;;807      
;;;808      if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;809      {
;;;810        BlockSize = 512;
;;;811        addr /= 512;
;;;812      }
;;;813      if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
;;;814      {
;;;815        power = convert_from_bytes_to_power_of_two(BlockSize);
;;;816    
;;;817        /* Set Block Size for Card */
;;;818        SDIO_CmdInitStructure.SDIO_Argument = (u32) BlockSize;
;;;819        SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
;;;820        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;821        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;822        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;823        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;824    
;;;825        errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
;;;826    
;;;827        if (SD_OK != errorstatus)
;;;828        {
;;;829          return(errorstatus);
;;;830        }
;;;831      }
;;;832      else
;;;833      {
;;;834        errorstatus = SD_INVALID_PARAMETER;
;;;835        return(errorstatus);
;;;836      }
;;;837    
;;;838      SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;839      SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
;;;840      SDIO_DataInitStructure.SDIO_DataBlockSize = (u32) power << 4;
;;;841      SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;842      SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;843      SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;844      SDIO_DataConfig(&SDIO_DataInitStructure);
;;;845    
;;;846      TotalNumberOfBytes = BlockSize;
;;;847      StopCondition = 0;
;;;848      DestBuffer = readbuff;
;;;849    
;;;850      /* Send CMD17 READ_SINGLE_BLOCK */
;;;851      SDIO_CmdInitStructure.SDIO_Argument = (u32)addr;
;;;852      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_READ_SINGLE_BLOCK;
;;;853      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;854      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;855      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;856      SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;857    
;;;858      errorstatus = CmdResp1Error(SDIO_READ_SINGLE_BLOCK);
;;;859    
;;;860      if (errorstatus != SD_OK)
;;;861      {
;;;862        return(errorstatus);
;;;863      }
;;;864      /* In case of single block transfer, no need of stop transfer at all.*/
;;;865      if (DeviceMode == SD_POLLING_MODE)
;;;866      {
;;;867        /* Polling mode */
;;;868        while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
;;;869        {
;;;870          if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
;;;871          {
;;;872            for (count = 0; count < 8; count++)
;;;873            {
;;;874              *(tempbuff + count) = SDIO_ReadData();
;;;875            }
;;;876            tempbuff += 8;
;;;877          }
;;;878        }
;;;879    
;;;880        if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;881        {
;;;882          SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;883          errorstatus = SD_DATA_TIMEOUT;
;;;884          return(errorstatus);
;;;885        }
;;;886        else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;887        {
;;;888          SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;889          errorstatus = SD_DATA_CRC_FAIL;
;;;890          return(errorstatus);
;;;891        }
;;;892        else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;893        {
;;;894          SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;895          errorstatus = SD_RX_OVERRUN;
;;;896          return(errorstatus);
;;;897        }
;;;898        else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;899        {
;;;900          SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;901          errorstatus = SD_START_BIT_ERR;
;;;902          return(errorstatus);
;;;903        }
;;;904        while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
;;;905        {
;;;906          *tempbuff = SDIO_ReadData();
;;;907          tempbuff++;
;;;908        }
;;;909    
;;;910        /* Clear all the static flags */
;;;911        SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;912      }
;;;913      else if (DeviceMode == SD_INTERRUPT_MODE)
;;;914      {
;;;915        SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR, ENABLE);
;;;916        while ((TransferEnd == 0) && (TransferError == SD_OK))
;;;917        {}
;;;918        if (TransferError != SD_OK)
;;;919        {
;;;920          return(TransferError);
;;;921        }
;;;922      }
;;;923      else if (DeviceMode == SD_DMA_MODE)
;;;924      {
;;;925        SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR, ENABLE);
;;;926        SDIO_DMACmd(ENABLE);
;;;927        DMA_RxConfiguration(readbuff, BlockSize);
;;;928        while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
;;;929        {}
;;;930      }
;;;931      return(errorstatus);
;;;932    }
000050  e8bd8ff8          POP      {r3-r11,pc}
                  |L18.84|
000054  6870              LDR      r0,[r6,#4]            ;808  ; CardType
000056  46b0              MOV      r8,r6                 ;808
000058  f44f7900          MOV      r9,#0x200             ;810
00005c  2802              CMP      r0,#2                 ;808
00005e  d008              BEQ      |L18.114|
000060  1e60              SUBS     r0,r4,#1              ;813
000062  f5b06f00          CMP      r0,#0x800             ;813
000066  d202              BCS      |L18.110|
                  |L18.104|
000068  1e60              SUBS     r0,r4,#1              ;813
00006a  4204              TST      r4,r0                 ;813
00006c  d004              BEQ      |L18.120|
                  |L18.110|
00006e  2026              MOVS     r0,#0x26              ;834
000070  e7ee              B        |L18.80|
                  |L18.114|
000072  464c              MOV      r4,r9                 ;810
000074  0a7f              LSRS     r7,r7,#9              ;811
000076  e7f7              B        |L18.104|
                  |L18.120|
000078  4620              MOV      r0,r4                 ;815
00007a  f7fffffe          BL       convert_from_bytes_to_power_of_two
00007e  9000              STR      r0,[sp,#0]            ;818
000080  485c              LDR      r0,|L18.500|
000082  2110              MOVS     r1,#0x10              ;819
000084  3814              SUBS     r0,r0,#0x14           ;818
000086  4656              MOV      r6,r10                ;821
000088  e9c04100          STRD     r4,r1,[r0,#0]         ;819
00008c  3008              ADDS     r0,r0,#8              ;822
00008e  2140              MOVS     r1,#0x40              ;820
000090  f44f6a80          MOV      r10,#0x400            ;822
000094  e8a00442          STM      r0!,{r1,r6,r10}       ;822
000098  4856              LDR      r0,|L18.500|
00009a  3814              SUBS     r0,r0,#0x14           ;823
00009c  f7fffffe          BL       SDIO_SendCommand
0000a0  2010              MOVS     r0,#0x10              ;825
0000a2  f7fffffe          BL       CmdResp1Error
0000a6  282a              CMP      r0,#0x2a              ;827
0000a8  d1d2              BNE      |L18.80|
0000aa  4951              LDR      r1,|L18.496|
0000ac  e9cb1400          STRD     r1,r4,[r11,#0]        ;838
0000b0  9900              LDR      r1,[sp,#0]            ;840
0000b2  4850              LDR      r0,|L18.500|
0000b4  0109              LSLS     r1,r1,#4              ;840
0000b6  f8cb1008          STR      r1,[r11,#8]           ;841  ; SDIO_DataInitStructure
0000ba  2102              MOVS     r1,#2                 ;841
0000bc  e9cb1603          STRD     r1,r6,[r11,#0xc]      ;841
0000c0  2101              MOVS     r1,#1                 ;843
0000c2  f8cb1014          STR      r1,[r11,#0x14]        ;844  ; SDIO_DataInitStructure
0000c6  f7fffffe          BL       SDIO_DataConfig
0000ca  e9c84604          STRD     r4,r6,[r8,#0x10]      ;844
0000ce  4849              LDR      r0,|L18.500|
0000d0  2111              MOVS     r1,#0x11              ;852
0000d2  3814              SUBS     r0,r0,#0x14           ;851
0000d4  f8c85024          STR      r5,[r8,#0x24]         ;852  ; DestBuffer
0000d8  e9c07100          STRD     r7,r1,[r0,#0]         ;852
0000dc  3008              ADDS     r0,r0,#8              ;853
0000de  2140              MOVS     r1,#0x40              ;853
0000e0  e8a00442          STM      r0!,{r1,r6,r10}       ;853
0000e4  4843              LDR      r0,|L18.500|
0000e6  3814              SUBS     r0,r0,#0x14           ;856
0000e8  f7fffffe          BL       SDIO_SendCommand
0000ec  2011              MOVS     r0,#0x11              ;858
0000ee  f7fffffe          BL       CmdResp1Error
0000f2  4606              MOV      r6,r0                 ;858
0000f4  282a              CMP      r0,#0x2a              ;860
0000f6  d1ab              BNE      |L18.80|
0000f8  f8d8000c          LDR      r0,[r8,#0xc]          ;865  ; DeviceMode
0000fc  4647              MOV      r7,r8                 ;865
0000fe  2802              CMP      r0,#2                 ;865
000100  d011              BEQ      |L18.294|
000102  2801              CMP      r0,#1                 ;913
000104  d04e              BEQ      |L18.420|
000106  b390              CBZ      r0,|L18.366|
000108  e06d              B        |L18.486|
                  |L18.266|
00010a  4650              MOV      r0,r10                ;870
00010c  f7fffffe          BL       SDIO_GetFlagStatus
000110  b170              CBZ      r0,|L18.304|
000112  2400              MOVS     r4,#0                 ;872
                  |L18.276|
000114  f7fffffe          BL       SDIO_ReadData
000118  f8450024          STR      r0,[r5,r4,LSL #2]     ;874
00011c  1c64              ADDS     r4,r4,#1              ;872
00011e  2c08              CMP      r4,#8                 ;872
000120  d3f8              BCC      |L18.276|
000122  3520              ADDS     r5,r5,#0x20           ;876
000124  e004              B        |L18.304|
                  |L18.294|
000126  4f34              LDR      r7,|L18.504|
000128  f44f4a00          MOV      r10,#0x8000           ;870
00012c  f240682a          MOV      r8,#0x62a             ;868
                  |L18.304|
000130  6b78              LDR      r0,[r7,#0x34]         ;868
000132  ea100f08          TST      r0,r8                 ;868
000136  d0e8              BEQ      |L18.266|
000138  2008              MOVS     r0,#8                 ;880
00013a  f7fffffe          BL       SDIO_GetFlagStatus
00013e  b120              CBZ      r0,|L18.330|
000140  2008              MOVS     r0,#8                 ;882
000142  f7fffffe          BL       SDIO_ClearFlag
000146  2004              MOVS     r0,#4                 ;883
000148  e782              B        |L18.80|
                  |L18.330|
00014a  2002              MOVS     r0,#2                 ;886
00014c  f7fffffe          BL       SDIO_GetFlagStatus
000150  b120              CBZ      r0,|L18.348|
000152  2002              MOVS     r0,#2                 ;888
000154  f7fffffe          BL       SDIO_ClearFlag
000158  2002              MOVS     r0,#2                 ;889
00015a  e779              B        |L18.80|
                  |L18.348|
00015c  2020              MOVS     r0,#0x20              ;892
00015e  f7fffffe          BL       SDIO_GetFlagStatus
000162  b128              CBZ      r0,|L18.368|
000164  2020              MOVS     r0,#0x20              ;894
000166  f7fffffe          BL       SDIO_ClearFlag
00016a  2006              MOVS     r0,#6                 ;895
00016c  e770              B        |L18.80|
                  |L18.366|
00016e  e028              B        |L18.450|
                  |L18.368|
000170  464c              MOV      r4,r9                 ;898
000172  4648              MOV      r0,r9                 ;898
000174  f7fffffe          BL       SDIO_GetFlagStatus
000178  b140              CBZ      r0,|L18.396|
00017a  4620              MOV      r0,r4                 ;900
00017c  f7fffffe          BL       SDIO_ClearFlag
000180  2007              MOVS     r0,#7                 ;901
000182  e765              B        |L18.80|
                  |L18.388|
000184  f7fffffe          BL       SDIO_ReadData
000188  c501              STM      r5!,{r0}              ;906
00018a  e001              B        |L18.400|
                  |L18.396|
00018c  f44f1400          MOV      r4,#0x200000          ;904
                  |L18.400|
000190  4620              MOV      r0,r4                 ;904
000192  f7fffffe          BL       SDIO_GetFlagStatus
000196  2800              CMP      r0,#0                 ;904
000198  d1f4              BNE      |L18.388|
00019a  f24050ff          MOV      r0,#0x5ff             ;911
00019e  f7fffffe          BL       SDIO_ClearFlag
0001a2  e020              B        |L18.486|
                  |L18.420|
0001a4  2101              MOVS     r1,#1                 ;915
0001a6  f248302a          MOV      r0,#0x832a            ;915
0001aa  f7fffffe          BL       SDIO_ITConfig
                  |L18.430|
0001ae  69b8              LDR      r0,[r7,#0x18]         ;916  ; TransferEnd
0001b0  b910              CBNZ     r0,|L18.440|
0001b2  7838              LDRB     r0,[r7,#0]            ;916  ; TransferError
0001b4  282a              CMP      r0,#0x2a              ;916
0001b6  d0fa              BEQ      |L18.430|
                  |L18.440|
0001b8  7838              LDRB     r0,[r7,#0]            ;918  ; TransferError
0001ba  282a              CMP      r0,#0x2a              ;918
0001bc  d013              BEQ      |L18.486|
0001be  7838              LDRB     r0,[r7,#0]            ;920  ; TransferError
0001c0  e746              B        |L18.80|
                  |L18.450|
0001c2  2101              MOVS     r1,#1                 ;925
0001c4  f240302a          MOV      r0,#0x32a             ;925
0001c8  f7fffffe          BL       SDIO_ITConfig
0001cc  2001              MOVS     r0,#1                 ;926
0001ce  f7fffffe          BL       SDIO_DMACmd
0001d2  4621              MOV      r1,r4                 ;927
0001d4  4628              MOV      r0,r5                 ;927
0001d6  f7fffffe          BL       DMA_RxConfiguration
0001da  4c08              LDR      r4,|L18.508|
                  |L18.476|
0001dc  4620              MOV      r0,r4                 ;928
0001de  f7fffffe          BL       DMA_GetFlagStatus
0001e2  2800              CMP      r0,#0                 ;928
0001e4  d0fa              BEQ      |L18.476|
                  |L18.486|
0001e6  4630              MOV      r0,r6                 ;931
0001e8  e732              B        |L18.80|
;;;933    
                          ENDP

0001ea  0000              DCW      0x0000
                  |L18.492|
                          DCD      ||.data||
                  |L18.496|
                          DCD      0x000fffff
                  |L18.500|
                          DCD      ||.bss||+0x4c
                  |L18.504|
                          DCD      0x40018000
                  |L18.508|
                          DCD      0x10002000

                          AREA ||i.SD_ReadMultiBlocks||, CODE, READONLY, ALIGN=2

                  SD_ReadMultiBlocks PROC
;;;944    *******************************************************************************/
;;;945    SD_Error SD_ReadMultiBlocks(u32 addr, u32 *readbuff, u16 BlockSize, u32 NumberOfBlocks)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;946    {
000004  4680              MOV      r8,r0
000006  000d              MOVS     r5,r1
000008  4614              MOV      r4,r2
00000a  461e              MOV      r6,r3
;;;947      SD_Error errorstatus = SD_OK;
;;;948      u32 count = 0, *tempbuff = readbuff;
;;;949      u8 power = 0;
;;;950    
;;;951      if (NULL == readbuff)
00000c  d04e              BEQ      |L19.172|
;;;952      {
;;;953        errorstatus = SD_INVALID_PARAMETER;
;;;954        return(errorstatus);
;;;955      }
;;;956    
;;;957      TransferError = SD_OK;
00000e  f8df9230          LDR      r9,|L19.576|
000012  212a              MOVS     r1,#0x2a
000014  f8891000          STRB     r1,[r9,#0]
;;;958      TransferEnd = 0;
000018  2700              MOVS     r7,#0
00001a  f8c97018          STR      r7,[r9,#0x18]  ; TransferEnd
;;;959      TotalNumberOfBytes = 0;
;;;960    
;;;961      /* Clear all DPSM configuration */
;;;962      SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
00001e  488a              LDR      r0,|L19.584|
000020  4988              LDR      r1,|L19.580|
000022  f8c97010          STR      r7,[r9,#0x10]  ; TotalNumberOfBytes
000026  e9c01700          STRD     r1,r7,[r0,#0]
;;;963      SDIO_DataInitStructure.SDIO_DataLength = 0;
;;;964      SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
;;;965      SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
00002a  6087              STR      r7,[r0,#8]  ; SDIO_DataInitStructure
;;;966      SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
00002c  60c7              STR      r7,[r0,#0xc]  ; SDIO_DataInitStructure
;;;967      SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
00002e  6107              STR      r7,[r0,#0x10]  ; SDIO_DataInitStructure
;;;968      SDIO_DataConfig(&SDIO_DataInitStructure);
000030  6147              STR      r7,[r0,#0x14]  ; SDIO_DataInitStructure
000032  f7fffffe          BL       SDIO_DataConfig
;;;969      SDIO_DMACmd(DISABLE);
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       SDIO_DMACmd
;;;970    
;;;971      if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
00003c  2000              MOVS     r0,#0
00003e  f7fffffe          BL       SDIO_GetResponse
000042  0180              LSLS     r0,r0,#6
000044  d502              BPL      |L19.76|
;;;972      {
;;;973        errorstatus = SD_LOCK_UNLOCK_FAILED;
000046  200e              MOVS     r0,#0xe
                  |L19.72|
;;;974        return(errorstatus);
;;;975      }
;;;976    
;;;977      if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;978      {
;;;979        BlockSize = 512;
;;;980        addr /= 512;
;;;981      }
;;;982      
;;;983      if ((BlockSize > 0) && (BlockSize <= 2048) && (0 == (BlockSize & (BlockSize - 1))))
;;;984      {
;;;985        power = convert_from_bytes_to_power_of_two(BlockSize);
;;;986    
;;;987        /* Set Block Size for Card */
;;;988        SDIO_CmdInitStructure.SDIO_Argument = (u32) BlockSize;
;;;989        SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
;;;990        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;991        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;992        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;993        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;994    
;;;995        errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
;;;996    
;;;997        if (SD_OK != errorstatus)
;;;998        {
;;;999          return(errorstatus);
;;;1000       }
;;;1001     }
;;;1002     else
;;;1003     {
;;;1004       errorstatus = SD_INVALID_PARAMETER;
;;;1005       return(errorstatus);
;;;1006     }
;;;1007   
;;;1008     if (NumberOfBlocks > 1)
;;;1009     {
;;;1010       /* Common to all modes */
;;;1011       if (NumberOfBlocks * BlockSize > SD_MAX_DATA_LENGTH)
;;;1012       {
;;;1013         errorstatus = SD_INVALID_PARAMETER;
;;;1014         return(errorstatus);
;;;1015       }
;;;1016   
;;;1017       TotalNumberOfBytes = NumberOfBlocks * BlockSize;
;;;1018       StopCondition = 1;
;;;1019       DestBuffer = readbuff;
;;;1020   
;;;1021       SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1022       SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
;;;1023       SDIO_DataInitStructure.SDIO_DataBlockSize = (u32) power << 4;
;;;1024       SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;1025       SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1026       SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1027       SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1028   
;;;1029       /* Send CMD18 READ_MULT_BLOCK with argument data address */
;;;1030       SDIO_CmdInitStructure.SDIO_Argument = (u32)addr;
;;;1031       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_READ_MULT_BLOCK;
;;;1032       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1033       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1034       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1035       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1036   
;;;1037       errorstatus = CmdResp1Error(SDIO_READ_MULT_BLOCK);
;;;1038   
;;;1039       if (errorstatus != SD_OK)
;;;1040       {
;;;1041         return(errorstatus);
;;;1042       }
;;;1043   
;;;1044       if (DeviceMode == SD_POLLING_MODE)
;;;1045       {
;;;1046         /* Polling mode */
;;;1047         while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DATAEND | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
;;;1048         {
;;;1049           if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
;;;1050           {
;;;1051             for (count = 0; count < SD_HALFFIFO; count++)
;;;1052             {
;;;1053               *(tempbuff + count) = SDIO_ReadData();
;;;1054             }
;;;1055             tempbuff += SD_HALFFIFO;
;;;1056           }
;;;1057         }
;;;1058   
;;;1059         if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1060         {
;;;1061           SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1062           errorstatus = SD_DATA_TIMEOUT;
;;;1063           return(errorstatus);
;;;1064         }
;;;1065         else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1066         {
;;;1067           SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1068           errorstatus = SD_DATA_CRC_FAIL;
;;;1069           return(errorstatus);
;;;1070         }
;;;1071         else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;1072         {
;;;1073           SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;1074           errorstatus = SD_RX_OVERRUN;
;;;1075           return(errorstatus);
;;;1076         }
;;;1077         else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1078         {
;;;1079           SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1080           errorstatus = SD_START_BIT_ERR;
;;;1081           return(errorstatus);
;;;1082         }
;;;1083         while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
;;;1084         {
;;;1085           *tempbuff = SDIO_ReadData();
;;;1086           tempbuff++;
;;;1087         }
;;;1088   
;;;1089         if (SDIO_GetFlagStatus(SDIO_FLAG_DATAEND) != RESET)
;;;1090         {
;;;1091           /* In Case Of SD-CARD Send Command STOP_TRANSMISSION */
;;;1092           if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType))
;;;1093           {
;;;1094             /* Send CMD12 STOP_TRANSMISSION */
;;;1095             SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;1096             SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
;;;1097             SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1098             SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1099             SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1100             SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1101   
;;;1102             errorstatus = CmdResp1Error(SDIO_STOP_TRANSMISSION);
;;;1103   
;;;1104             if (errorstatus != SD_OK)
;;;1105             {
;;;1106               return(errorstatus);
;;;1107             }
;;;1108           }
;;;1109         }
;;;1110         /* Clear all the static flags */
;;;1111         SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1112       }
;;;1113       else if (DeviceMode == SD_INTERRUPT_MODE)
;;;1114       {
;;;1115         SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR, ENABLE);
;;;1116         while ((TransferEnd == 0) && (TransferError == SD_OK))
;;;1117         {}
;;;1118         if (TransferError != SD_OK)
;;;1119         {
;;;1120           return(TransferError);
;;;1121         }
;;;1122       }
;;;1123       else if (DeviceMode == SD_DMA_MODE)
;;;1124       {
;;;1125         SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR, ENABLE);
;;;1126         SDIO_DMACmd(ENABLE);
;;;1127         DMA_RxConfiguration(readbuff, (NumberOfBlocks * BlockSize));
;;;1128         while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
;;;1129         {}
;;;1130         while ((TransferEnd == 0) && (TransferError == SD_OK))
;;;1131         {}
;;;1132         if (TransferError != SD_OK)
;;;1133         {
;;;1134           return(TransferError);
;;;1135         }
;;;1136       }
;;;1137     }
;;;1138     return(errorstatus);
;;;1139   }
000048  e8bd8ff8          POP      {r3-r11,pc}
                  |L19.76|
00004c  487c              LDR      r0,|L19.576|
00004e  f44f7b00          MOV      r11,#0x200            ;979
000052  6840              LDR      r0,[r0,#4]            ;977  ; CardType
000054  2802              CMP      r0,#2                 ;977
000056  d007              BEQ      |L19.104|
000058  1e60              SUBS     r0,r4,#1              ;983
00005a  f5b06f00          CMP      r0,#0x800             ;983
00005e  d225              BCS      |L19.172|
                  |L19.96|
000060  1e60              SUBS     r0,r4,#1              ;983
000062  4204              TST      r4,r0                 ;983
000064  d004              BEQ      |L19.112|
000066  e021              B        |L19.172|
                  |L19.104|
000068  465c              MOV      r4,r11                ;979
00006a  ea4f2858          LSR      r8,r8,#9              ;980
00006e  e7f7              B        |L19.96|
                  |L19.112|
000070  4620              MOV      r0,r4                 ;985
000072  f7fffffe          BL       convert_from_bytes_to_power_of_two
000076  9000              STR      r0,[sp,#0]            ;988
000078  4873              LDR      r0,|L19.584|
00007a  f04f0a40          MOV      r10,#0x40             ;990
00007e  3814              SUBS     r0,r0,#0x14           ;988
000080  2110              MOVS     r1,#0x10              ;989
000082  f8c0a008          STR      r10,[r0,#8]           ;990  ; SDIO_CmdInitStructure
000086  e9c04100          STRD     r4,r1,[r0,#0]         ;990
00008a  0189              LSLS     r1,r1,#6              ;992
00008c  e9c07103          STRD     r7,r1,[r0,#0xc]       ;992
000090  f7fffffe          BL       SDIO_SendCommand
000094  2010              MOVS     r0,#0x10              ;995
000096  f7fffffe          BL       CmdResp1Error
00009a  4607              MOV      r7,r0                 ;995
00009c  282a              CMP      r0,#0x2a              ;997
00009e  d1d3              BNE      |L19.72|
0000a0  2e01              CMP      r6,#1                 ;1008
0000a2  d93a              BLS      |L19.282|
0000a4  4366              MULS     r6,r4,r6              ;1011
0000a6  f1b67f00          CMP      r6,#0x2000000         ;1011
0000aa  d301              BCC      |L19.176|
                  |L19.172|
0000ac  2026              MOVS     r0,#0x26              ;1013
0000ae  e7cb              B        |L19.72|
                  |L19.176|
0000b0  4c63              LDR      r4,|L19.576|
0000b2  2101              MOVS     r1,#1                 ;1018
0000b4  4864              LDR      r0,|L19.584|
0000b6  6265              STR      r5,[r4,#0x24]         ;1021  ; DestBuffer
0000b8  e9c46104          STRD     r6,r1,[r4,#0x10]      ;1021
0000bc  4a61              LDR      r2,|L19.580|
0000be  e9c02600          STRD     r2,r6,[r0,#0]         ;1021
0000c2  9a00              LDR      r2,[sp,#0]            ;1023
0000c4  2700              MOVS     r7,#0                 ;1025
0000c6  0112              LSLS     r2,r2,#4              ;1023
0000c8  6082              STR      r2,[r0,#8]            ;1024  ; SDIO_DataInitStructure
0000ca  2202              MOVS     r2,#2                 ;1024
0000cc  60c2              STR      r2,[r0,#0xc]          ;1025  ; SDIO_DataInitStructure
0000ce  e9c07104          STRD     r7,r1,[r0,#0x10]      ;1025
0000d2  f7fffffe          BL       SDIO_DataConfig
0000d6  4641              MOV      r1,r8                 ;1030
0000d8  f8df816c          LDR      r8,|L19.584|
0000dc  f44f6980          MOV      r9,#0x400             ;1034
0000e0  f1a80814          SUB      r8,r8,#0x14           ;1030
0000e4  4640              MOV      r0,r8                 ;1035
0000e6  f8c81000          STR      r1,[r8,#0]            ;1031  ; SDIO_CmdInitStructure
0000ea  2112              MOVS     r1,#0x12              ;1031
0000ec  f8c81004          STR      r1,[r8,#4]            ;1032  ; SDIO_CmdInitStructure
0000f0  2140              MOVS     r1,#0x40              ;1032
0000f2  e9c81702          STRD     r1,r7,[r8,#8]         ;1032
0000f6  f8c89010          STR      r9,[r8,#0x10]         ;1035  ; SDIO_CmdInitStructure
0000fa  f7fffffe          BL       SDIO_SendCommand
0000fe  2012              MOVS     r0,#0x12              ;1037
000100  f7fffffe          BL       CmdResp1Error
000104  4607              MOV      r7,r0                 ;1037
000106  282a              CMP      r0,#0x2a              ;1039
000108  d19e              BNE      |L19.72|
00010a  68e1              LDR      r1,[r4,#0xc]          ;1044  ; DeviceMode
00010c  f240302a          MOV      r0,#0x32a             ;1047
000110  2902              CMP      r1,#2                 ;1044
000112  d012              BEQ      |L19.314|
000114  2901              CMP      r1,#1                 ;1113
000116  d06b              BEQ      |L19.496|
000118  b381              CBZ      r1,|L19.380|
                  |L19.282|
00011a  e08f              B        |L19.572|
                  |L19.284|
00011c  f44f4000          MOV      r0,#0x8000            ;1049
000120  f7fffffe          BL       SDIO_GetFlagStatus
000124  b150              CBZ      r0,|L19.316|
000126  2600              MOVS     r6,#0                 ;1051
                  |L19.296|
000128  f7fffffe          BL       SDIO_ReadData
00012c  f8450026          STR      r0,[r5,r6,LSL #2]     ;1053
000130  1c76              ADDS     r6,r6,#1              ;1051
000132  2e08              CMP      r6,#8                 ;1051
000134  d3f8              BCC      |L19.296|
000136  3520              ADDS     r5,r5,#0x20           ;1055
000138  e000              B        |L19.316|
                  |L19.314|
00013a  4682              MOV      r10,r0                ;1047
                  |L19.316|
00013c  4843              LDR      r0,|L19.588|
00013e  6b40              LDR      r0,[r0,#0x34]         ;1047
000140  ea100f0a          TST      r0,r10                ;1047
000144  d0ea              BEQ      |L19.284|
000146  2008              MOVS     r0,#8                 ;1059
000148  f7fffffe          BL       SDIO_GetFlagStatus
00014c  b120              CBZ      r0,|L19.344|
00014e  2008              MOVS     r0,#8                 ;1061
000150  f7fffffe          BL       SDIO_ClearFlag
000154  2004              MOVS     r0,#4                 ;1062
                  |L19.342|
000156  e777              B        |L19.72|
                  |L19.344|
000158  2002              MOVS     r0,#2                 ;1065
00015a  f7fffffe          BL       SDIO_GetFlagStatus
00015e  b120              CBZ      r0,|L19.362|
000160  2002              MOVS     r0,#2                 ;1067
000162  f7fffffe          BL       SDIO_ClearFlag
000166  2002              MOVS     r0,#2                 ;1068
000168  e76e              B        |L19.72|
                  |L19.362|
00016a  2020              MOVS     r0,#0x20              ;1071
00016c  f7fffffe          BL       SDIO_GetFlagStatus
000170  b128              CBZ      r0,|L19.382|
000172  2020              MOVS     r0,#0x20              ;1073
000174  f7fffffe          BL       SDIO_ClearFlag
000178  2006              MOVS     r0,#6                 ;1074
00017a  e765              B        |L19.72|
                  |L19.380|
00017c  e047              B        |L19.526|
                  |L19.382|
00017e  465e              MOV      r6,r11                ;1077
000180  4658              MOV      r0,r11                ;1077
000182  f7fffffe          BL       SDIO_GetFlagStatus
000186  b148              CBZ      r0,|L19.412|
000188  4630              MOV      r0,r6                 ;1079
00018a  f7fffffe          BL       SDIO_ClearFlag
00018e  2007              MOVS     r0,#7                 ;1080
000190  e75a              B        |L19.72|
000192  bf00              NOP                            ;1085
                  |L19.404|
000194  f7fffffe          BL       SDIO_ReadData
000198  c501              STM      r5!,{r0}              ;1085
00019a  e001              B        |L19.416|
                  |L19.412|
00019c  f44f1600          MOV      r6,#0x200000          ;1083
                  |L19.416|
0001a0  4630              MOV      r0,r6                 ;1083
0001a2  f7fffffe          BL       SDIO_GetFlagStatus
0001a6  2800              CMP      r0,#0                 ;1083
0001a8  d1f4              BNE      |L19.404|
0001aa  f44f7080          MOV      r0,#0x100             ;1089
0001ae  f7fffffe          BL       SDIO_GetFlagStatus
0001b2  b1c0              CBZ      r0,|L19.486|
0001b4  6860              LDR      r0,[r4,#4]            ;1092  ; CardType
0001b6  b118              CBZ      r0,|L19.448|
0001b8  2802              CMP      r0,#2                 ;1092
0001ba  d001              BEQ      |L19.448|
0001bc  2801              CMP      r0,#1                 ;1092
0001be  d112              BNE      |L19.486|
                  |L19.448|
0001c0  2100              MOVS     r1,#0                 ;1095
0001c2  220c              MOVS     r2,#0xc               ;1096
0001c4  e9c81200          STRD     r1,r2,[r8,#0]         ;1096
0001c8  2240              MOVS     r2,#0x40              ;1097
0001ca  e9c82102          STRD     r2,r1,[r8,#8]         ;1097
0001ce  481e              LDR      r0,|L19.584|
0001d0  f8c89010          STR      r9,[r8,#0x10]         ;1100  ; SDIO_CmdInitStructure
0001d4  3814              SUBS     r0,r0,#0x14           ;1100
0001d6  f7fffffe          BL       SDIO_SendCommand
0001da  200c              MOVS     r0,#0xc               ;1102
0001dc  f7fffffe          BL       CmdResp1Error
0001e0  4607              MOV      r7,r0                 ;1102
0001e2  282a              CMP      r0,#0x2a              ;1104
0001e4  d1b7              BNE      |L19.342|
                  |L19.486|
0001e6  f24050ff          MOV      r0,#0x5ff             ;1111
0001ea  f7fffffe          BL       SDIO_ClearFlag
0001ee  e025              B        |L19.572|
                  |L19.496|
0001f0  2101              MOVS     r1,#1                 ;1115
0001f2  f248302a          MOV      r0,#0x832a            ;1115
0001f6  f7fffffe          BL       SDIO_ITConfig
                  |L19.506|
0001fa  69a0              LDR      r0,[r4,#0x18]         ;1116  ; TransferEnd
0001fc  b910              CBNZ     r0,|L19.516|
0001fe  7820              LDRB     r0,[r4,#0]            ;1116  ; TransferError
000200  282a              CMP      r0,#0x2a              ;1116
000202  d0fa              BEQ      |L19.506|
                  |L19.516|
000204  7820              LDRB     r0,[r4,#0]            ;1118  ; TransferError
000206  282a              CMP      r0,#0x2a              ;1118
000208  d018              BEQ      |L19.572|
00020a  7820              LDRB     r0,[r4,#0]            ;1134  ; TransferError
00020c  e71c              B        |L19.72|
                  |L19.526|
00020e  2101              MOVS     r1,#1                 ;1125
000210  f7fffffe          BL       SDIO_ITConfig
000214  2001              MOVS     r0,#1                 ;1126
000216  f7fffffe          BL       SDIO_DMACmd
00021a  4631              MOV      r1,r6                 ;1126
00021c  4628              MOV      r0,r5                 ;1127
00021e  f7fffffe          BL       DMA_RxConfiguration
000222  4d0b              LDR      r5,|L19.592|
                  |L19.548|
000224  4628              MOV      r0,r5                 ;1128
000226  f7fffffe          BL       DMA_GetFlagStatus
00022a  2800              CMP      r0,#0                 ;1128
00022c  d0fa              BEQ      |L19.548|
                  |L19.558|
00022e  69a0              LDR      r0,[r4,#0x18]         ;1130  ; TransferEnd
000230  2800              CMP      r0,#0                 ;1130
000232  d1e7              BNE      |L19.516|
000234  7820              LDRB     r0,[r4,#0]            ;1130  ; TransferError
000236  282a              CMP      r0,#0x2a              ;1130
000238  d0f9              BEQ      |L19.558|
00023a  e7e3              B        |L19.516|
                  |L19.572|
00023c  4638              MOV      r0,r7                 ;1138
00023e  e703              B        |L19.72|
;;;1140   
                          ENDP

                  |L19.576|
                          DCD      ||.data||
                  |L19.580|
                          DCD      0x000fffff
                  |L19.584|
                          DCD      ||.bss||+0x4c
                  |L19.588|
                          DCD      0x40018000
                  |L19.592|
                          DCD      0x10002000

                          AREA ||i.SD_SelectDeselect||, CODE, READONLY, ALIGN=2

                  SD_SelectDeselect PROC
;;;748    *******************************************************************************/
;;;749    SD_Error SD_SelectDeselect(u32 addr)
000000  4909              LDR      r1,|L20.40|
;;;750    {
000002  b510              PUSH     {r4,lr}
;;;751      SD_Error errorstatus = SD_OK;
;;;752    
;;;753      /* Send CMD7 SDIO_SEL_DESEL_CARD */
;;;754      SDIO_CmdInitStructure.SDIO_Argument =  addr;
;;;755      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEL_DESEL_CARD;
000004  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
000006  2007              MOVS     r0,#7
;;;756      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
000008  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
00000a  2040              MOVS     r0,#0x40
;;;757      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
00000c  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
00000e  2000              MOVS     r0,#0
;;;758      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000010  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
000012  f44f6080          MOV      r0,#0x400
;;;759      SDIO_SendCommand(&SDIO_CmdInitStructure);
000016  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
000018  4608              MOV      r0,r1
00001a  f7fffffe          BL       SDIO_SendCommand
;;;760    
;;;761      errorstatus = CmdResp1Error(SDIO_SEL_DESEL_CARD);
00001e  e8bd4010          POP      {r4,lr}
000022  2007              MOVS     r0,#7
000024  f7ffbffe          B.W      CmdResp1Error
;;;762    
;;;763      return(errorstatus);
;;;764    }
;;;765    
                          ENDP

                  |L20.40|
                          DCD      ||.bss||+0x38

                          AREA ||i.SD_SendSDStatus||, CODE, READONLY, ALIGN=2

                  SD_SendSDStatus PROC
;;;1839   *******************************************************************************/
;;;1840   SD_Error SD_SendSDStatus(u32 *psdstatus)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1841   {
000004  4604              MOV      r4,r0
;;;1842     SD_Error errorstatus = SD_OK;
;;;1843     u32 count = 0;
;;;1844   
;;;1845     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       SDIO_GetResponse
00000c  0180              LSLS     r0,r0,#6
00000e  d502              BPL      |L21.22|
;;;1846     {
;;;1847       errorstatus = SD_LOCK_UNLOCK_FAILED;
000010  200e              MOVS     r0,#0xe
                  |L21.18|
;;;1848       return(errorstatus);
;;;1849     }
;;;1850   
;;;1851     /* Set block size for card if it is not equal to current block size for card. */
;;;1852     SDIO_CmdInitStructure.SDIO_Argument = 64;
;;;1853     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
;;;1854     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1855     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1856     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1857     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1858   
;;;1859     errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
;;;1860   
;;;1861     if (errorstatus != SD_OK)
;;;1862     {
;;;1863       return(errorstatus);
;;;1864     }
;;;1865   
;;;1866     /* CMD55 */
;;;1867     SDIO_CmdInitStructure.SDIO_Argument = (u32) RCA << 16;
;;;1868     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
;;;1869     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1870     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1871     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1872     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1873     errorstatus = CmdResp1Error(SDIO_APP_CMD);
;;;1874   
;;;1875     if (errorstatus != SD_OK)
;;;1876     {
;;;1877       return(errorstatus);
;;;1878     }
;;;1879   
;;;1880     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1881     SDIO_DataInitStructure.SDIO_DataLength = 64;
;;;1882     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_64b;
;;;1883     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;1884     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1885     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1886     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1887   
;;;1888   
;;;1889     /* Send ACMD13 SD_APP_STAUS  with argument as card's RCA.*/
;;;1890     SDIO_CmdInitStructure.SDIO_Argument = 0;
;;;1891     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_STAUS;
;;;1892     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1893     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1894     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1895     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1896     errorstatus = CmdResp1Error(SDIO_SD_APP_STAUS);
;;;1897   
;;;1898     if (errorstatus != SD_OK)
;;;1899     {
;;;1900       return(errorstatus);
;;;1901     }
;;;1902   
;;;1903     while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
;;;1904     {
;;;1905       if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
;;;1906       {
;;;1907         for (count = 0; count < 8; count++)
;;;1908         {
;;;1909           *(psdstatus + count) = SDIO_ReadData();
;;;1910         }
;;;1911         psdstatus += 8;
;;;1912       }
;;;1913     }
;;;1914   
;;;1915     if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1916     {
;;;1917       SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1918       errorstatus = SD_DATA_TIMEOUT;
;;;1919       return(errorstatus);
;;;1920     }
;;;1921     else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1922     {
;;;1923       SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1924       errorstatus = SD_DATA_CRC_FAIL;
;;;1925       return(errorstatus);
;;;1926     }
;;;1927     else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;1928     {
;;;1929       SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;1930       errorstatus = SD_RX_OVERRUN;
;;;1931       return(errorstatus);
;;;1932     }
;;;1933     else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1934     {
;;;1935       SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1936       errorstatus = SD_START_BIT_ERR;
;;;1937       return(errorstatus);
;;;1938     }
;;;1939   
;;;1940     while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
;;;1941     {
;;;1942       *psdstatus = SDIO_ReadData();
;;;1943       psdstatus++;
;;;1944     }
;;;1945   
;;;1946     /* Clear all the static status flags*/
;;;1947     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1948     psdstatus -= 16;
;;;1949     for (count = 0; count < 16; count++)
;;;1950     {
;;;1951       psdstatus[count] = ((psdstatus[count] & SD_0TO7BITS) << 24) |((psdstatus[count] & SD_8TO15BITS) << 8) |
;;;1952                          ((psdstatus[count] & SD_16TO23BITS) >> 8) |((psdstatus[count] & SD_24TO31BITS) >> 24);
;;;1953     }
;;;1954     return(errorstatus);
;;;1955   }
000012  e8bd87f0          POP      {r4-r10,pc}
                  |L21.22|
000016  4d4d              LDR      r5,|L21.332|
000018  2640              MOVS     r6,#0x40              ;1852
00001a  2010              MOVS     r0,#0x10              ;1853
00001c  e9c56000          STRD     r6,r0,[r5,#0]         ;1853
000020  f1050108          ADD      r1,r5,#8              ;1857
000024  2700              MOVS     r7,#0                 ;1855
000026  f44f6880          MOV      r8,#0x400             ;1856
00002a  e8a101c0          STM      r1!,{r6-r8}           ;1857
00002e  4628              MOV      r0,r5                 ;1857
000030  f7fffffe          BL       SDIO_SendCommand
000034  2010              MOVS     r0,#0x10              ;1859
000036  f7fffffe          BL       CmdResp1Error
00003a  282a              CMP      r0,#0x2a              ;1861
00003c  d1e9              BNE      |L21.18|
00003e  4844              LDR      r0,|L21.336|
000040  1d29              ADDS     r1,r5,#4              ;1868
000042  6880              LDR      r0,[r0,#8]            ;1867  ; RCA
000044  0400              LSLS     r0,r0,#16             ;1867
000046  6028              STR      r0,[r5,#0]            ;1868  ; SDIO_CmdInitStructure
000048  2037              MOVS     r0,#0x37              ;1868
00004a  e8a101c1          STM      r1!,{r0,r6-r8}        ;1868
00004e  4628              MOV      r0,r5                 ;1872
000050  f7fffffe          BL       SDIO_SendCommand
000054  2037              MOVS     r0,#0x37              ;1873
000056  f7fffffe          BL       CmdResp1Error
00005a  282a              CMP      r0,#0x2a              ;1875
00005c  d1d9              BNE      |L21.18|
00005e  f1050014          ADD      r0,r5,#0x14           ;1880
000062  493c              LDR      r1,|L21.340|
000064  e9c01600          STRD     r1,r6,[r0,#0]         ;1880
000068  2160              MOVS     r1,#0x60              ;1882
00006a  6081              STR      r1,[r0,#8]            ;1883  ; SDIO_DataInitStructure
00006c  2102              MOVS     r1,#2                 ;1883
00006e  e9c01703          STRD     r1,r7,[r0,#0xc]       ;1883
000072  2101              MOVS     r1,#1                 ;1885
000074  6141              STR      r1,[r0,#0x14]         ;1886  ; SDIO_DataInitStructure
000076  f7fffffe          BL       SDIO_DataConfig
00007a  200d              MOVS     r0,#0xd               ;1891
00007c  e9c57000          STRD     r7,r0,[r5,#0]         ;1891
000080  3508              ADDS     r5,r5,#8              ;1891
000082  4832              LDR      r0,|L21.332|
000084  e8a501c0          STM      r5!,{r6-r8}           ;1891
000088  f7fffffe          BL       SDIO_SendCommand
00008c  200d              MOVS     r0,#0xd               ;1896
00008e  f7fffffe          BL       CmdResp1Error
000092  4606              MOV      r6,r0                 ;1896
000094  282a              CMP      r0,#0x2a              ;1898
000096  d1bc              BNE      |L21.18|
000098  4f2f              LDR      r7,|L21.344|
00009a  f44f4900          MOV      r9,#0x8000            ;1905
00009e  f240682a          MOV      r8,#0x62a             ;1903
                  |L21.162|
0000a2  6b78              LDR      r0,[r7,#0x34]         ;1903
0000a4  ea100f08          TST      r0,r8                 ;1903
0000a8  d008              BEQ      |L21.188|
0000aa  2008              MOVS     r0,#8                 ;1915
0000ac  f7fffffe          BL       SDIO_GetFlagStatus
0000b0  b198              CBZ      r0,|L21.218|
0000b2  2008              MOVS     r0,#8                 ;1917
0000b4  f7fffffe          BL       SDIO_ClearFlag
0000b8  2004              MOVS     r0,#4                 ;1918
0000ba  e7aa              B        |L21.18|
                  |L21.188|
0000bc  4648              MOV      r0,r9                 ;1905
0000be  f7fffffe          BL       SDIO_GetFlagStatus
0000c2  2800              CMP      r0,#0                 ;1905
0000c4  d0ed              BEQ      |L21.162|
0000c6  2500              MOVS     r5,#0                 ;1907
                  |L21.200|
0000c8  f7fffffe          BL       SDIO_ReadData
0000cc  f8440025          STR      r0,[r4,r5,LSL #2]     ;1909
0000d0  1c6d              ADDS     r5,r5,#1              ;1907
0000d2  2d08              CMP      r5,#8                 ;1907
0000d4  d3f8              BCC      |L21.200|
0000d6  3420              ADDS     r4,r4,#0x20           ;1911
0000d8  e7e3              B        |L21.162|
                  |L21.218|
0000da  2002              MOVS     r0,#2                 ;1921
0000dc  f7fffffe          BL       SDIO_GetFlagStatus
0000e0  b120              CBZ      r0,|L21.236|
0000e2  2002              MOVS     r0,#2                 ;1923
0000e4  f7fffffe          BL       SDIO_ClearFlag
0000e8  2002              MOVS     r0,#2                 ;1924
0000ea  e792              B        |L21.18|
                  |L21.236|
0000ec  2020              MOVS     r0,#0x20              ;1927
0000ee  f7fffffe          BL       SDIO_GetFlagStatus
0000f2  b120              CBZ      r0,|L21.254|
0000f4  2020              MOVS     r0,#0x20              ;1929
0000f6  f7fffffe          BL       SDIO_ClearFlag
0000fa  2006              MOVS     r0,#6                 ;1930
0000fc  e789              B        |L21.18|
                  |L21.254|
0000fe  f44f7500          MOV      r5,#0x200             ;1933
000102  4628              MOV      r0,r5                 ;1933
000104  f7fffffe          BL       SDIO_GetFlagStatus
000108  b140              CBZ      r0,|L21.284|
00010a  4628              MOV      r0,r5                 ;1935
00010c  f7fffffe          BL       SDIO_ClearFlag
000110  2007              MOVS     r0,#7                 ;1936
000112  e77e              B        |L21.18|
                  |L21.276|
000114  f7fffffe          BL       SDIO_ReadData
000118  c401              STM      r4!,{r0}              ;1942
00011a  e001              B        |L21.288|
                  |L21.284|
00011c  f44f1500          MOV      r5,#0x200000          ;1940
                  |L21.288|
000120  4628              MOV      r0,r5                 ;1940
000122  f7fffffe          BL       SDIO_GetFlagStatus
000126  2800              CMP      r0,#0                 ;1940
000128  d1f4              BNE      |L21.276|
00012a  f24050ff          MOV      r0,#0x5ff             ;1947
00012e  f7fffffe          BL       SDIO_ClearFlag
000132  3c40              SUBS     r4,r4,#0x40           ;1948
000134  f05f0000          MOVS.W   r0,#0                 ;1949
                  |L21.312|
000138  f8541020          LDR      r1,[r4,r0,LSL #2]     ;1951
00013c  ba09              REV      r1,r1                 ;1951
00013e  f8441020          STR      r1,[r4,r0,LSL #2]     ;1951
000142  1c40              ADDS     r0,r0,#1              ;1949
000144  2810              CMP      r0,#0x10              ;1949
000146  d3f7              BCC      |L21.312|
000148  4630              MOV      r0,r6                 ;1954
00014a  e762              B        |L21.18|
;;;1956   
                          ENDP

                  |L21.332|
                          DCD      ||.bss||+0x38
                  |L21.336|
                          DCD      ||.data||
                  |L21.340|
                          DCD      0x000fffff
                  |L21.344|
                          DCD      0x40018000

                          AREA ||i.SD_SendStatus||, CODE, READONLY, ALIGN=2

                  SD_SendStatus PROC
;;;1801   *******************************************************************************/
;;;1802   SD_Error SD_SendStatus(u32 *pcardstatus)
000000  b570              PUSH     {r4-r6,lr}
;;;1803   {
000002  0004              MOVS     r4,r0
;;;1804     SD_Error errorstatus = SD_OK;
;;;1805   
;;;1806     if (pcardstatus == NULL)
000004  d01c              BEQ      |L22.64|
;;;1807     {
;;;1808       errorstatus = SD_INVALID_PARAMETER;
;;;1809       return(errorstatus);
;;;1810     }
;;;1811   
;;;1812     SDIO_CmdInitStructure.SDIO_Argument = (u32) RCA << 16;
000006  480f              LDR      r0,|L22.68|
000008  490f              LDR      r1,|L22.72|
00000a  6880              LDR      r0,[r0,#8]  ; RCA
00000c  0400              LSLS     r0,r0,#16
;;;1813     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
00000e  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
000010  200d              MOVS     r0,#0xd
;;;1814     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
000012  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
000014  2040              MOVS     r0,#0x40
;;;1815     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000016  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
000018  2000              MOVS     r0,#0
;;;1816     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
00001a  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
00001c  f44f6080          MOV      r0,#0x400
;;;1817     SDIO_SendCommand(&SDIO_CmdInitStructure);
000020  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
000022  4608              MOV      r0,r1
000024  f7fffffe          BL       SDIO_SendCommand
;;;1818   
;;;1819   
;;;1820     errorstatus = CmdResp1Error(SDIO_SEND_STATUS);
000028  200d              MOVS     r0,#0xd
00002a  f7fffffe          BL       CmdResp1Error
00002e  4605              MOV      r5,r0
;;;1821   
;;;1822     if (errorstatus != SD_OK)
000030  282a              CMP      r0,#0x2a
000032  d104              BNE      |L22.62|
;;;1823     {
;;;1824       return(errorstatus);
;;;1825     }
;;;1826   
;;;1827     *pcardstatus = SDIO_GetResponse(SDIO_RESP1);
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       SDIO_GetResponse
;;;1828   
;;;1829     return(errorstatus);
00003a  6020              STR      r0,[r4,#0]
00003c  4628              MOV      r0,r5
                  |L22.62|
;;;1830   }
00003e  bd70              POP      {r4-r6,pc}
                  |L22.64|
000040  2026              MOVS     r0,#0x26              ;1808
000042  bd70              POP      {r4-r6,pc}
;;;1831   
                          ENDP

                  |L22.68|
                          DCD      ||.data||
                  |L22.72|
                          DCD      ||.bss||+0x38

                          AREA ||i.SD_SetDeviceMode||, CODE, READONLY, ALIGN=2

                  SD_SetDeviceMode PROC
;;;725    *******************************************************************************/
;;;726    SD_Error SD_SetDeviceMode(u32 Mode)
000000  212a              MOVS     r1,#0x2a
;;;727    {
;;;728      SD_Error errorstatus = SD_OK;
;;;729    
;;;730      if ((Mode == SD_DMA_MODE) || (Mode == SD_INTERRUPT_MODE) || (Mode == SD_POLLING_MODE))
000002  b130              CBZ      r0,|L23.18|
000004  2801              CMP      r0,#1
000006  d004              BEQ      |L23.18|
000008  2802              CMP      r0,#2
00000a  d002              BEQ      |L23.18|
;;;731      {
;;;732        DeviceMode = Mode;
;;;733      }
;;;734      else
;;;735      {
;;;736        errorstatus = SD_INVALID_PARAMETER;
00000c  2126              MOVS     r1,#0x26
                  |L23.14|
;;;737      }
;;;738      return(errorstatus);
00000e  4608              MOV      r0,r1
;;;739    
;;;740    }
000010  4770              BX       lr
                  |L23.18|
000012  4a01              LDR      r2,|L23.24|
000014  60d0              STR      r0,[r2,#0xc]          ;732  ; DeviceMode
000016  e7fa              B        |L23.14|
;;;741    
                          ENDP

                  |L23.24|
                          DCD      ||.data||

                          AREA ||i.SD_StopTransfer||, CODE, READONLY, ALIGN=2

                  SD_StopTransfer PROC
;;;1679   *******************************************************************************/
;;;1680   SD_Error SD_StopTransfer(void)
000000  4808              LDR      r0,|L24.36|
;;;1681   {
000002  b510              PUSH     {r4,lr}
;;;1682     SD_Error errorstatus = SD_OK;
;;;1683   
;;;1684     /* Send CMD12 STOP_TRANSMISSION  */
;;;1685     SDIO_CmdInitStructure.SDIO_Argument = 0x0;
000004  2100              MOVS     r1,#0
;;;1686     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
000006  220c              MOVS     r2,#0xc
000008  e9c01200          STRD     r1,r2,[r0,#0]
;;;1687     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
00000c  2240              MOVS     r2,#0x40
00000e  e9c02102          STRD     r2,r1,[r0,#8]
;;;1688     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1689     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000012  0111              LSLS     r1,r2,#4
;;;1690     SDIO_SendCommand(&SDIO_CmdInitStructure);
000014  6101              STR      r1,[r0,#0x10]  ; SDIO_CmdInitStructure
000016  f7fffffe          BL       SDIO_SendCommand
;;;1691   
;;;1692     errorstatus = CmdResp1Error(SDIO_STOP_TRANSMISSION);
00001a  e8bd4010          POP      {r4,lr}
00001e  200c              MOVS     r0,#0xc
000020  f7ffbffe          B.W      CmdResp1Error
;;;1693   
;;;1694     return(errorstatus);
;;;1695   }
;;;1696   
                          ENDP

                  |L24.36|
                          DCD      ||.bss||+0x38

                          AREA ||i.SD_WriteBlock||, CODE, READONLY, ALIGN=2

                  SD_WriteBlock PROC
;;;1151   *******************************************************************************/
;;;1152   SD_Error SD_WriteBlock(u32 addr, u32 *writebuff, u16 BlockSize)
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;1153   {
;;;1154     SD_Error errorstatus = SD_OK;
;;;1155     u8  power = 0, cardstate = 0;
000004  f04f0700          MOV      r7,#0
000008  4680              MOV      r8,r0                 ;1153
00000a  000d              MOVS     r5,r1                 ;1153
00000c  4614              MOV      r4,r2                 ;1153
00000e  f88d7000          STRB     r7,[sp,#0]
;;;1156     u32 timeout = 0, bytestransferred = 0;
000012  463e              MOV      r6,r7
;;;1157     u32 cardstatus = 0, count = 0, restwords = 0;
;;;1158     u32 *tempbuff = writebuff;
;;;1159   
;;;1160     if (writebuff == NULL)
000014  d028              BEQ      |L25.104|
;;;1161     {
;;;1162       errorstatus = SD_INVALID_PARAMETER;
;;;1163       return(errorstatus);
;;;1164     }
;;;1165   
;;;1166     TransferError = SD_OK;
000016  f8df9294          LDR      r9,|L25.684|
00001a  212a              MOVS     r1,#0x2a
00001c  f8891000          STRB     r1,[r9,#0]
;;;1167     TransferEnd = 0;
000020  f8c97018          STR      r7,[r9,#0x18]  ; TransferEnd
;;;1168     TotalNumberOfBytes = 0;
;;;1169   
;;;1170     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
000024  48a3              LDR      r0,|L25.692|
000026  49a2              LDR      r1,|L25.688|
000028  f8c97010          STR      r7,[r9,#0x10]  ; TotalNumberOfBytes
00002c  e9c01700          STRD     r1,r7,[r0,#0]
;;;1171     SDIO_DataInitStructure.SDIO_DataLength = 0;
;;;1172     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
;;;1173     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
000030  6087              STR      r7,[r0,#8]  ; SDIO_DataInitStructure
;;;1174     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
000032  60c7              STR      r7,[r0,#0xc]  ; SDIO_DataInitStructure
;;;1175     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
000034  6107              STR      r7,[r0,#0x10]  ; SDIO_DataInitStructure
;;;1176     SDIO_DataConfig(&SDIO_DataInitStructure);
000036  6147              STR      r7,[r0,#0x14]  ; SDIO_DataInitStructure
000038  f7fffffe          BL       SDIO_DataConfig
;;;1177     SDIO_DMACmd(DISABLE);
00003c  2000              MOVS     r0,#0
00003e  f7fffffe          BL       SDIO_DMACmd
;;;1178   
;;;1179     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
000042  2000              MOVS     r0,#0
000044  f7fffffe          BL       SDIO_GetResponse
000048  0180              LSLS     r0,r0,#6
00004a  d502              BPL      |L25.82|
;;;1180     {
;;;1181       errorstatus = SD_LOCK_UNLOCK_FAILED;
00004c  200e              MOVS     r0,#0xe
                  |L25.78|
;;;1182       return(errorstatus);
;;;1183     }
;;;1184   
;;;1185     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;1186     {
;;;1187       BlockSize = 512;
;;;1188       addr /= 512;
;;;1189     }
;;;1190     
;;;1191     /* Set the block size, both on controller and card */
;;;1192     if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
;;;1193     {
;;;1194       power = convert_from_bytes_to_power_of_two(BlockSize);
;;;1195   
;;;1196       SDIO_CmdInitStructure.SDIO_Argument = (u32) BlockSize;
;;;1197       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
;;;1198       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1199       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1200       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1201       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1202   
;;;1203       errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
;;;1204   
;;;1205       if (errorstatus != SD_OK)
;;;1206       {
;;;1207         return(errorstatus);
;;;1208       }
;;;1209     }
;;;1210     else
;;;1211     {
;;;1212       errorstatus = SD_INVALID_PARAMETER;
;;;1213       return(errorstatus);
;;;1214     }
;;;1215   
;;;1216     /* Wait till card is ready for data Added */
;;;1217     SDIO_CmdInitStructure.SDIO_Argument = (u32) (RCA << 16);
;;;1218     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
;;;1219     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1220     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1221     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1222     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1223   
;;;1224     errorstatus = CmdResp1Error(SDIO_SEND_STATUS);
;;;1225   
;;;1226     if (errorstatus != SD_OK)
;;;1227     {
;;;1228       return(errorstatus);
;;;1229     }
;;;1230   
;;;1231     cardstatus = SDIO_GetResponse(SDIO_RESP1);
;;;1232   
;;;1233     timeout = SD_DATATIMEOUT;
;;;1234   
;;;1235     while (((cardstatus & 0x00000100) == 0) && (timeout > 0))
;;;1236     {
;;;1237       timeout--;
;;;1238       SDIO_CmdInitStructure.SDIO_Argument = (u32) (RCA << 16);
;;;1239       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
;;;1240       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1241       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1242       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1243       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1244   
;;;1245       errorstatus = CmdResp1Error(SDIO_SEND_STATUS);
;;;1246   
;;;1247       if (errorstatus != SD_OK)
;;;1248       {
;;;1249         return(errorstatus);
;;;1250       }
;;;1251       cardstatus = SDIO_GetResponse(SDIO_RESP1);
;;;1252     }
;;;1253   
;;;1254     if (timeout == 0)
;;;1255     {
;;;1256       return(SD_ERROR);
;;;1257     }
;;;1258   
;;;1259     /* Send CMD24 WRITE_SINGLE_BLOCK */
;;;1260     SDIO_CmdInitStructure.SDIO_Argument = addr;
;;;1261     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_WRITE_SINGLE_BLOCK;
;;;1262     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1263     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1264     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1265     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1266   
;;;1267     errorstatus = CmdResp1Error(SDIO_WRITE_SINGLE_BLOCK);
;;;1268   
;;;1269     if (errorstatus != SD_OK)
;;;1270     {
;;;1271       return(errorstatus);
;;;1272     }
;;;1273   
;;;1274     TotalNumberOfBytes = BlockSize;
;;;1275     StopCondition = 0;
;;;1276     SrcBuffer = writebuff;
;;;1277   
;;;1278     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1279     SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
;;;1280     SDIO_DataInitStructure.SDIO_DataBlockSize = (u32) power << 4;
;;;1281     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1282     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1283     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1284     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1285   
;;;1286     /* In case of single data block transfer no need of stop command at all */
;;;1287     if (DeviceMode == SD_POLLING_MODE)
;;;1288     {
;;;1289       while (!(SDIO->STA & (SDIO_FLAG_DBCKEND | SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
;;;1290       {
;;;1291         if (SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)
;;;1292         {
;;;1293           if ((TotalNumberOfBytes - bytestransferred) < 32)
;;;1294           {
;;;1295             restwords = ((TotalNumberOfBytes - bytestransferred) % 4 == 0) ? ((TotalNumberOfBytes - bytestransferred) / 4) : (( TotalNumberOfBytes -  bytestransferred) / 4 + 1);
;;;1296   
;;;1297             for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
;;;1298             {
;;;1299               SDIO_WriteData(*tempbuff);
;;;1300             }
;;;1301           }
;;;1302           else
;;;1303           {
;;;1304             for (count = 0; count < 8; count++)
;;;1305             {
;;;1306               SDIO_WriteData(*(tempbuff + count));
;;;1307             }
;;;1308             tempbuff += 8;
;;;1309             bytestransferred += 32;
;;;1310           }
;;;1311         }
;;;1312       }
;;;1313       if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1314       {
;;;1315         SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1316         errorstatus = SD_DATA_TIMEOUT;
;;;1317         return(errorstatus);
;;;1318       }
;;;1319       else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1320       {
;;;1321         SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1322         errorstatus = SD_DATA_CRC_FAIL;
;;;1323         return(errorstatus);
;;;1324       }
;;;1325       else if (SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET)
;;;1326       {
;;;1327         SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);
;;;1328         errorstatus = SD_TX_UNDERRUN;
;;;1329         return(errorstatus);
;;;1330       }
;;;1331       else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1332       {
;;;1333         SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1334         errorstatus = SD_START_BIT_ERR;
;;;1335         return(errorstatus);
;;;1336       }
;;;1337     }
;;;1338     else if (DeviceMode == SD_INTERRUPT_MODE)
;;;1339     {
;;;1340       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_FLAG_TXFIFOHE | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
;;;1341       while ((TransferEnd == 0) && (TransferError == SD_OK))
;;;1342       {}
;;;1343       if (TransferError != SD_OK)
;;;1344       {
;;;1345         return(TransferError);
;;;1346       }
;;;1347     }
;;;1348     else if (DeviceMode == SD_DMA_MODE)
;;;1349     {
;;;1350       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
;;;1351       DMA_TxConfiguration(writebuff, BlockSize);
;;;1352       SDIO_DMACmd(ENABLE);
;;;1353       while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
;;;1354       {}
;;;1355       while ((TransferEnd == 0) && (TransferError == SD_OK))
;;;1356       {}
;;;1357       if (TransferError != SD_OK)
;;;1358       {
;;;1359         return(TransferError);
;;;1360       }
;;;1361     }
;;;1362   
;;;1363     /* Clear all the static flags */
;;;1364     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1365   
;;;1366     /* Wait till the card is in programming state */
;;;1367     errorstatus = IsCardProgramming(&cardstate);
;;;1368   
;;;1369     while ((errorstatus == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
;;;1370     {
;;;1371       errorstatus = IsCardProgramming(&cardstate);
;;;1372     }
;;;1373   
;;;1374     return(errorstatus);
;;;1375   }
00004e  e8bd9ffc          POP      {r2-r12,pc}
                  |L25.82|
000052  f8d90004          LDR      r0,[r9,#4]            ;1185  ; CardType
000056  2802              CMP      r0,#2                 ;1185
000058  d008              BEQ      |L25.108|
00005a  1e60              SUBS     r0,r4,#1              ;1192
00005c  f5b06f00          CMP      r0,#0x800             ;1192
000060  d202              BCS      |L25.104|
                  |L25.98|
000062  1e60              SUBS     r0,r4,#1              ;1192
000064  4204              TST      r4,r0                 ;1192
000066  d006              BEQ      |L25.118|
                  |L25.104|
000068  2026              MOVS     r0,#0x26              ;1212
                  |L25.106|
00006a  e7f0              B        |L25.78|
                  |L25.108|
00006c  f44f7400          MOV      r4,#0x200             ;1187
000070  ea4f2858          LSR      r8,r8,#9              ;1188
000074  e7f5              B        |L25.98|
                  |L25.118|
000076  4620              MOV      r0,r4                 ;1194
000078  f7fffffe          BL       convert_from_bytes_to_power_of_two
00007c  f8dfa234          LDR      r10,|L25.692|
000080  9001              STR      r0,[sp,#4]            ;1198
000082  f1aa0a14          SUB      r10,r10,#0x14         ;1196
000086  2110              MOVS     r1,#0x10              ;1197
000088  e9ca4100          STRD     r4,r1,[r10,#0]        ;1198
00008c  f04f0b40          MOV      r11,#0x40             ;1198
000090  e9cab702          STRD     r11,r7,[r10,#8]       ;1198
000094  0189              LSLS     r1,r1,#6              ;1200
000096  4650              MOV      r0,r10                ;1201
000098  f8ca1010          STR      r1,[r10,#0x10]        ;1201  ; SDIO_CmdInitStructure
00009c  f7fffffe          BL       SDIO_SendCommand
0000a0  2010              MOVS     r0,#0x10              ;1203
0000a2  f7fffffe          BL       CmdResp1Error
0000a6  282a              CMP      r0,#0x2a              ;1205
0000a8  d1d1              BNE      |L25.78|
0000aa  4880              LDR      r0,|L25.684|
0000ac  46d1              MOV      r9,r10                ;1217
0000ae  6880              LDR      r0,[r0,#8]            ;1217  ; RCA
0000b0  0401              LSLS     r1,r0,#16             ;1217
0000b2  f8ca1000          STR      r1,[r10,#0]           ;1218  ; SDIO_CmdInitStructure
0000b6  210d              MOVS     r1,#0xd               ;1218
0000b8  e9ca1b01          STRD     r1,r11,[r10,#4]       ;1218
0000bc  4650              MOV      r0,r10                ;1217
0000be  2100              MOVS     r1,#0                 ;1220
0000c0  f44f6a80          MOV      r10,#0x400            ;1221
0000c4  e9c01a03          STRD     r1,r10,[r0,#0xc]      ;1221
0000c8  487a              LDR      r0,|L25.692|
0000ca  3814              SUBS     r0,r0,#0x14           ;1222
0000cc  f7fffffe          BL       SDIO_SendCommand
0000d0  200d              MOVS     r0,#0xd               ;1224
0000d2  f7fffffe          BL       CmdResp1Error
0000d6  282a              CMP      r0,#0x2a              ;1226
0000d8  d1b9              BNE      |L25.78|
0000da  2000              MOVS     r0,#0                 ;1231
0000dc  f7fffffe          BL       SDIO_GetResponse
0000e0  4f73              LDR      r7,|L25.688|
0000e2  f04f0a00          MOV      r10,#0                ;1155
0000e6  e01a              B        |L25.286|
                  |L25.232|
0000e8  4870              LDR      r0,|L25.684|
0000ea  1e7f              SUBS     r7,r7,#1              ;1237
0000ec  6880              LDR      r0,[r0,#8]            ;1238  ; RCA
0000ee  0401              LSLS     r1,r0,#16             ;1238
0000f0  f8c91000          STR      r1,[r9,#0]            ;1239  ; SDIO_CmdInitStructure
0000f4  210d              MOVS     r1,#0xd               ;1239
0000f6  f8c9a00c          STR      r10,[r9,#0xc]         ;1241  ; SDIO_CmdInitStructure
0000fa  e9c91b01          STRD     r1,r11,[r9,#4]        ;1241
0000fe  486d              LDR      r0,|L25.692|
000100  f44f6180          MOV      r1,#0x400             ;1242
000104  3814              SUBS     r0,r0,#0x14           ;1243
000106  f8c91010          STR      r1,[r9,#0x10]         ;1243  ; SDIO_CmdInitStructure
00010a  f7fffffe          BL       SDIO_SendCommand
00010e  200d              MOVS     r0,#0xd               ;1245
000110  f7fffffe          BL       CmdResp1Error
000114  282a              CMP      r0,#0x2a              ;1247
000116  d19a              BNE      |L25.78|
000118  2000              MOVS     r0,#0                 ;1251
00011a  f7fffffe          BL       SDIO_GetResponse
                  |L25.286|
00011e  05c0              LSLS     r0,r0,#23             ;1235
000120  d402              BMI      |L25.296|
000122  2f00              CMP      r7,#0                 ;1235
000124  d1e0              BNE      |L25.232|
000126  e031              B        |L25.396|
                  |L25.296|
000128  b37f              CBZ      r7,|L25.394|
00012a  4648              MOV      r0,r9                 ;1260
00012c  2118              MOVS     r1,#0x18              ;1261
00012e  f8c9b008          STR      r11,[r9,#8]           ;1263  ; SDIO_CmdInitStructure
000132  e9c08100          STRD     r8,r1,[r0,#0]         ;1263
000136  f44f6180          MOV      r1,#0x400             ;1264
00013a  e9c0a103          STRD     r10,r1,[r0,#0xc]      ;1264
00013e  485d              LDR      r0,|L25.692|
000140  46d1              MOV      r9,r10                ;1263
000142  3814              SUBS     r0,r0,#0x14           ;1265
000144  f7fffffe          BL       SDIO_SendCommand
000148  2018              MOVS     r0,#0x18              ;1267
00014a  f7fffffe          BL       CmdResp1Error
00014e  282a              CMP      r0,#0x2a              ;1269
000150  d18b              BNE      |L25.106|
000152  f8df8158          LDR      r8,|L25.684|
000156  4857              LDR      r0,|L25.692|
000158  4a55              LDR      r2,|L25.688|
00015a  f8c85020          STR      r5,[r8,#0x20]         ;1278  ; SrcBuffer
00015e  e9c84904          STRD     r4,r9,[r8,#0x10]      ;1278
000162  e9c02400          STRD     r2,r4,[r0,#0]         ;1278
000166  9a01              LDR      r2,[sp,#4]            ;1280
000168  2101              MOVS     r1,#1                 ;1283
00016a  0112              LSLS     r2,r2,#4              ;1280
00016c  e9c02902          STRD     r2,r9,[r0,#8]         ;1280
000170  e9c09104          STRD     r9,r1,[r0,#0x10]      ;1284
000174  4647              MOV      r7,r8                 ;1274
000176  f7fffffe          BL       SDIO_DataConfig
00017a  68f8              LDR      r0,[r7,#0xc]          ;1287  ; DeviceMode
00017c  2802              CMP      r0,#2                 ;1287
00017e  d02d              BEQ      |L25.476|
000180  4646              MOV      r6,r8                 ;1338
000182  2801              CMP      r0,#1                 ;1338
000184  d05a              BEQ      |L25.572|
000186  b3d8              CBZ      r0,|L25.512|
000188  e080              B        |L25.652|
                  |L25.394|
00018a  e7ff              B        |L25.396|
                  |L25.396|
00018c  2029              MOVS     r0,#0x29              ;1256
00018e  e75e              B        |L25.78|
                  |L25.400|
000190  f44f4080          MOV      r0,#0x4000            ;1291
000194  f7fffffe          BL       SDIO_GetFlagStatus
000198  b1f8              CBZ      r0,|L25.474|
00019a  f8d80010          LDR      r0,[r8,#0x10]         ;1293  ; TotalNumberOfBytes
00019e  1b80              SUBS     r0,r0,r6              ;1293
0001a0  2820              CMP      r0,#0x20              ;1293
0001a2  d20f              BCS      |L25.452|
0001a4  0781              LSLS     r1,r0,#30             ;1295
0001a6  ea4f0490          LSR      r4,r0,#2              ;1295
0001aa  d000              BEQ      |L25.430|
0001ac  1c64              ADDS     r4,r4,#1              ;1295
                  |L25.430|
0001ae  2700              MOVS     r7,#0                 ;1297
0001b0  e005              B        |L25.446|
                  |L25.434|
0001b2  6828              LDR      r0,[r5,#0]            ;1299
0001b4  f7fffffe          BL       SDIO_WriteData
0001b8  1c7f              ADDS     r7,r7,#1              ;1297
0001ba  1d2d              ADDS     r5,r5,#4              ;1297
0001bc  1d36              ADDS     r6,r6,#4              ;1297
                  |L25.446|
0001be  42a7              CMP      r7,r4                 ;1297
0001c0  d210              BCS      |L25.484|
0001c2  e7f6              B        |L25.434|
                  |L25.452|
0001c4  f05f0400          MOVS.W   r4,#0                 ;1304
                  |L25.456|
0001c8  f8550024          LDR      r0,[r5,r4,LSL #2]     ;1306
0001cc  f7fffffe          BL       SDIO_WriteData
0001d0  1c64              ADDS     r4,r4,#1              ;1304
0001d2  2c08              CMP      r4,#8                 ;1304
0001d4  d3f8              BCC      |L25.456|
0001d6  3520              ADDS     r5,r5,#0x20           ;1308
0001d8  3620              ADDS     r6,r6,#0x20           ;1309
                  |L25.474|
0001da  e003              B        |L25.484|
                  |L25.476|
0001dc  f8df90d8          LDR      r9,|L25.696|
0001e0  f2406a1a          MOV      r10,#0x61a            ;1289
                  |L25.484|
0001e4  f8d91034          LDR      r1,[r9,#0x34]         ;1289
0001e8  ea110f0a          TST      r1,r10                ;1289
0001ec  d0d0              BEQ      |L25.400|
0001ee  2008              MOVS     r0,#8                 ;1313
0001f0  f7fffffe          BL       SDIO_GetFlagStatus
0001f4  b128              CBZ      r0,|L25.514|
0001f6  2008              MOVS     r0,#8                 ;1315
0001f8  f7fffffe          BL       SDIO_ClearFlag
0001fc  2004              MOVS     r0,#4                 ;1316
                  |L25.510|
0001fe  e726              B        |L25.78|
                  |L25.512|
000200  e02b              B        |L25.602|
                  |L25.514|
000202  2002              MOVS     r0,#2                 ;1319
000204  f7fffffe          BL       SDIO_GetFlagStatus
000208  b120              CBZ      r0,|L25.532|
00020a  2002              MOVS     r0,#2                 ;1321
00020c  f7fffffe          BL       SDIO_ClearFlag
000210  2002              MOVS     r0,#2                 ;1322
000212  e71c              B        |L25.78|
                  |L25.532|
000214  2010              MOVS     r0,#0x10              ;1325
000216  f7fffffe          BL       SDIO_GetFlagStatus
00021a  b120              CBZ      r0,|L25.550|
00021c  2010              MOVS     r0,#0x10              ;1327
00021e  f7fffffe          BL       SDIO_ClearFlag
000222  2005              MOVS     r0,#5                 ;1328
000224  e713              B        |L25.78|
                  |L25.550|
000226  f44f7400          MOV      r4,#0x200             ;1331
00022a  4620              MOV      r0,r4                 ;1331
00022c  f7fffffe          BL       SDIO_GetFlagStatus
000230  b360              CBZ      r0,|L25.652|
000232  4620              MOV      r0,r4                 ;1333
000234  f7fffffe          BL       SDIO_ClearFlag
000238  2007              MOVS     r0,#7                 ;1334
00023a  e708              B        |L25.78|
                  |L25.572|
00023c  2101              MOVS     r1,#1                 ;1340
00023e  f244301a          MOV      r0,#0x431a            ;1340
000242  f7fffffe          BL       SDIO_ITConfig
                  |L25.582|
000246  69b0              LDR      r0,[r6,#0x18]         ;1341  ; TransferEnd
000248  b910              CBNZ     r0,|L25.592|
00024a  7830              LDRB     r0,[r6,#0]            ;1341  ; TransferError
00024c  282a              CMP      r0,#0x2a              ;1341
00024e  d0fa              BEQ      |L25.582|
                  |L25.592|
000250  7830              LDRB     r0,[r6,#0]            ;1343  ; TransferError
000252  282a              CMP      r0,#0x2a              ;1343
000254  d01a              BEQ      |L25.652|
000256  7830              LDRB     r0,[r6,#0]            ;1359  ; TransferError
000258  e6f9              B        |L25.78|
                  |L25.602|
00025a  2101              MOVS     r1,#1                 ;1350
00025c  f240301a          MOV      r0,#0x31a             ;1350
000260  f7fffffe          BL       SDIO_ITConfig
000264  4621              MOV      r1,r4                 ;1351
000266  4628              MOV      r0,r5                 ;1351
000268  f7fffffe          BL       DMA_TxConfiguration
00026c  2001              MOVS     r0,#1                 ;1352
00026e  f7fffffe          BL       SDIO_DMACmd
000272  4c12              LDR      r4,|L25.700|
                  |L25.628|
000274  4620              MOV      r0,r4                 ;1353
000276  f7fffffe          BL       DMA_GetFlagStatus
00027a  2800              CMP      r0,#0                 ;1353
00027c  d0fa              BEQ      |L25.628|
                  |L25.638|
00027e  69b0              LDR      r0,[r6,#0x18]         ;1355  ; TransferEnd
000280  2800              CMP      r0,#0                 ;1355
000282  d1e5              BNE      |L25.592|
000284  7830              LDRB     r0,[r6,#0]            ;1355  ; TransferError
000286  282a              CMP      r0,#0x2a              ;1355
000288  d0f9              BEQ      |L25.638|
00028a  e7e1              B        |L25.592|
                  |L25.652|
00028c  f24050ff          MOV      r0,#0x5ff             ;1364
000290  f7fffffe          BL       SDIO_ClearFlag
                  |L25.660|
000294  4668              MOV      r0,sp                 ;1371
000296  f7fffffe          BL       IsCardProgramming
00029a  282a              CMP      r0,#0x2a              ;1369
00029c  d1af              BNE      |L25.510|
00029e  f89d1000          LDRB     r1,[sp,#0]            ;1369
0002a2  2907              CMP      r1,#7                 ;1369
0002a4  d0f6              BEQ      |L25.660|
0002a6  2906              CMP      r1,#6                 ;1369
0002a8  d0f4              BEQ      |L25.660|
0002aa  e6d0              B        |L25.78|
;;;1376   
                          ENDP

                  |L25.684|
                          DCD      ||.data||
                  |L25.688|
                          DCD      0x000fffff
                  |L25.692|
                          DCD      ||.bss||+0x4c
                  |L25.696|
                          DCD      0x40018000
                  |L25.700|
                          DCD      0x10002000

                          AREA ||i.SD_WriteMultiBlocks||, CODE, READONLY, ALIGN=2

                  SD_WriteMultiBlocks PROC
;;;1388   *******************************************************************************/
;;;1389   SD_Error SD_WriteMultiBlocks(u32 addr, u32 *writebuff, u16 BlockSize, u32 NumberOfBlocks)
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;1390   {
000004  4681              MOV      r9,r0
;;;1391     SD_Error errorstatus = SD_OK;
;;;1392     u8  power = 0, cardstate = 0;
000006  f04f0000          MOV      r0,#0
00000a  000c              MOVS     r4,r1                 ;1390
00000c  4615              MOV      r5,r2                 ;1390
00000e  461e              MOV      r6,r3                 ;1390
000010  f88d0000          STRB     r0,[sp,#0]
;;;1393     u32 bytestransferred = 0;
000014  4607              MOV      r7,r0
;;;1394     u32 count = 0, restwords = 0;
;;;1395     u32 *tempbuff = writebuff;
;;;1396   
;;;1397     if (writebuff == NULL)
000016  d069              BEQ      |L26.236|
;;;1398     {
;;;1399       errorstatus = SD_INVALID_PARAMETER;
;;;1400       return(errorstatus);
;;;1401     }
;;;1402   
;;;1403     TransferError = SD_OK;
000018  f8df82f0          LDR      r8,|L26.780|
00001c  222a              MOVS     r2,#0x2a
00001e  f8882000          STRB     r2,[r8,#0]
;;;1404     TransferEnd = 0;
000022  f8c80018          STR      r0,[r8,#0x18]  ; TransferEnd
;;;1405     TotalNumberOfBytes = 0;
;;;1406   
;;;1407     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
000026  49bb              LDR      r1,|L26.788|
000028  4ab9              LDR      r2,|L26.784|
00002a  f8c80010          STR      r0,[r8,#0x10]  ; TotalNumberOfBytes
00002e  e9c12000          STRD     r2,r0,[r1,#0]
;;;1408     SDIO_DataInitStructure.SDIO_DataLength = 0;
;;;1409     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
;;;1410     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
000032  6088              STR      r0,[r1,#8]  ; SDIO_DataInitStructure
;;;1411     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
000034  60c8              STR      r0,[r1,#0xc]  ; SDIO_DataInitStructure
;;;1412     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
000036  6108              STR      r0,[r1,#0x10]  ; SDIO_DataInitStructure
;;;1413     SDIO_DataConfig(&SDIO_DataInitStructure);
000038  6148              STR      r0,[r1,#0x14]  ; SDIO_DataInitStructure
00003a  4608              MOV      r0,r1
00003c  f7fffffe          BL       SDIO_DataConfig
;;;1414     SDIO_DMACmd(DISABLE);
000040  2000              MOVS     r0,#0
000042  f7fffffe          BL       SDIO_DMACmd
;;;1415   
;;;1416     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
000046  2000              MOVS     r0,#0
000048  f7fffffe          BL       SDIO_GetResponse
00004c  0180              LSLS     r0,r0,#6
00004e  d502              BPL      |L26.86|
;;;1417     {
;;;1418       errorstatus = SD_LOCK_UNLOCK_FAILED;
000050  200e              MOVS     r0,#0xe
                  |L26.82|
;;;1419       return(errorstatus);
;;;1420     }
;;;1421   
;;;1422     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;1423     {
;;;1424       BlockSize = 512;
;;;1425       addr /= 512;
;;;1426     }
;;;1427     
;;;1428     /* Set the block size, both on controller and card */
;;;1429     if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
;;;1430     {
;;;1431       power = convert_from_bytes_to_power_of_two(BlockSize);
;;;1432   
;;;1433       SDIO_CmdInitStructure.SDIO_Argument = (u32) BlockSize;
;;;1434       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
;;;1435       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1436       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1437       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1438       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1439   
;;;1440       errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
;;;1441   
;;;1442       if (errorstatus != SD_OK)
;;;1443       {
;;;1444         return(errorstatus);
;;;1445       }
;;;1446     }
;;;1447     else
;;;1448     {
;;;1449       errorstatus = SD_INVALID_PARAMETER;
;;;1450       return(errorstatus);
;;;1451     }
;;;1452   
;;;1453     /* Wait till card is ready for data Added */
;;;1454     SDIO_CmdInitStructure.SDIO_Argument = (u32) (RCA << 16);
;;;1455     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
;;;1456     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1457     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1458     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1459     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1460   
;;;1461     errorstatus = CmdResp1Error(SDIO_SEND_STATUS);
;;;1462   
;;;1463     if (errorstatus != SD_OK)
;;;1464     {
;;;1465       return(errorstatus);
;;;1466     }
;;;1467   
;;;1468     if (NumberOfBlocks > 1)
;;;1469     {
;;;1470       /* Common to all modes */
;;;1471       if (NumberOfBlocks * BlockSize > SD_MAX_DATA_LENGTH)
;;;1472       {
;;;1473         errorstatus = SD_INVALID_PARAMETER;
;;;1474         return(errorstatus);
;;;1475       }
;;;1476   
;;;1477       if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;1478       {
;;;1479         /* To improve performance */
;;;1480         SDIO_CmdInitStructure.SDIO_Argument = (u32) (RCA << 16);
;;;1481         SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
;;;1482         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1483         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1484         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1485         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1486   
;;;1487   
;;;1488         errorstatus = CmdResp1Error(SDIO_APP_CMD);
;;;1489   
;;;1490         if (errorstatus != SD_OK)
;;;1491         {
;;;1492           return(errorstatus);
;;;1493         }
;;;1494         /* To improve performance */
;;;1495         SDIO_CmdInitStructure.SDIO_Argument = (u32)NumberOfBlocks;
;;;1496         SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCK_COUNT;
;;;1497         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1498         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1499         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1500         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1501   
;;;1502         errorstatus = CmdResp1Error(SDIO_SET_BLOCK_COUNT);
;;;1503   
;;;1504         if (errorstatus != SD_OK)
;;;1505         {
;;;1506           return(errorstatus);
;;;1507         }
;;;1508       }
;;;1509   
;;;1510       /* Send CMD25 WRITE_MULT_BLOCK with argument data address */
;;;1511       SDIO_CmdInitStructure.SDIO_Argument = (u32)addr;
;;;1512       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_WRITE_MULT_BLOCK;
;;;1513       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1514       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1515       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1516       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1517   
;;;1518       errorstatus = CmdResp1Error(SDIO_WRITE_MULT_BLOCK);
;;;1519   
;;;1520       if (SD_OK != errorstatus)
;;;1521       {
;;;1522         return(errorstatus);
;;;1523       }
;;;1524   
;;;1525       TotalNumberOfBytes = NumberOfBlocks * BlockSize;
;;;1526       StopCondition = 1;
;;;1527       SrcBuffer = writebuff;
;;;1528   
;;;1529       SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1530       SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
;;;1531       SDIO_DataInitStructure.SDIO_DataBlockSize = (u32) power << 4;
;;;1532       SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1533       SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1534       SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1535       SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1536   
;;;1537       if (DeviceMode == SD_POLLING_MODE)
;;;1538       {
;;;1539         while (!(SDIO->STA & (SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DATAEND | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
;;;1540         {
;;;1541           if (SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)
;;;1542           {
;;;1543             if (!((TotalNumberOfBytes - bytestransferred) < SD_HALFFIFOBYTES))
;;;1544             {
;;;1545               for (count = 0; count < SD_HALFFIFO; count++)
;;;1546               {
;;;1547                 SDIO_WriteData(*(tempbuff + count));
;;;1548               }
;;;1549               tempbuff += SD_HALFFIFO;
;;;1550               bytestransferred += SD_HALFFIFOBYTES;
;;;1551             }
;;;1552             else
;;;1553             {
;;;1554               restwords = ((TotalNumberOfBytes - bytestransferred) % 4 == 0) ? ((TotalNumberOfBytes - bytestransferred) / 4) :
;;;1555                           ((TotalNumberOfBytes - bytestransferred) / 4 + 1);
;;;1556   
;;;1557               for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
;;;1558               {
;;;1559                 SDIO_WriteData(*tempbuff);
;;;1560               }
;;;1561             }
;;;1562           }
;;;1563         }
;;;1564   
;;;1565         if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1566         {
;;;1567           SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1568           errorstatus = SD_DATA_TIMEOUT;
;;;1569           return(errorstatus);
;;;1570         }
;;;1571         else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1572         {
;;;1573           SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1574           errorstatus = SD_DATA_CRC_FAIL;
;;;1575           return(errorstatus);
;;;1576         }
;;;1577         else if (SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET)
;;;1578         {
;;;1579           SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);
;;;1580           errorstatus = SD_TX_UNDERRUN;
;;;1581           return(errorstatus);
;;;1582         }
;;;1583         else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1584         {
;;;1585           SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1586           errorstatus = SD_START_BIT_ERR;
;;;1587           return(errorstatus);
;;;1588         }
;;;1589   
;;;1590         if (SDIO_GetFlagStatus(SDIO_FLAG_DATAEND) != RESET)
;;;1591         {
;;;1592          if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;1593           {
;;;1594             /* Send CMD12 STOP_TRANSMISSION */
;;;1595             SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;1596             SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
;;;1597             SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1598             SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1599             SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1600             SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1601   
;;;1602   
;;;1603             errorstatus = CmdResp1Error(SDIO_STOP_TRANSMISSION);
;;;1604   
;;;1605             if (errorstatus != SD_OK)
;;;1606             {
;;;1607               return(errorstatus);
;;;1608             }
;;;1609           }
;;;1610         }
;;;1611       }
;;;1612       else if (DeviceMode == SD_INTERRUPT_MODE)
;;;1613       {
;;;1614         SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXFIFOHE | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
;;;1615         while ((TransferEnd == 0) && (TransferError == SD_OK))
;;;1616         {}
;;;1617         if (TransferError != SD_OK)
;;;1618         {
;;;1619           return(TransferError);
;;;1620         }
;;;1621       }
;;;1622       else if (DeviceMode == SD_DMA_MODE)
;;;1623       {
;;;1624         SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
;;;1625         SDIO_DMACmd(ENABLE);
;;;1626         DMA_TxConfiguration(writebuff, (NumberOfBlocks * BlockSize));
;;;1627         while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
;;;1628         {}
;;;1629         while ((TransferEnd == 0) && (TransferError == SD_OK))
;;;1630         {}
;;;1631         if (TransferError != SD_OK)
;;;1632         {
;;;1633           return(TransferError);
;;;1634         }
;;;1635       }
;;;1636     }
;;;1637     /* Clear all the static flags */
;;;1638     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1639   
;;;1640     /* Wait till the card is in programming state */
;;;1641     errorstatus = IsCardProgramming(&cardstate);
;;;1642   
;;;1643     while ((errorstatus == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
;;;1644     {
;;;1645       errorstatus = IsCardProgramming(&cardstate);
;;;1646     }
;;;1647   
;;;1648     return(errorstatus);
;;;1649   }
000052  e8bd9ffc          POP      {r2-r12,pc}
                  |L26.86|
000056  f8d80004          LDR      r0,[r8,#4]            ;1422  ; CardType
00005a  2802              CMP      r0,#2                 ;1422
00005c  d007              BEQ      |L26.110|
00005e  1e68              SUBS     r0,r5,#1              ;1429
000060  f5b06f00          CMP      r0,#0x800             ;1429
000064  d242              BCS      |L26.236|
                  |L26.102|
000066  1e68              SUBS     r0,r5,#1              ;1429
000068  4205              TST      r5,r0                 ;1429
00006a  d005              BEQ      |L26.120|
00006c  e03e              B        |L26.236|
                  |L26.110|
00006e  f44f7500          MOV      r5,#0x200             ;1424
000072  ea4f2959          LSR      r9,r9,#9              ;1425
000076  e7f6              B        |L26.102|
                  |L26.120|
000078  4628              MOV      r0,r5                 ;1431
00007a  f7fffffe          BL       convert_from_bytes_to_power_of_two
00007e  f8dfb294          LDR      r11,|L26.788|
000082  9001              STR      r0,[sp,#4]            ;1435
000084  f1ab0b14          SUB      r11,r11,#0x14         ;1433
000088  2110              MOVS     r1,#0x10              ;1434
00008a  e9cb5100          STRD     r5,r1,[r11,#0]        ;1435
00008e  f04f0a40          MOV      r10,#0x40             ;1435
000092  2100              MOVS     r1,#0                 ;1436
000094  e9cba102          STRD     r10,r1,[r11,#8]       ;1436
000098  f44f6180          MOV      r1,#0x400             ;1437
00009c  4658              MOV      r0,r11                ;1438
00009e  f8cb1010          STR      r1,[r11,#0x10]        ;1438  ; SDIO_CmdInitStructure
0000a2  f7fffffe          BL       SDIO_SendCommand
0000a6  2010              MOVS     r0,#0x10              ;1440
0000a8  f7fffffe          BL       CmdResp1Error
0000ac  282a              CMP      r0,#0x2a              ;1442
0000ae  d1d0              BNE      |L26.82|
0000b0  4896              LDR      r0,|L26.780|
0000b2  6880              LDR      r0,[r0,#8]            ;1454  ; RCA
0000b4  0401              LSLS     r1,r0,#16             ;1454
0000b6  f8cb1000          STR      r1,[r11,#0]           ;1455  ; SDIO_CmdInitStructure
0000ba  210d              MOVS     r1,#0xd               ;1455
0000bc  e9cb1a01          STRD     r1,r10,[r11,#4]       ;1455
0000c0  2100              MOVS     r1,#0                 ;1457
0000c2  f8cb100c          STR      r1,[r11,#0xc]         ;1458  ; SDIO_CmdInitStructure
0000c6  f44f6180          MOV      r1,#0x400             ;1458
0000ca  4658              MOV      r0,r11                ;1459
0000cc  f8cb1010          STR      r1,[r11,#0x10]        ;1459  ; SDIO_CmdInitStructure
0000d0  f7fffffe          BL       SDIO_SendCommand
0000d4  200d              MOVS     r0,#0xd               ;1461
0000d6  f7fffffe          BL       CmdResp1Error
0000da  282a              CMP      r0,#0x2a              ;1463
0000dc  d1b9              BNE      |L26.82|
0000de  2e01              CMP      r6,#1                 ;1468
0000e0  d967              BLS      |L26.434|
0000e2  fb06f805          MUL      r8,r6,r5              ;1471
0000e6  f1b87f00          CMP      r8,#0x2000000         ;1471
0000ea  d301              BCC      |L26.240|
                  |L26.236|
0000ec  2026              MOVS     r0,#0x26              ;1473
                  |L26.238|
0000ee  e7b0              B        |L26.82|
                  |L26.240|
0000f0  4d86              LDR      r5,|L26.780|
0000f2  6868              LDR      r0,[r5,#4]            ;1477  ; CardType
0000f4  b118              CBZ      r0,|L26.254|
0000f6  2801              CMP      r0,#1                 ;1477
0000f8  d001              BEQ      |L26.254|
0000fa  2802              CMP      r0,#2                 ;1477
0000fc  d129              BNE      |L26.338|
                  |L26.254|
0000fe  68a8              LDR      r0,[r5,#8]            ;1480  ; RCA
000100  0401              LSLS     r1,r0,#16             ;1480
000102  f8cb1000          STR      r1,[r11,#0]           ;1481  ; SDIO_CmdInitStructure
000106  2137              MOVS     r1,#0x37              ;1481
000108  e9cb1a01          STRD     r1,r10,[r11,#4]       ;1481
00010c  2100              MOVS     r1,#0                 ;1483
00010e  f8cb100c          STR      r1,[r11,#0xc]         ;1484  ; SDIO_CmdInitStructure
000112  4880              LDR      r0,|L26.788|
000114  f44f6180          MOV      r1,#0x400             ;1484
000118  3814              SUBS     r0,r0,#0x14           ;1485
00011a  f8cb1010          STR      r1,[r11,#0x10]        ;1485  ; SDIO_CmdInitStructure
00011e  f7fffffe          BL       SDIO_SendCommand
000122  2037              MOVS     r0,#0x37              ;1488
000124  f7fffffe          BL       CmdResp1Error
000128  282a              CMP      r0,#0x2a              ;1490
00012a  d192              BNE      |L26.82|
00012c  2117              MOVS     r1,#0x17              ;1496
00012e  e9cb6100          STRD     r6,r1,[r11,#0]        ;1496
000132  2100              MOVS     r1,#0                 ;1498
000134  e9cba102          STRD     r10,r1,[r11,#8]       ;1498
000138  4876              LDR      r0,|L26.788|
00013a  f44f6180          MOV      r1,#0x400             ;1499
00013e  3814              SUBS     r0,r0,#0x14           ;1500
000140  f8cb1010          STR      r1,[r11,#0x10]        ;1500  ; SDIO_CmdInitStructure
000144  f7fffffe          BL       SDIO_SendCommand
000148  2017              MOVS     r0,#0x17              ;1502
00014a  f7fffffe          BL       CmdResp1Error
00014e  282a              CMP      r0,#0x2a              ;1504
000150  d1cd              BNE      |L26.238|
                  |L26.338|
000152  2119              MOVS     r1,#0x19              ;1512
000154  e9cb9100          STRD     r9,r1,[r11,#0]        ;1512
000158  2140              MOVS     r1,#0x40              ;1513
00015a  f04f0a00          MOV      r10,#0                ;1514
00015e  e9cb1a02          STRD     r1,r10,[r11,#8]       ;1514
000162  486c              LDR      r0,|L26.788|
000164  0109              LSLS     r1,r1,#4              ;1515
000166  3814              SUBS     r0,r0,#0x14           ;1516
000168  f8cb1010          STR      r1,[r11,#0x10]        ;1516  ; SDIO_CmdInitStructure
00016c  f7fffffe          BL       SDIO_SendCommand
000170  2019              MOVS     r0,#0x19              ;1518
000172  f7fffffe          BL       CmdResp1Error
000176  282a              CMP      r0,#0x2a              ;1520
000178  d1b9              BNE      |L26.238|
00017a  2201              MOVS     r2,#1                 ;1526
00017c  622c              STR      r4,[r5,#0x20]         ;1529  ; SrcBuffer
00017e  4865              LDR      r0,|L26.788|
000180  e9c58204          STRD     r8,r2,[r5,#0x10]      ;1529
000184  4962              LDR      r1,|L26.784|
000186  e9c01800          STRD     r1,r8,[r0,#0]         ;1529
00018a  9901              LDR      r1,[sp,#4]            ;1531
00018c  46a9              MOV      r9,r5                 ;1525
00018e  0109              LSLS     r1,r1,#4              ;1531
000190  6081              STR      r1,[r0,#8]            ;1532  ; SDIO_DataInitStructure
000192  f8c0a00c          STR      r10,[r0,#0xc]         ;1532  ; SDIO_DataInitStructure
000196  e9c0a204          STRD     r10,r2,[r0,#0x10]     ;1532
00019a  4651              MOV      r1,r10                ;1532
00019c  f7fffffe          BL       SDIO_DataConfig
0001a0  68e9              LDR      r1,[r5,#0xc]          ;1537  ; DeviceMode
0001a2  f240301a          MOV      r0,#0x31a             ;1539
0001a6  2902              CMP      r1,#2                 ;1537
0001a8  d02a              BEQ      |L26.512|
0001aa  464d              MOV      r5,r9                 ;1612
0001ac  2901              CMP      r1,#1                 ;1612
0001ae  d074              BEQ      |L26.666|
0001b0  b3a9              CBZ      r1,|L26.542|
                  |L26.434|
0001b2  e09a              B        |L26.746|
                  |L26.436|
0001b4  f44f4080          MOV      r0,#0x4000            ;1541
0001b8  f7fffffe          BL       SDIO_GetFlagStatus
0001bc  b308              CBZ      r0,|L26.514|
0001be  f8d90010          LDR      r0,[r9,#0x10]         ;1543  ; TotalNumberOfBytes
0001c2  1bc0              SUBS     r0,r0,r7              ;1543
0001c4  2820              CMP      r0,#0x20              ;1543
0001c6  d30b              BCC      |L26.480|
0001c8  f05f0500          MOVS.W   r5,#0                 ;1545
                  |L26.460|
0001cc  f8540025          LDR      r0,[r4,r5,LSL #2]     ;1547
0001d0  f7fffffe          BL       SDIO_WriteData
0001d4  1c6d              ADDS     r5,r5,#1              ;1545
0001d6  2d08              CMP      r5,#8                 ;1545
0001d8  d3f8              BCC      |L26.460|
0001da  3420              ADDS     r4,r4,#0x20           ;1549
0001dc  3720              ADDS     r7,r7,#0x20           ;1550
0001de  e010              B        |L26.514|
                  |L26.480|
0001e0  0781              LSLS     r1,r0,#30             ;1554
0001e2  ea4f0690          LSR      r6,r0,#2              ;1555
0001e6  d000              BEQ      |L26.490|
0001e8  1c76              ADDS     r6,r6,#1              ;1555
                  |L26.490|
0001ea  2500              MOVS     r5,#0                 ;1557
0001ec  e005              B        |L26.506|
                  |L26.494|
0001ee  6820              LDR      r0,[r4,#0]            ;1559
0001f0  f7fffffe          BL       SDIO_WriteData
0001f4  1c6d              ADDS     r5,r5,#1              ;1557
0001f6  1d24              ADDS     r4,r4,#4              ;1557
0001f8  1d3f              ADDS     r7,r7,#4              ;1557
                  |L26.506|
0001fa  42b5              CMP      r5,r6                 ;1557
0001fc  d201              BCS      |L26.514|
0001fe  e7f6              B        |L26.494|
                  |L26.512|
000200  4680              MOV      r8,r0                 ;1539
                  |L26.514|
000202  4845              LDR      r0,|L26.792|
000204  6b40              LDR      r0,[r0,#0x34]         ;1539
000206  ea100f08          TST      r0,r8                 ;1539
00020a  d0d3              BEQ      |L26.436|
00020c  2008              MOVS     r0,#8                 ;1565
00020e  f7fffffe          BL       SDIO_GetFlagStatus
000212  b128              CBZ      r0,|L26.544|
000214  2008              MOVS     r0,#8                 ;1567
000216  f7fffffe          BL       SDIO_ClearFlag
00021a  2004              MOVS     r0,#4                 ;1568
                  |L26.540|
00021c  e719              B        |L26.82|
                  |L26.542|
00021e  e04b              B        |L26.696|
                  |L26.544|
000220  2002              MOVS     r0,#2                 ;1571
000222  f7fffffe          BL       SDIO_GetFlagStatus
000226  b120              CBZ      r0,|L26.562|
000228  2002              MOVS     r0,#2                 ;1573
00022a  f7fffffe          BL       SDIO_ClearFlag
00022e  2002              MOVS     r0,#2                 ;1574
000230  e70f              B        |L26.82|
                  |L26.562|
000232  2010              MOVS     r0,#0x10              ;1577
000234  f7fffffe          BL       SDIO_GetFlagStatus
000238  b120              CBZ      r0,|L26.580|
00023a  2010              MOVS     r0,#0x10              ;1579
00023c  f7fffffe          BL       SDIO_ClearFlag
000240  2005              MOVS     r0,#5                 ;1580
000242  e706              B        |L26.82|
                  |L26.580|
000244  f44f7400          MOV      r4,#0x200             ;1583
000248  4620              MOV      r0,r4                 ;1583
00024a  f7fffffe          BL       SDIO_GetFlagStatus
00024e  b120              CBZ      r0,|L26.602|
000250  4620              MOV      r0,r4                 ;1585
000252  f7fffffe          BL       SDIO_ClearFlag
000256  2007              MOVS     r0,#7                 ;1586
000258  e6fb              B        |L26.82|
                  |L26.602|
00025a  f44f7080          MOV      r0,#0x100             ;1590
00025e  f7fffffe          BL       SDIO_GetFlagStatus
000262  b3f0              CBZ      r0,|L26.738|
000264  f8d90004          LDR      r0,[r9,#4]            ;1592  ; CardType
000268  b118              CBZ      r0,|L26.626|
00026a  2801              CMP      r0,#1                 ;1592
00026c  d001              BEQ      |L26.626|
00026e  2802              CMP      r0,#2                 ;1592
000270  d13b              BNE      |L26.746|
                  |L26.626|
000272  220c              MOVS     r2,#0xc               ;1596
000274  e9cba200          STRD     r10,r2,[r11,#0]       ;1596
000278  2240              MOVS     r2,#0x40              ;1597
00027a  e9cb2a02          STRD     r2,r10,[r11,#8]       ;1597
00027e  4825              LDR      r0,|L26.788|
000280  0111              LSLS     r1,r2,#4              ;1599
000282  3814              SUBS     r0,r0,#0x14           ;1600
000284  f8cb1010          STR      r1,[r11,#0x10]        ;1600  ; SDIO_CmdInitStructure
000288  f7fffffe          BL       SDIO_SendCommand
00028c  200c              MOVS     r0,#0xc               ;1603
00028e  f7fffffe          BL       CmdResp1Error
000292  282a              CMP      r0,#0x2a              ;1605
000294  d1c2              BNE      |L26.540|
000296  e028              B        |L26.746|
000298  e7ff              B        |L26.666|
                  |L26.666|
00029a  2101              MOVS     r1,#1                 ;1614
00029c  f244301a          MOV      r0,#0x431a            ;1614
0002a0  f7fffffe          BL       SDIO_ITConfig
                  |L26.676|
0002a4  69a8              LDR      r0,[r5,#0x18]         ;1615  ; TransferEnd
0002a6  b910              CBNZ     r0,|L26.686|
0002a8  7828              LDRB     r0,[r5,#0]            ;1615  ; TransferError
0002aa  282a              CMP      r0,#0x2a              ;1615
0002ac  d0fa              BEQ      |L26.676|
                  |L26.686|
0002ae  7828              LDRB     r0,[r5,#0]            ;1617  ; TransferError
0002b0  282a              CMP      r0,#0x2a              ;1617
0002b2  d01a              BEQ      |L26.746|
0002b4  7828              LDRB     r0,[r5,#0]            ;1633  ; TransferError
0002b6  e6cc              B        |L26.82|
                  |L26.696|
0002b8  2101              MOVS     r1,#1                 ;1624
0002ba  f7fffffe          BL       SDIO_ITConfig
0002be  2001              MOVS     r0,#1                 ;1625
0002c0  f7fffffe          BL       SDIO_DMACmd
0002c4  4641              MOV      r1,r8                 ;1625
0002c6  4620              MOV      r0,r4                 ;1626
0002c8  f7fffffe          BL       DMA_TxConfiguration
0002cc  4c13              LDR      r4,|L26.796|
                  |L26.718|
0002ce  4620              MOV      r0,r4                 ;1627
0002d0  f7fffffe          BL       DMA_GetFlagStatus
0002d4  2800              CMP      r0,#0                 ;1627
0002d6  d0fa              BEQ      |L26.718|
                  |L26.728|
0002d8  69a8              LDR      r0,[r5,#0x18]         ;1629  ; TransferEnd
0002da  2800              CMP      r0,#0                 ;1629
0002dc  d1e7              BNE      |L26.686|
0002de  7828              LDRB     r0,[r5,#0]            ;1629  ; TransferError
0002e0  e000              B        |L26.740|
                  |L26.738|
0002e2  e002              B        |L26.746|
                  |L26.740|
0002e4  282a              CMP      r0,#0x2a              ;1629
0002e6  d0f7              BEQ      |L26.728|
0002e8  e7e1              B        |L26.686|
                  |L26.746|
0002ea  f24050ff          MOV      r0,#0x5ff             ;1638
0002ee  f7fffffe          BL       SDIO_ClearFlag
                  |L26.754|
0002f2  4668              MOV      r0,sp                 ;1645
0002f4  f7fffffe          BL       IsCardProgramming
0002f8  282a              CMP      r0,#0x2a              ;1643
0002fa  d18f              BNE      |L26.540|
0002fc  f89d1000          LDRB     r1,[sp,#0]            ;1643
000300  2907              CMP      r1,#7                 ;1643
000302  d0f6              BEQ      |L26.754|
000304  2906              CMP      r1,#6                 ;1643
000306  d0f4              BEQ      |L26.754|
000308  e6a3              B        |L26.82|
;;;1650   
                          ENDP

00030a  0000              DCW      0x0000
                  |L26.780|
                          DCD      ||.data||
                  |L26.784|
                          DCD      0x000fffff
                  |L26.788|
                          DCD      ||.bss||+0x4c
                  |L26.792|
                          DCD      0x40018000
                  |L26.796|
                          DCD      0x10002000

                          AREA ||i.convert_from_bytes_to_power_of_two||, CODE, READONLY, ALIGN=1

                  convert_from_bytes_to_power_of_two PROC
;;;2852   *******************************************************************************/
;;;2853   static u8 convert_from_bytes_to_power_of_two(u16 NumberOfBytes)
000000  2100              MOVS     r1,#0
;;;2854   {
;;;2855     u8 count = 0;
;;;2856   
;;;2857     while (NumberOfBytes != 1)
000002  e002              B        |L27.10|
                  |L27.4|
;;;2858     {
;;;2859       NumberOfBytes >>= 1;
000004  0840              LSRS     r0,r0,#1
;;;2860       count++;
000006  1c49              ADDS     r1,r1,#1
000008  b2c9              UXTB     r1,r1
                  |L27.10|
00000a  2801              CMP      r0,#1                 ;2857
00000c  d1fa              BNE      |L27.4|
;;;2861     }
;;;2862     return(count);
00000e  4608              MOV      r0,r1
;;;2863   }
000010  4770              BX       lr
;;;2864   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  CSD_Tab
                          %        16
                  CID_Tab
                          %        16
                  SDIO_InitStructure
                          %        24
                  SDIO_CmdInitStructure
                          %        20
                  SDIO_DataInitStructure
                          %        24

                          AREA ||.data||, DATA, ALIGN=2

                  TransferError
000000  2a000000          DCB      0x2a,0x00,0x00,0x00
                  CardType
                          DCD      0x00000000
                  ||RCA||
                          DCD      0x00000000
                  DeviceMode
                          DCD      0x00000000
                  TotalNumberOfBytes
                          DCD      0x00000000
                  StopCondition
                          DCD      0x00000000
                  TransferEnd
                          DCD      0x00000000
                  NumberOfBytes
                          DCD      0x00000000
                  SrcBuffer
                          DCD      0x00000000
                  DestBuffer
                          DCD      0x00000000
