; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Obj\system_stm32f10x.o --depend=.\Obj\system_stm32f10x.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\FWlib\inc -I.\user -I.\fatfs -I.\fatfs -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\Obj\system_stm32f10x.crf user\system_stm32f10x.c]
                          THUMB

                          AREA ||i.SetSysClockTo72||, CODE, READONLY, ALIGN=2

                  SetSysClockTo72 PROC
;;;676      */
;;;677    static void SetSysClockTo72(void)
000000  4822              LDR      r0,|L1.140|
;;;678    {
;;;679      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2100              MOVS     r1,#0
;;;680      
;;;681      /*!< SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
;;;682      /*!< Enable HSE */    
;;;683      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000004  6802              LDR      r2,[r0,#0]
000006  f4423280          ORR      r2,r2,#0x10000
00000a  6002              STR      r2,[r0,#0]
;;;684     
;;;685      /*!< Wait till HSE is ready and if Time out is reached exit */
;;;686      do
;;;687      {
;;;688        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;689        StartUpCounter++;  
;;;690      } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
00000c  f44f63a0          MOV      r3,#0x500
                  |L1.16|
000010  6802              LDR      r2,[r0,#0]            ;688
000012  1c49              ADDS     r1,r1,#1              ;689
000014  f4123f00          TST      r2,#0x20000           ;688
000018  d101              BNE      |L1.30|
00001a  4299              CMP      r1,r3
00001c  d1f8              BNE      |L1.16|
                  |L1.30|
;;;691    
;;;692      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
00001e  6801              LDR      r1,[r0,#0]
000020  0389              LSLS     r1,r1,#14
000022  d531              BPL      |L1.136|
;;;693      {
;;;694        HSEStatus = (uint32_t)0x01;
;;;695      }
;;;696      else
;;;697      {
;;;698        HSEStatus = (uint32_t)0x00;
;;;699      }  
;;;700    
;;;701      if (HSEStatus == (uint32_t)0x01)
;;;702      {
;;;703        /*!< Enable Prefetch Buffer */
;;;704        FLASH->ACR |= FLASH_ACR_PRFTBE;
000024  491a              LDR      r1,|L1.144|
000026  680a              LDR      r2,[r1,#0]
000028  f0420210          ORR      r2,r2,#0x10
00002c  600a              STR      r2,[r1,#0]
;;;705    
;;;706        /*!< Flash 2 wait state */
;;;707        FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
00002e  680a              LDR      r2,[r1,#0]
000030  f0220203          BIC      r2,r2,#3
000034  600a              STR      r2,[r1,#0]
;;;708        FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
000036  680a              LDR      r2,[r1,#0]
000038  f0420202          ORR      r2,r2,#2
00003c  600a              STR      r2,[r1,#0]
;;;709     
;;;710        /*!< HCLK = SYSCLK */
;;;711        RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
00003e  6841              LDR      r1,[r0,#4]
000040  6041              STR      r1,[r0,#4]
;;;712          
;;;713        /*!< PCLK2 = HCLK */
;;;714        RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
000042  6841              LDR      r1,[r0,#4]
000044  6041              STR      r1,[r0,#4]
;;;715        
;;;716        /*!< PCLK1 = HCLK */
;;;717        RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
000046  6841              LDR      r1,[r0,#4]
000048  f4416180          ORR      r1,r1,#0x400
00004c  6041              STR      r1,[r0,#4]
;;;718        
;;;719        /*!< PLLCLK = 8MHz * 9 = 72 MHz */
;;;720        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
00004e  6841              LDR      r1,[r0,#4]
000050  f421117c          BIC      r1,r1,#0x3f0000
000054  6041              STR      r1,[r0,#4]
;;;721        RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL9);
000056  6841              LDR      r1,[r0,#4]
000058  f44111e8          ORR      r1,r1,#0x1d0000
00005c  6041              STR      r1,[r0,#4]
;;;722    
;;;723        /*!< Enable PLL */
;;;724        RCC->CR |= RCC_CR_PLLON;
00005e  6801              LDR      r1,[r0,#0]
000060  f0417180          ORR      r1,r1,#0x1000000
000064  6001              STR      r1,[r0,#0]
                  |L1.102|
;;;725    
;;;726        /*!< Wait till PLL is ready */
;;;727        while((RCC->CR & RCC_CR_PLLRDY) == 0)
000066  6801              LDR      r1,[r0,#0]
000068  0189              LSLS     r1,r1,#6
00006a  d5fc              BPL      |L1.102|
;;;728        {
;;;729        }
;;;730    
;;;731        /*!< Select PLL as system clock source */
;;;732        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
00006c  6841              LDR      r1,[r0,#4]
00006e  f0210103          BIC      r1,r1,#3
000072  6041              STR      r1,[r0,#4]
;;;733        RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
000074  6841              LDR      r1,[r0,#4]
000076  f0410102          ORR      r1,r1,#2
00007a  6041              STR      r1,[r0,#4]
                  |L1.124|
;;;734    
;;;735        /*!< Wait till PLL is used as system clock source */
;;;736        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
00007c  6841              LDR      r1,[r0,#4]
00007e  f3c10181          UBFX     r1,r1,#2,#2
000082  2902              CMP      r1,#2
000084  d1fa              BNE      |L1.124|
;;;737        {
;;;738        }
;;;739      }
;;;740      else
;;;741      { /*!< If HSE fails to start-up, the application will have wrong clock 
;;;742             configuration. User can add here some code to deal with this error */    
;;;743    
;;;744        /*!< Go to infinite loop */
;;;745        while (1)
;;;746        {
;;;747        }
;;;748      }
;;;749    }
000086  4770              BX       lr
                  |L1.136|
000088  e7fe              B        |L1.136|
;;;750    #endif
                          ENDP

00008a  0000              DCW      0x0000
                  |L1.140|
                          DCD      0x40021000
                  |L1.144|
                          DCD      0x40022000

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;160      */
;;;161    void SystemInit (void)
000000  480c              LDR      r0,|L2.52|
;;;162    {
;;;163      /*!< RCC system reset(for debug purpose) */
;;;164      /*!< Set HSION bit 复位值是83H   内部8M*/			  
;;;165      RCC->CR |= (uint32_t)0x00000001;	  
000002  6801              LDR      r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;166      /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits */
;;;167      RCC->CFGR &= (uint32_t)0xF8FF0000;  
00000a  6841              LDR      r1,[r0,#4]
00000c  4a0a              LDR      r2,|L2.56|
00000e  4011              ANDS     r1,r1,r2
000010  6041              STR      r1,[r0,#4]
;;;168      /*!< Reset HSEON, CSSON and PLLON bits */
;;;169      RCC->CR &= (uint32_t)0xFEF6FFFF;
000012  6801              LDR      r1,[r0,#0]
000014  4a09              LDR      r2,|L2.60|
000016  4011              ANDS     r1,r1,r2
000018  6001              STR      r1,[r0,#0]
;;;170      /*!< Reset HSEBYP bit */
;;;171      RCC->CR &= (uint32_t)0xFFFBFFFF;
00001a  6801              LDR      r1,[r0,#0]
00001c  f4212180          BIC      r1,r1,#0x40000
000020  6001              STR      r1,[r0,#0]
;;;172      /*!< Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
;;;173      RCC->CFGR &= (uint32_t)0xFF80FFFF;
000022  6841              LDR      r1,[r0,#4]
000024  f42101fe          BIC      r1,r1,#0x7f0000
000028  6041              STR      r1,[r0,#4]
;;;174      /*!< Disable all interrupts */
;;;175      RCC->CIR = 0x00000000;
00002a  2100              MOVS     r1,#0
00002c  6081              STR      r1,[r0,#8]
00002e  f7ffbffe          B.W      SetSysClockTo72
;;;176        
;;;177      /*!< Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
;;;178      /*!< Configure the Flash Latency cycles and enable prefetch buffer */
;;;179      SetSysClock();
;;;180    
;;;181    }
;;;182    
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x40021000
                  |L2.56|
                          DCD      0xf8ff0000
                  |L2.60|
                          DCD      0xfef6ffff

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  SystemFrequency
                          DCD      0x044aa200

                          AREA ||area_number.6||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.constdata||
                  SystemFrequency_SysClk
                          DCD      0x044aa200

                          AREA ||area_number.7||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.constdata||
                  SystemFrequency_AHBClk
                          DCD      0x044aa200

                          AREA ||area_number.8||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.constdata||
                  SystemFrequency_APB1Clk
                          DCD      0x02255100

                          AREA ||area_number.9||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.constdata||
                  SystemFrequency_APB2Clk
                          DCD      0x044aa200
