; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_rcc.o --depend=.\obj\stm32f10x_rcc.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\FWlib\inc -I.\user -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\stm32f10x_rcc.crf FWlib\SRC\stm32f10x_rcc.c]
                          THUMB

                          AREA ||i.RCC_ADCCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_ADCCLKConfig PROC
;;;521      */
;;;522    void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
000000  4a03              LDR      r2,|L1.16|
;;;523    {
;;;524      uint32_t tmpreg = 0;
;;;525      /* Check the parameters */
;;;526      assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
;;;527      tmpreg = RCC->CFGR;
000002  6851              LDR      r1,[r2,#4]
;;;528      /* Clear ADCPRE[1:0] bits */
;;;529      tmpreg &= CFGR_ADCPRE_Reset_Mask;
000004  f4214140          BIC      r1,r1,#0xc000
;;;530      /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
;;;531      tmpreg |= RCC_PCLK2;
000008  4301              ORRS     r1,r1,r0
;;;532      /* Store the new value */
;;;533      RCC->CFGR = tmpreg;
00000a  6051              STR      r1,[r2,#4]
;;;534    }
00000c  4770              BX       lr
;;;535    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x40021000

                          AREA ||i.RCC_AHBPeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHBPeriphClockCmd PROC
;;;708      */
;;;709    void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
000000  4a04              LDR      r2,|L2.20|
;;;710    {
;;;711      /* Check the parameters */
;;;712      assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
;;;713      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;714      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;715      {
;;;716        RCC->AHBENR |= RCC_AHBPeriph;
;;;717      }
;;;718      else
;;;719      {
;;;720        RCC->AHBENR &= ~RCC_AHBPeriph;
000004  6951              LDR      r1,[r2,#0x14]
000006  d001              BEQ      |L2.12|
000008  4301              ORRS     r1,r1,r0              ;716
00000a  e000              B        |L2.14|
                  |L2.12|
00000c  4381              BICS     r1,r1,r0
                  |L2.14|
00000e  6151              STR      r1,[r2,#0x14]         ;716
;;;721      }
;;;722    }
000010  4770              BX       lr
;;;723    
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      0x40021000

                          AREA ||i.RCC_APB1PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphClockCmd PROC
;;;769      */
;;;770    void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L3.20|
;;;771    {
;;;772      /* Check the parameters */
;;;773      assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;774      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;775      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;776      {
;;;777        RCC->APB1ENR |= RCC_APB1Periph;
;;;778      }
;;;779      else
;;;780      {
;;;781        RCC->APB1ENR &= ~RCC_APB1Periph;
000004  69d1              LDR      r1,[r2,#0x1c]
000006  d001              BEQ      |L3.12|
000008  4301              ORRS     r1,r1,r0              ;777
00000a  e000              B        |L3.14|
                  |L3.12|
00000c  4381              BICS     r1,r1,r0
                  |L3.14|
00000e  61d1              STR      r1,[r2,#0x1c]         ;777
;;;782      }
;;;783    }
000010  4770              BX       lr
;;;784    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x40021000

                          AREA ||i.RCC_APB1PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphResetCmd PROC
;;;828      */
;;;829    void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L4.20|
;;;830    {
;;;831      /* Check the parameters */
;;;832      assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;833      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;834      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;835      {
;;;836        RCC->APB1RSTR |= RCC_APB1Periph;
;;;837      }
;;;838      else
;;;839      {
;;;840        RCC->APB1RSTR &= ~RCC_APB1Periph;
000004  6911              LDR      r1,[r2,#0x10]
000006  d001              BEQ      |L4.12|
000008  4301              ORRS     r1,r1,r0              ;836
00000a  e000              B        |L4.14|
                  |L4.12|
00000c  4381              BICS     r1,r1,r0
                  |L4.14|
00000e  6111              STR      r1,[r2,#0x10]         ;836
;;;841      }
;;;842    }
000010  4770              BX       lr
;;;843    
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0x40021000

                          AREA ||i.RCC_APB2PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphClockCmd PROC
;;;738      */
;;;739    void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L5.20|
;;;740    {
;;;741      /* Check the parameters */
;;;742      assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;743      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;744      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;745      {
;;;746        RCC->APB2ENR |= RCC_APB2Periph;
;;;747      }
;;;748      else
;;;749      {
;;;750        RCC->APB2ENR &= ~RCC_APB2Periph;
000004  6991              LDR      r1,[r2,#0x18]
000006  d001              BEQ      |L5.12|
000008  4301              ORRS     r1,r1,r0              ;746
00000a  e000              B        |L5.14|
                  |L5.12|
00000c  4381              BICS     r1,r1,r0
                  |L5.14|
00000e  6191              STR      r1,[r2,#0x18]         ;746
;;;751      }
;;;752    }
000010  4770              BX       lr
;;;753    
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0x40021000

                          AREA ||i.RCC_APB2PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphResetCmd PROC
;;;798      */
;;;799    void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L6.20|
;;;800    {
;;;801      /* Check the parameters */
;;;802      assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;803      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;804      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;805      {
;;;806        RCC->APB2RSTR |= RCC_APB2Periph;
;;;807      }
;;;808      else
;;;809      {
;;;810        RCC->APB2RSTR &= ~RCC_APB2Periph;
000004  68d1              LDR      r1,[r2,#0xc]
000006  d001              BEQ      |L6.12|
000008  4301              ORRS     r1,r1,r0              ;806
00000a  e000              B        |L6.14|
                  |L6.12|
00000c  4381              BICS     r1,r1,r0
                  |L6.14|
00000e  60d1              STR      r1,[r2,#0xc]          ;806
;;;811      }
;;;812    }
000010  4770              BX       lr
;;;813    
                          ENDP

000012  0000              DCW      0x0000
                  |L6.20|
                          DCD      0x40021000

                          AREA ||i.RCC_AdjustHSICalibrationValue||, CODE, READONLY, ALIGN=2

                  RCC_AdjustHSICalibrationValue PROC
;;;271      */
;;;272    void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
000000  4903              LDR      r1,|L7.16|
;;;273    {
;;;274      uint32_t tmpreg = 0;
;;;275      /* Check the parameters */
;;;276      assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
;;;277      tmpreg = RCC->CR;
000002  680a              LDR      r2,[r1,#0]
;;;278      /* Clear HSITRIM[4:0] bits */
;;;279      tmpreg &= CR_HSITRIM_Mask;
000004  f02202f8          BIC      r2,r2,#0xf8
;;;280      /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
;;;281      tmpreg |= (uint32_t)HSICalibrationValue << 3;
000008  ea4200c0          ORR      r0,r2,r0,LSL #3
;;;282      /* Store the new value */
;;;283      RCC->CR = tmpreg;
00000c  6008              STR      r0,[r1,#0]
;;;284    }
00000e  4770              BX       lr
;;;285    
                          ENDP

                  |L7.16|
                          DCD      0x40021000

                          AREA ||i.RCC_BackupResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_BackupResetCmd PROC
;;;849      */
;;;850    void RCC_BackupResetCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L8.8|
;;;851    {
;;;852      /* Check the parameters */
;;;853      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;854      *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;855    }
000004  4770              BX       lr
;;;856    
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      0x42420440

                          AREA ||i.RCC_ClearFlag||, CODE, READONLY, ALIGN=2

                  RCC_ClearFlag PROC
;;;948      */
;;;949    void RCC_ClearFlag(void)
000000  4802              LDR      r0,|L9.12|
;;;950    {
;;;951      /* Set RMVF bit to clear the reset flags */
;;;952      RCC->CSR |= CSR_RMVF_Set;
000002  6a41              LDR      r1,[r0,#0x24]
000004  f0417180          ORR      r1,r1,#0x1000000
000008  6241              STR      r1,[r0,#0x24]
;;;953    }
00000a  4770              BX       lr
;;;954    
                          ENDP

                  |L9.12|
                          DCD      0x40021000

                          AREA ||i.RCC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  RCC_ClearITPendingBit PROC
;;;996      */
;;;997    void RCC_ClearITPendingBit(uint8_t RCC_IT)
000000  4901              LDR      r1,|L10.8|
;;;998    {
;;;999      /* Check the parameters */
;;;1000     assert_param(IS_RCC_CLEAR_IT(RCC_IT));
;;;1001     /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
;;;1002        pending bits */
;;;1003     *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
000002  7288              STRB     r0,[r1,#0xa]
;;;1004   }
000004  4770              BX       lr
;;;1005   
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      0x40021000

                          AREA ||i.RCC_ClockSecuritySystemCmd||, CODE, READONLY, ALIGN=2

                  RCC_ClockSecuritySystemCmd PROC
;;;862      */
;;;863    void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L11.8|
;;;864    {
;;;865      /* Check the parameters */
;;;866      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;867      *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
000002  64c8              STR      r0,[r1,#0x4c]
;;;868    }
000004  4770              BX       lr
;;;869    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      0x42420000

                          AREA ||i.RCC_DeInit||, CODE, READONLY, ALIGN=2

                  RCC_DeInit PROC
;;;178      */
;;;179    void RCC_DeInit(void)
000000  480b              LDR      r0,|L12.48|
;;;180    {
;;;181      /* Set HSION bit */
;;;182      RCC->CR |= (uint32_t)0x00000001;
000002  6801              LDR      r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;183      /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits */
;;;184      RCC->CFGR &= (uint32_t)0xF8FF0000;
00000a  6841              LDR      r1,[r0,#4]
00000c  4a09              LDR      r2,|L12.52|
00000e  4011              ANDS     r1,r1,r2
000010  6041              STR      r1,[r0,#4]
;;;185      
;;;186      /* Reset HSEON, CSSON and PLLON bits */
;;;187      RCC->CR &= (uint32_t)0xFEF6FFFF;
000012  6801              LDR      r1,[r0,#0]
000014  4a08              LDR      r2,|L12.56|
000016  4011              ANDS     r1,r1,r2
000018  6001              STR      r1,[r0,#0]
;;;188      /* Reset HSEBYP bit */
;;;189      RCC->CR &= (uint32_t)0xFFFBFFFF;
00001a  6801              LDR      r1,[r0,#0]
00001c  f4212180          BIC      r1,r1,#0x40000
000020  6001              STR      r1,[r0,#0]
;;;190      /* Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
;;;191      RCC->CFGR &= (uint32_t)0xFF80FFFF;
000022  6842              LDR      r2,[r0,#4]
;;;192      /* Disable all interrupts */
;;;193      RCC->CIR = 0x00000000;
000024  2100              MOVS     r1,#0
000026  f42202fe          BIC      r2,r2,#0x7f0000       ;191
00002a  6042              STR      r2,[r0,#4]            ;191
00002c  6081              STR      r1,[r0,#8]
;;;194    }
00002e  4770              BX       lr
;;;195    
                          ENDP

                  |L12.48|
                          DCD      0x40021000
                  |L12.52|
                          DCD      0xf8ff0000
                  |L12.56|
                          DCD      0xfef6ffff

                          AREA ||i.RCC_GetClocksFreq||, CODE, READONLY, ALIGN=2

                  RCC_GetClocksFreq PROC
;;;627      */
;;;628    void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
000000  4a21              LDR      r2,|L13.136|
;;;629    {
000002  b510              PUSH     {r4,lr}
;;;630      uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
;;;631      /* Get SYSCLK source -------------------------------------------------------*/
;;;632      tmp = RCC->CFGR & CFGR_SWS_Mask;
000004  6853              LDR      r3,[r2,#4]
;;;633      switch (tmp)
;;;634      {
;;;635        case 0x00:  /* HSI used as system clock */
;;;636          RCC_Clocks->SYSCLK_Frequency = HSI_Value;
000006  4921              LDR      r1,|L13.140|
000008  f013030c          ANDS     r3,r3,#0xc            ;632
00000c  d003              BEQ      |L13.22|
00000e  2b04              CMP      r3,#4                 ;633
000010  d001              BEQ      |L13.22|
000012  2b08              CMP      r3,#8                 ;633
000014  d026              BEQ      |L13.100|
                  |L13.22|
;;;637          break;
;;;638        case 0x04:  /* HSE used as system clock */
;;;639          RCC_Clocks->SYSCLK_Frequency = HSE_Value;
;;;640          break;
;;;641        case 0x08:  /* PLL used as system clock */
;;;642          /* Get PLL clock source and multiplication factor ----------------------*/
;;;643          pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
;;;644          pllmull = ( pllmull >> 18) + 2;
;;;645          pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
;;;646          if (pllsource == 0x00)
;;;647          {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;648            RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
;;;649          }
;;;650          else
;;;651          {/* HSE selected as PLL clock entry */
;;;652            if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
;;;653            {/* HSE oscillator clock divided by 2 */
;;;654              RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
;;;655            }
;;;656            else
;;;657            {
;;;658              RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
;;;659            }
;;;660          }
;;;661          break;
;;;662        default:
;;;663          RCC_Clocks->SYSCLK_Frequency = HSI_Value;
;;;664          break;
;;;665      }
;;;666      /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
;;;667      /* Get HCLK prescaler */
;;;668      tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
000016  6001              STR      r1,[r0,#0]
000018  6851              LDR      r1,[r2,#4]
;;;669      tmp = tmp >> 4;
;;;670      presc = APBAHBPrescTable[tmp];
00001a  4b1d              LDR      r3,|L13.144|
00001c  f00101f0          AND      r1,r1,#0xf0           ;668
000020  0909              LSRS     r1,r1,#4              ;669
000022  5c5c              LDRB     r4,[r3,r1]
;;;671      /* HCLK clock frequency */
;;;672      RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
000024  6801              LDR      r1,[r0,#0]
000026  40e1              LSRS     r1,r1,r4
;;;673      /* Get PCLK1 prescaler */
;;;674      tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
000028  6041              STR      r1,[r0,#4]
00002a  6854              LDR      r4,[r2,#4]
00002c  f40464e0          AND      r4,r4,#0x700
;;;675      tmp = tmp >> 8;
000030  0a24              LSRS     r4,r4,#8
;;;676      presc = APBAHBPrescTable[tmp];
000032  5d1c              LDRB     r4,[r3,r4]
;;;677      /* PCLK1 clock frequency */
;;;678      RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
000034  fa21f404          LSR      r4,r1,r4
;;;679      /* Get PCLK2 prescaler */
;;;680      tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
000038  6084              STR      r4,[r0,#8]
00003a  6854              LDR      r4,[r2,#4]
00003c  f4045460          AND      r4,r4,#0x3800
;;;681      tmp = tmp >> 11;
000040  ea4f24d4          LSR      r4,r4,#11
;;;682      presc = APBAHBPrescTable[tmp];
000044  5d1b              LDRB     r3,[r3,r4]
;;;683      /* PCLK2 clock frequency */
;;;684      RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
000046  fa21f103          LSR      r1,r1,r3
;;;685      /* Get ADCCLK prescaler */
;;;686      tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
00004a  60c1              STR      r1,[r0,#0xc]
00004c  6852              LDR      r2,[r2,#4]
;;;687      tmp = tmp >> 14;
;;;688      presc = ADCPrescTable[tmp];
00004e  4b10              LDR      r3,|L13.144|
000050  f4024240          AND      r2,r2,#0xc000         ;686
000054  ea4f3292          LSR      r2,r2,#14             ;687
000058  1f1b              SUBS     r3,r3,#4
00005a  5c9a              LDRB     r2,[r3,r2]
;;;689      /* ADCCLK clock frequency */
;;;690      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
00005c  fbb1f1f2          UDIV     r1,r1,r2
000060  6101              STR      r1,[r0,#0x10]
;;;691    }
000062  bd10              POP      {r4,pc}
                  |L13.100|
000064  6851              LDR      r1,[r2,#4]            ;643
000066  2302              MOVS     r3,#2                 ;644
000068  f4011170          AND      r1,r1,#0x3c0000       ;643
00006c  eb034191          ADD      r1,r3,r1,LSR #18      ;644
000070  6853              LDR      r3,[r2,#4]            ;645
000072  f4133f80          TST      r3,#0x10000           ;645
000076  d002              BEQ      |L13.126|
000078  6853              LDR      r3,[r2,#4]            ;652
00007a  039b              LSLS     r3,r3,#14             ;652
00007c  d501              BPL      |L13.130|
                  |L13.126|
00007e  4b05              LDR      r3,|L13.148|
000080  e000              B        |L13.132|
                  |L13.130|
000082  4b02              LDR      r3,|L13.140|
                  |L13.132|
000084  4359              MULS     r1,r3,r1              ;654
000086  e7c6              B        |L13.22|
;;;692    
                          ENDP

                  |L13.136|
                          DCD      0x40021000
                  |L13.140|
                          DCD      0x007a1200
                  |L13.144|
                          DCD      ||.data||+0x4
                  |L13.148|
                          DCD      0x003d0900

                          AREA ||i.RCC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  RCC_GetFlagStatus PROC
;;;905      */
;;;906    FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
000000  4602              MOV      r2,r0
;;;907    {
;;;908      uint32_t tmp = 0;
;;;909      uint32_t statusreg = 0;
;;;910      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;911      /* Check the parameters */
;;;912      assert_param(IS_RCC_FLAG(RCC_FLAG));
;;;913      /* Get the RCC register index */
;;;914      tmp = RCC_FLAG >> 5;
000004  0953              LSRS     r3,r2,#5
;;;915      if (tmp == 1)               /* The flag to check is in CR register */
;;;916      {
;;;917        statusreg = RCC->CR;
000006  4909              LDR      r1,|L14.44|
000008  2b01              CMP      r3,#1                 ;915
00000a  d00b              BEQ      |L14.36|
;;;918      }
;;;919      else if (tmp == 2)          /* The flag to check is in BDCR register */
00000c  2b02              CMP      r3,#2
00000e  d00b              BEQ      |L14.40|
;;;920      {
;;;921        statusreg = RCC->BDCR;
;;;922      }
;;;923      else                       /* The flag to check is in CSR register */
;;;924      {
;;;925        statusreg = RCC->CSR;
000010  f8d11024          LDR.W    r1,[r1,#0x24]
                  |L14.20|
;;;926      }
;;;927      /* Get the flag position */
;;;928      tmp = RCC_FLAG & FLAG_Mask;
000014  f002021f          AND      r2,r2,#0x1f
;;;929      if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
000018  2301              MOVS     r3,#1
00001a  4093              LSLS     r3,r3,r2
00001c  420b              TST      r3,r1
00001e  d000              BEQ      |L14.34|
;;;930      {
;;;931        bitstatus = SET;
000020  2001              MOVS     r0,#1
                  |L14.34|
;;;932      }
;;;933      else
;;;934      {
;;;935        bitstatus = RESET;
;;;936      }
;;;937      /* Return the flag status */
;;;938      return bitstatus;
;;;939    }
000022  4770              BX       lr
                  |L14.36|
000024  6809              LDR      r1,[r1,#0]            ;917
000026  e7f5              B        |L14.20|
                  |L14.40|
000028  6a09              LDR      r1,[r1,#0x20]         ;921
00002a  e7f3              B        |L14.20|
;;;940    
                          ENDP

                  |L14.44|
                          DCD      0x40021000

                          AREA ||i.RCC_GetITStatus||, CODE, READONLY, ALIGN=2

                  RCC_GetITStatus PROC
;;;966      */
;;;967    ITStatus RCC_GetITStatus(uint8_t RCC_IT)
000000  4a03              LDR      r2,|L15.16|
;;;968    {
000002  4601              MOV      r1,r0
;;;969      ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;970      /* Check the parameters */
;;;971      assert_param(IS_RCC_GET_IT(RCC_IT));
;;;972      /* Check the status of the specified RCC interrupt */
;;;973      if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
000006  6892              LDR      r2,[r2,#8]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L15.14|
;;;974      {
;;;975        bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L15.14|
;;;976      }
;;;977      else
;;;978      {
;;;979        bitstatus = RESET;
;;;980      }
;;;981      /* Return the RCC_IT status */
;;;982      return  bitstatus;
;;;983    }
00000e  4770              BX       lr
;;;984    
                          ENDP

                  |L15.16|
                          DCD      0x40021000

                          AREA ||i.RCC_GetSYSCLKSource||, CODE, READONLY, ALIGN=2

                  RCC_GetSYSCLKSource PROC
;;;376      */
;;;377    uint8_t RCC_GetSYSCLKSource(void)
000000  4802              LDR      r0,|L16.12|
;;;378    {
;;;379      return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
000002  6840              LDR      r0,[r0,#4]
000004  f000000c          AND      r0,r0,#0xc
;;;380    }
000008  4770              BX       lr
;;;381    
                          ENDP

00000a  0000              DCW      0x0000
                  |L16.12|
                          DCD      0x40021000

                          AREA ||i.RCC_HCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_HCLKConfig PROC
;;;397      */
;;;398    void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
000000  4a03              LDR      r2,|L17.16|
;;;399    {
;;;400      uint32_t tmpreg = 0;
;;;401      /* Check the parameters */
;;;402      assert_param(IS_RCC_HCLK(RCC_SYSCLK));
;;;403      tmpreg = RCC->CFGR;
000002  6851              LDR      r1,[r2,#4]
;;;404      /* Clear HPRE[3:0] bits */
;;;405      tmpreg &= CFGR_HPRE_Reset_Mask;
000004  f02101f0          BIC      r1,r1,#0xf0
;;;406      /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
;;;407      tmpreg |= RCC_SYSCLK;
000008  4301              ORRS     r1,r1,r0
;;;408      /* Store the new value */
;;;409      RCC->CFGR = tmpreg;
00000a  6051              STR      r1,[r2,#4]
;;;410    }
00000c  4770              BX       lr
;;;411    
                          ENDP

00000e  0000              DCW      0x0000
                  |L17.16|
                          DCD      0x40021000

                          AREA ||i.RCC_HSEConfig||, CODE, READONLY, ALIGN=2

                  RCC_HSEConfig PROC
;;;207      */
;;;208    void RCC_HSEConfig(uint32_t RCC_HSE)
000000  490b              LDR      r1,|L18.48|
;;;209    {
;;;210      /* Check the parameters */
;;;211      assert_param(IS_RCC_HSE(RCC_HSE));
;;;212      /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
;;;213      /* Reset HSEON bit */
;;;214      RCC->CR &= CR_HSEON_Reset;
000002  680a              LDR      r2,[r1,#0]
000004  f4223280          BIC      r2,r2,#0x10000
000008  600a              STR      r2,[r1,#0]
;;;215      /* Reset HSEBYP bit */
;;;216      RCC->CR &= CR_HSEBYP_Reset;
00000a  680a              LDR      r2,[r1,#0]
;;;217      /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
;;;218      switch(RCC_HSE)
00000c  f5b03f80          CMP      r0,#0x10000
000010  f4222280          BIC      r2,r2,#0x40000        ;216
000014  600a              STR      r2,[r1,#0]            ;216
000016  d007              BEQ      |L18.40|
000018  f5b02f80          CMP      r0,#0x40000
00001c  d103              BNE      |L18.38|
;;;219      {
;;;220        case RCC_HSE_ON:
;;;221          /* Set HSEON bit */
;;;222          RCC->CR |= CR_HSEON_Set;
;;;223          break;
;;;224          
;;;225        case RCC_HSE_Bypass:
;;;226          /* Set HSEBYP and HSEON bits */
;;;227          RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
00001e  6808              LDR      r0,[r1,#0]
000020  f44020a0          ORR      r0,r0,#0x50000
                  |L18.36|
000024  6008              STR      r0,[r1,#0]
                  |L18.38|
;;;228          break;
;;;229          
;;;230        default:
;;;231          break;
;;;232      }
;;;233    }
000026  4770              BX       lr
                  |L18.40|
000028  6808              LDR      r0,[r1,#0]            ;222
00002a  f4403080          ORR      r0,r0,#0x10000        ;222
00002e  e7f9              B        |L18.36|
;;;234    
                          ENDP

                  |L18.48|
                          DCD      0x40021000

                          AREA ||i.RCC_HSICmd||, CODE, READONLY, ALIGN=2

                  RCC_HSICmd PROC
;;;293      */
;;;294    void RCC_HSICmd(FunctionalState NewState)
000000  4901              LDR      r1,|L19.8|
;;;295    {
;;;296      /* Check the parameters */
;;;297      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;298      *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;299    }
000004  4770              BX       lr
;;;300    
                          ENDP

000006  0000              DCW      0x0000
                  |L19.8|
                          DCD      0x42420000

                          AREA ||i.RCC_ITConfig||, CODE, READONLY, ALIGN=2

                  RCC_ITConfig PROC
;;;476      */
;;;477    void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
000000  4a04              LDR      r2,|L20.20|
;;;478    {
;;;479      /* Check the parameters */
;;;480      assert_param(IS_RCC_IT(RCC_IT));
;;;481      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;482      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;483      {
;;;484        /* Perform Byte access to RCC_CIR[12:8] bits to enable the selected interrupts */
;;;485        *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
;;;486      }
;;;487      else
;;;488      {
;;;489        /* Perform Byte access to RCC_CIR[12:8] bits to disable the selected interrupts */
;;;490        *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
000004  7a51              LDRB     r1,[r2,#9]
000006  d001              BEQ      |L20.12|
000008  4301              ORRS     r1,r1,r0              ;485
00000a  e000              B        |L20.14|
                  |L20.12|
00000c  4381              BICS     r1,r1,r0
                  |L20.14|
00000e  7251              STRB     r1,[r2,#9]            ;485
;;;491      }
;;;492    }
000010  4770              BX       lr
;;;493    
                          ENDP

000012  0000              DCW      0x0000
                  |L20.20|
                          DCD      0x40021000

                          AREA ||i.RCC_LSEConfig||, CODE, READONLY, ALIGN=2

                  RCC_LSEConfig PROC
;;;545      */
;;;546    void RCC_LSEConfig(uint8_t RCC_LSE)
000000  4906              LDR      r1,|L21.28|
;;;547    {
;;;548      /* Check the parameters */
;;;549      assert_param(IS_RCC_LSE(RCC_LSE));
;;;550      /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
;;;551      /* Reset LSEON bit */
;;;552      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
000002  2200              MOVS     r2,#0
000004  700a              STRB     r2,[r1,#0]
;;;553      /* Reset LSEBYP bit */
;;;554      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
000006  f8012920          STRB     r2,[r1],#-0x20
;;;555      /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
;;;556      switch(RCC_LSE)
00000a  2801              CMP      r0,#1
00000c  d002              BEQ      |L21.20|
00000e  2804              CMP      r0,#4
000010  d102              BNE      |L21.24|
;;;557      {
;;;558        case RCC_LSE_ON:
;;;559          /* Set LSEON bit */
;;;560          *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
;;;561          break;
;;;562          
;;;563        case RCC_LSE_Bypass:
;;;564          /* Set LSEBYP and LSEON bits */
;;;565          *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
000012  2005              MOVS     r0,#5
                  |L21.20|
000014  f8810020          STRB     r0,[r1,#0x20]
                  |L21.24|
;;;566          break;            
;;;567          
;;;568        default:
;;;569          break;      
;;;570      }
;;;571    }
000018  4770              BX       lr
;;;572    
                          ENDP

00001a  0000              DCW      0x0000
                  |L21.28|
                          DCD      0x40021020

                          AREA ||i.RCC_LSICmd||, CODE, READONLY, ALIGN=2

                  RCC_LSICmd PROC
;;;579      */
;;;580    void RCC_LSICmd(FunctionalState NewState)
000000  4901              LDR      r1,|L22.8|
;;;581    {
;;;582      /* Check the parameters */
;;;583      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;584      *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;585    }
000004  4770              BX       lr
;;;586    
                          ENDP

000006  0000              DCW      0x0000
                  |L22.8|
                          DCD      0x42420480

                          AREA ||i.RCC_MCOConfig||, CODE, READONLY, ALIGN=2

                  RCC_MCOConfig PROC
;;;880      */
;;;881    void RCC_MCOConfig(uint8_t RCC_MCO)
000000  4901              LDR      r1,|L23.8|
;;;882    {
;;;883      /* Check the parameters */
;;;884      assert_param(IS_RCC_MCO(RCC_MCO));
;;;885      /* Perform Byte access to MCO[2:0] bits to select the MCO source */
;;;886      *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
000002  71c8              STRB     r0,[r1,#7]
;;;887    }
000004  4770              BX       lr
;;;888    
                          ENDP

000006  0000              DCW      0x0000
                  |L23.8|
                          DCD      0x40021000

                          AREA ||i.RCC_PCLK1Config||, CODE, READONLY, ALIGN=2

                  RCC_PCLK1Config PROC
;;;423      */
;;;424    void RCC_PCLK1Config(uint32_t RCC_HCLK)
000000  4a03              LDR      r2,|L24.16|
;;;425    {
;;;426      uint32_t tmpreg = 0;
;;;427      /* Check the parameters */
;;;428      assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;429      tmpreg = RCC->CFGR;
000002  6851              LDR      r1,[r2,#4]
;;;430      /* Clear PPRE1[2:0] bits */
;;;431      tmpreg &= CFGR_PPRE1_Reset_Mask;
000004  f42161e0          BIC      r1,r1,#0x700
;;;432      /* Set PPRE1[2:0] bits according to RCC_HCLK value */
;;;433      tmpreg |= RCC_HCLK;
000008  4301              ORRS     r1,r1,r0
;;;434      /* Store the new value */
;;;435      RCC->CFGR = tmpreg;
00000a  6051              STR      r1,[r2,#4]
;;;436    }
00000c  4770              BX       lr
;;;437    
                          ENDP

00000e  0000              DCW      0x0000
                  |L24.16|
                          DCD      0x40021000

                          AREA ||i.RCC_PCLK2Config||, CODE, READONLY, ALIGN=2

                  RCC_PCLK2Config PROC
;;;449      */
;;;450    void RCC_PCLK2Config(uint32_t RCC_HCLK)
000000  4903              LDR      r1,|L25.16|
;;;451    {
;;;452      uint32_t tmpreg = 0;
;;;453      /* Check the parameters */
;;;454      assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;455      tmpreg = RCC->CFGR;
000002  684a              LDR      r2,[r1,#4]
;;;456      /* Clear PPRE2[2:0] bits */
;;;457      tmpreg &= CFGR_PPRE2_Reset_Mask;
000004  f4225260          BIC      r2,r2,#0x3800
;;;458      /* Set PPRE2[2:0] bits according to RCC_HCLK value */
;;;459      tmpreg |= RCC_HCLK << 3;
000008  ea4200c0          ORR      r0,r2,r0,LSL #3
;;;460      /* Store the new value */
;;;461      RCC->CFGR = tmpreg;
00000c  6048              STR      r0,[r1,#4]
;;;462    }
00000e  4770              BX       lr
;;;463    
                          ENDP

                  |L25.16|
                          DCD      0x40021000

                          AREA ||i.RCC_PLLCmd||, CODE, READONLY, ALIGN=2

                  RCC_PLLCmd PROC
;;;337      */
;;;338    void RCC_PLLCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L26.8|
;;;339    {
;;;340      /* Check the parameters */
;;;341      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;342      *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
000002  6608              STR      r0,[r1,#0x60]
;;;343    }
000004  4770              BX       lr
;;;344    
                          ENDP

000006  0000              DCW      0x0000
                  |L26.8|
                          DCD      0x42420000

                          AREA ||i.RCC_PLLConfig||, CODE, READONLY, ALIGN=2

                  RCC_PLLConfig PROC
;;;315      */
;;;316    void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
000000  4a03              LDR      r2,|L27.16|
;;;317    {
;;;318      uint32_t tmpreg = 0;
;;;319      /* Check the parameters */
;;;320      assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
;;;321      assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
;;;322      tmpreg = RCC->CFGR;
000002  6853              LDR      r3,[r2,#4]
;;;323      /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
;;;324      tmpreg &= CFGR_PLL_Mask;
;;;325      /* Set the PLL configuration bits */
;;;326      tmpreg |= RCC_PLLSource | RCC_PLLMul;
000004  4308              ORRS     r0,r0,r1
000006  f423137c          BIC      r3,r3,#0x3f0000       ;324
00000a  4318              ORRS     r0,r0,r3
;;;327      /* Store the new value */
;;;328      RCC->CFGR = tmpreg;
00000c  6050              STR      r0,[r2,#4]
;;;329    }
00000e  4770              BX       lr
;;;330    
                          ENDP

                  |L27.16|
                          DCD      0x40021000

                          AREA ||i.RCC_RTCCLKCmd||, CODE, READONLY, ALIGN=2

                  RCC_RTCCLKCmd PROC
;;;614      */
;;;615    void RCC_RTCCLKCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L28.8|
;;;616    {
;;;617      /* Check the parameters */
;;;618      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;619      *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;620    }
000004  4770              BX       lr
;;;621    
                          ENDP

000006  0000              DCW      0x0000
                  |L28.8|
                          DCD      0x4242043c

                          AREA ||i.RCC_RTCCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_RTCCLKConfig PROC
;;;598      */
;;;599    void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
000000  4902              LDR      r1,|L29.12|
;;;600    {
;;;601      /* Check the parameters */
;;;602      assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
;;;603      /* Select the RTC clock source */
;;;604      RCC->BDCR |= RCC_RTCCLKSource;
000002  6a0a              LDR      r2,[r1,#0x20]
000004  4302              ORRS     r2,r2,r0
000006  620a              STR      r2,[r1,#0x20]
;;;605    }
000008  4770              BX       lr
;;;606    
                          ENDP

00000a  0000              DCW      0x0000
                  |L29.12|
                          DCD      0x40021000

                          AREA ||i.RCC_SYSCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_SYSCLKConfig PROC
;;;353      */
;;;354    void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
000000  4a03              LDR      r2,|L30.16|
;;;355    {
;;;356      uint32_t tmpreg = 0;
;;;357      /* Check the parameters */
;;;358      assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
;;;359      tmpreg = RCC->CFGR;
000002  6851              LDR      r1,[r2,#4]
;;;360      /* Clear SW[1:0] bits */
;;;361      tmpreg &= CFGR_SW_Mask;
000004  f0210103          BIC      r1,r1,#3
;;;362      /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
;;;363      tmpreg |= RCC_SYSCLKSource;
000008  4301              ORRS     r1,r1,r0
;;;364      /* Store the new value */
;;;365      RCC->CFGR = tmpreg;
00000a  6051              STR      r1,[r2,#4]
;;;366    }
00000c  4770              BX       lr
;;;367    
                          ENDP

00000e  0000              DCW      0x0000
                  |L30.16|
                          DCD      0x40021000

                          AREA ||i.RCC_USBCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_USBCLKConfig PROC
;;;503      */
;;;504    void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
000000  4901              LDR      r1,|L31.8|
;;;505    {
;;;506      /* Check the parameters */
;;;507      assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));
;;;508      *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
000002  6008              STR      r0,[r1,#0]
;;;509    }
000004  4770              BX       lr
;;;510    
                          ENDP

000006  0000              DCW      0x0000
                  |L31.8|
                          DCD      0x424200d8

                          AREA ||i.RCC_WaitForHSEStartUp||, CODE, READONLY, ALIGN=1

                  RCC_WaitForHSEStartUp PROC
;;;241      */
;;;242    ErrorStatus RCC_WaitForHSEStartUp(void)
000000  b530              PUSH     {r4,r5,lr}
;;;243    {
;;;244      __IO uint32_t StartUpCounter = 0;
000002  2400              MOVS     r4,#0
;;;245      ErrorStatus status = ERROR;
;;;246      FlagStatus HSEStatus = RESET;
;;;247      
;;;248      /* Wait till HSE is ready and if Time out is reached exit */
;;;249      do
;;;250      {
;;;251        HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
;;;252        StartUpCounter++;  
;;;253      } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
000004  f44f65a0          MOV      r5,#0x500
                  |L32.8|
000008  2031              MOVS     r0,#0x31              ;251
00000a  f7fffffe          BL       RCC_GetFlagStatus
00000e  1c64              ADDS     r4,r4,#1              ;252
000010  b908              CBNZ     r0,|L32.22|
000012  42ac              CMP      r4,r5
000014  d1f8              BNE      |L32.8|
                  |L32.22|
;;;254      if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
000016  2031              MOVS     r0,#0x31
000018  f7fffffe          BL       RCC_GetFlagStatus
00001c  2800              CMP      r0,#0
00001e  d000              BEQ      |L32.34|
;;;255      {
;;;256        status = SUCCESS;
000020  2001              MOVS     r0,#1
                  |L32.34|
;;;257      }
;;;258      else
;;;259      {
;;;260        status = ERROR;
;;;261      }  
;;;262      return (status);
;;;263    }
000022  bd30              POP      {r4,r5,pc}
;;;264    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=0

                  ADCPrescTable
000000  02040608          DCB      0x02,0x04,0x06,0x08
                  APBAHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  01020304          DCB      0x01,0x02,0x03,0x04
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09
