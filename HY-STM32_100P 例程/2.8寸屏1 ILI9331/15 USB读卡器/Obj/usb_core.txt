; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Obj\usb_core.o --depend=.\Obj\usb_core.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\usb_library\inc -I..\USB_test -I.\FWlib\inc -I.\user -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Obj\usb_core.crf usb_library\src\usb_core.c]
                          THUMB

                          AREA ||i.DataStageIn||, CODE, READONLY, ALIGN=2

                  DataStageIn PROC
;;;486    *******************************************************************************/
;;;487    void DataStageIn(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;488    {
;;;489      ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
000004  f8df9074          LDR      r9,|L1.124|
;;;490      u32 save_wLength = pEPinfo->Usb_wLength;
;;;491      u32 ControlState = pInformation->ControlState;
;;;492    
;;;493      u8 *DataBuffer;
;;;494      u32 Length;
;;;495    
;;;496      if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
;;;497      {
;;;498        /* no more data to send so STALL the TX Status*/
;;;499        ControlState = WAIT_STATUS_OUT;
;;;500        vSetEPTxStatus(EP_TX_STALL);
000008  f8df8074          LDR      r8,|L1.128|
00000c  f8d91000          LDR      r1,[r9,#0]            ;489  ; pInformation
000010  f1010410          ADD      r4,r1,#0x10           ;489
000014  8a08              LDRH     r0,[r1,#0x10]         ;490
000016  7a09              LDRB     r1,[r1,#8]            ;491
000018  b908              CBNZ     r0,|L1.30|
00001a  2904              CMP      r1,#4                 ;496
00001c  d029              BEQ      |L1.114|
                  |L1.30|
;;;501        goto Expect_Status_Out;
;;;502      }
;;;503    
;;;504      Length = pEPinfo->PacketSize;
00001e  88a5              LDRH     r5,[r4,#4]
;;;505      ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
000020  2604              MOVS     r6,#4
000022  42a8              CMP      r0,r5
000024  d900              BLS      |L1.40|
000026  2602              MOVS     r6,#2
                  |L1.40|
;;;506    
;;;507      if (Length > save_wLength)
000028  4285              CMP      r5,r0
00002a  d900              BLS      |L1.46|
;;;508      {
;;;509        Length = save_wLength;
00002c  4605              MOV      r5,r0
                  |L1.46|
;;;510      }
;;;511    
;;;512      DataBuffer = (*pEPinfo->CopyData)(Length);
00002e  b2a8              UXTH     r0,r5
000030  68a1              LDR      r1,[r4,#8]
000032  4607              MOV      r7,r0
000034  4788              BLX      r1
000036  4682              MOV      r10,r0
;;;513    
;;;514      UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
000038  2000              MOVS     r0,#0
00003a  f7fffffe          BL       GetEPTxAddr
00003e  4601              MOV      r1,r0
000040  463a              MOV      r2,r7
000042  4650              MOV      r0,r10
000044  f7fffffe          BL       UserToPMABufferCopy
000048  4639              MOV      r1,r7
;;;515    
;;;516      SetEPTxCount(ENDP0, Length);
00004a  2000              MOVS     r0,#0
00004c  f7fffffe          BL       SetEPTxCount
;;;517    
;;;518      pEPinfo->Usb_wLength -= Length;
000050  8820              LDRH     r0,[r4,#0]
;;;519      pEPinfo->Usb_wOffset += Length;
;;;520      vSetEPTxStatus(EP_TX_VALID);
000052  2130              MOVS     r1,#0x30
000054  1b40              SUBS     r0,r0,r5              ;518
000056  8020              STRH     r0,[r4,#0]            ;518
000058  8860              LDRH     r0,[r4,#2]            ;519
00005a  4428              ADD      r0,r0,r5              ;519
00005c  8060              STRH     r0,[r4,#2]            ;519
00005e  f8a81000          STRH     r1,[r8,#0]
;;;521    
;;;522      USB_StatusOut();/* Expect the host to abort the data IN stage */
000062  0208              LSLS     r0,r1,#8
000064  4907              LDR      r1,|L1.132|
000066  8008              STRH     r0,[r1,#0]
                  |L1.104|
;;;523    
;;;524    Expect_Status_Out:
;;;525      pInformation->ControlState = ControlState;
000068  f8d90000          LDR      r0,[r9,#0]  ; pInformation
00006c  7206              STRB     r6,[r0,#8]
;;;526    }
00006e  e8bd87f0          POP      {r4-r10,pc}
                  |L1.114|
000072  2607              MOVS     r6,#7                 ;499
000074  2110              MOVS     r1,#0x10              ;500
000076  f8a81000          STRH     r1,[r8,#0]            ;500
00007a  e7f5              B        |L1.104|
;;;527    
                          ENDP

                  |L1.124|
                          DCD      pInformation
                  |L1.128|
                          DCD      SaveTState
                  |L1.132|
                          DCD      SaveRState

                          AREA ||i.DataStageOut||, CODE, READONLY, ALIGN=2

                  DataStageOut PROC
;;;429    *******************************************************************************/
;;;430    void DataStageOut(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;431    {
;;;432      ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
000004  4e23              LDR      r6,|L2.148|
;;;433      u32 save_rLength;
;;;434    
;;;435      save_rLength = pEPinfo->Usb_rLength;
;;;436    
;;;437      if (pEPinfo->CopyData && save_rLength)
;;;438      {
;;;439        u8 *Buffer;
;;;440        u32 Length;
;;;441    
;;;442        Length = pEPinfo->PacketSize;
;;;443        if (Length > save_rLength)
;;;444        {
;;;445          Length = save_rLength;
;;;446        }
;;;447    
;;;448        Buffer = (*pEPinfo->CopyData)(Length);
;;;449        pEPinfo->Usb_rLength -= Length;
;;;450        pEPinfo->Usb_rOffset += Length;
;;;451    
;;;452        PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
;;;453      }
;;;454    
;;;455      if (pEPinfo->Usb_rLength != 0)
;;;456      {
;;;457        vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
;;;458        SetEPTxCount(ENDP0, 0);
;;;459        vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
000006  f8df9090          LDR      r9,|L2.152|
00000a  f04f0830          MOV      r8,#0x30
00000e  6834              LDR      r4,[r6,#0]            ;435  ; pInformation
000010  f8340f10          LDRH     r0,[r4,#0x10]!        ;435
000014  68a1              LDR      r1,[r4,#8]            ;437
000016  b1b1              CBZ      r1,|L2.70|
000018  b308              CBZ      r0,|L2.94|
00001a  88a5              LDRH     r5,[r4,#4]            ;442
00001c  4285              CMP      r5,r0                 ;443
00001e  d900              BLS      |L2.34|
000020  4605              MOV      r5,r0                 ;445
                  |L2.34|
000022  b2a8              UXTH     r0,r5                 ;448
000024  4607              MOV      r7,r0                 ;448
000026  4788              BLX      r1                    ;448
000028  4682              MOV      r10,r0                ;448
00002a  8820              LDRH     r0,[r4,#0]            ;449
00002c  1b40              SUBS     r0,r0,r5              ;449
00002e  8020              STRH     r0,[r4,#0]            ;449
000030  8860              LDRH     r0,[r4,#2]            ;450
000032  4428              ADD      r0,r0,r5              ;450
000034  8060              STRH     r0,[r4,#2]            ;450
000036  2000              MOVS     r0,#0                 ;452
000038  f7fffffe          BL       GetEPRxAddr
00003c  4601              MOV      r1,r0                 ;452
00003e  463a              MOV      r2,r7                 ;452
000040  4650              MOV      r0,r10                ;452
000042  f7fffffe          BL       PMAToUserBufferCopy
                  |L2.70|
000046  8820              LDRH     r0,[r4,#0]            ;455
000048  b148              CBZ      r0,|L2.94|
00004a  4914              LDR      r1,|L2.156|
00004c  f44f5040          MOV      r0,#0x3000            ;457
000050  8008              STRH     r0,[r1,#0]            ;457
000052  2100              MOVS     r1,#0                 ;458
000054  4608              MOV      r0,r1                 ;458
000056  f7fffffe          BL       SetEPTxCount
00005a  f8a98000          STRH     r8,[r9,#0]
                  |L2.94|
;;;460      }
;;;461      /* Set the next State*/
;;;462      if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
00005e  8820              LDRH     r0,[r4,#0]
000060  88a1              LDRH     r1,[r4,#4]
000062  4288              CMP      r0,r1
000064  d301              BCC      |L2.106|
;;;463      {
;;;464        pInformation->ControlState = OUT_DATA;
000066  2003              MOVS     r0,#3
000068  e001              B        |L2.110|
                  |L2.106|
;;;465      }
;;;466      else
;;;467      {
;;;468        if (pEPinfo->Usb_rLength > 0)
00006a  b120              CBZ      r0,|L2.118|
;;;469        {
;;;470          pInformation->ControlState = LAST_OUT_DATA;
00006c  2005              MOVS     r0,#5
                  |L2.110|
00006e  6831              LDR      r1,[r6,#0]            ;464  ; pInformation
000070  7208              STRB     r0,[r1,#8]            ;464
                  |L2.114|
;;;471        }
;;;472        else if (pEPinfo->Usb_rLength == 0)
;;;473        {
;;;474          pInformation->ControlState = WAIT_STATUS_IN;
;;;475          USB_StatusIn();
;;;476        }
;;;477      }
;;;478    }
000072  e8bd87f0          POP      {r4-r10,pc}
                  |L2.118|
000076  6832              LDR      r2,[r6,#0]            ;474  ; pInformation
000078  4b09              LDR      r3,|L2.160|
00007a  2106              MOVS     r1,#6                 ;474
00007c  7211              STRB     r1,[r2,#8]            ;474
00007e  681a              LDR      r2,[r3,#0]            ;475
000080  2000              MOVS     r0,#0                 ;475
000082  4908              LDR      r1,|L2.164|
000084  ea4f4202          LSL      r2,r2,#16             ;475
000088  eb0131d2          ADD      r1,r1,r2,LSR #15      ;475
00008c  6048              STR      r0,[r1,#4]            ;475
00008e  f8a98000          STRH     r8,[r9,#0]            ;475
000092  e7ee              B        |L2.114|
;;;479    
                          ENDP

                  |L2.148|
                          DCD      pInformation
                  |L2.152|
                          DCD      SaveTState
                  |L2.156|
                          DCD      SaveRState
                  |L2.160|
                          DCD      0x40005c50
                  |L2.164|
                          DCD      0x40006000

                          AREA ||i.Data_Setup0||, CODE, READONLY, ALIGN=2

                  Data_Setup0 PROC
;;;658    *******************************************************************************/
;;;659    void Data_Setup0(void)
000000  b570              PUSH     {r4-r6,lr}
;;;660    {
;;;661      u8 *(*CopyRoutine)(u16);
;;;662      RESULT Result;
;;;663      u32 Request_No = pInformation->USBbRequest;
000002  4c54              LDR      r4,|L3.340|
;;;664    
;;;665      u32 Related_Endpoint, Reserved;
;;;666      u32 wOffset, Status;
;;;667    
;;;668    
;;;669    
;;;670      CopyRoutine = NULL;
;;;671      wOffset = 0;
;;;672    
;;;673      if (Request_No == GET_DESCRIPTOR)
;;;674      {
;;;675        if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
;;;676        {
;;;677          u8 wValue1 = pInformation->USBwValue1;
;;;678          if (wValue1 == DEVICE_DESCRIPTOR)
;;;679          {
;;;680            CopyRoutine = pProperty->GetDeviceDescriptor;
000004  4d54              LDR      r5,|L3.344|
;;;681          }
;;;682          else if (wValue1 == CONFIG_DESCRIPTOR)
;;;683          {
;;;684            CopyRoutine = pProperty->GetConfigDescriptor;
;;;685          }
;;;686          else if (wValue1 == STRING_DESCRIPTOR)
;;;687          {
;;;688            CopyRoutine = pProperty->GetStringDescriptor;
;;;689          }  /* End of GET_DESCRIPTOR */
;;;690        }
;;;691      }
;;;692    
;;;693      /*GET STATUS*/
;;;694      else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
;;;695               && (pInformation->USBwLength == 0x0002)
;;;696               && (pInformation->USBwIndex1 == 0))
;;;697      {
;;;698        /* GET STATUS for Device*/
;;;699        if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
;;;700            && (pInformation->USBwIndex == 0))
;;;701        {
;;;702          CopyRoutine = Standard_GetStatus;
;;;703        }
;;;704    
;;;705        /* GET STATUS for Interface*/
;;;706        else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
;;;707        {
;;;708          if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
;;;709              && (pInformation->Current_Configuration != 0))
;;;710          {
;;;711            CopyRoutine = Standard_GetStatus;
;;;712          }
;;;713        }
;;;714    
;;;715        /* GET STATUS for EndPoint*/
;;;716        else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
;;;717        {
;;;718          Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
;;;719          Reserved = pInformation->USBwIndex0 & 0x70;
;;;720    
;;;721          if (ValBit(pInformation->USBwIndex0, 7))
;;;722          {
;;;723            /*Get Status of endpoint & stall the request if the related_ENdpoint
;;;724            is Disabled*/
;;;725            Status = _GetEPTxStatus(Related_Endpoint);
;;;726          }
;;;727          else
;;;728          {
;;;729            Status = _GetEPRxStatus(Related_Endpoint);
;;;730          }
;;;731    
;;;732          if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
;;;733              && (Status != 0))
;;;734          {
;;;735            CopyRoutine = Standard_GetStatus;
;;;736          }
;;;737        }
;;;738    
;;;739      }
;;;740    
;;;741      /*GET CONFIGURATION*/
;;;742      else if (Request_No == GET_CONFIGURATION)
;;;743      {
;;;744        if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
;;;745        {
;;;746          CopyRoutine = Standard_GetConfiguration;
;;;747        }
;;;748      }
;;;749      /*GET INTERFACE*/
;;;750      else if (Request_No == GET_INTERFACE)
;;;751      {
;;;752        if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
;;;753            && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
;;;754            && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
;;;755            && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
;;;756        {
;;;757          CopyRoutine = Standard_GetInterface;
;;;758        }
;;;759    
;;;760      }
;;;761    
;;;762    
;;;763      if (CopyRoutine)
;;;764      {
;;;765        pInformation->Ctrl_Info.Usb_wOffset = wOffset;
;;;766        pInformation->Ctrl_Info.CopyData = CopyRoutine;
;;;767        /* sb in the original the cast to word was directly */
;;;768        /* now the cast is made step by step */
;;;769        (*CopyRoutine)(0);
;;;770        Result = USB_SUCCESS;
;;;771      }
;;;772      else
;;;773      {
;;;774        Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
;;;775        if (Result == USB_NOT_READY)
;;;776        {
;;;777          pInformation->ControlState = PAUSE;
000006  2609              MOVS     r6,#9
000008  6820              LDR      r0,[r4,#0]            ;663  ; pInformation
00000a  6829              LDR      r1,[r5,#0]            ;673
00000c  7842              LDRB     r2,[r0,#1]            ;663
00000e  2a06              CMP      r2,#6                 ;673
000010  d005              BEQ      |L3.30|
000012  b1aa              CBZ      r2,|L3.64|
000014  2a08              CMP      r2,#8                 ;742
000016  d04d              BEQ      |L3.180|
000018  2a0a              CMP      r2,#0xa               ;750
00001a  d050              BEQ      |L3.190|
00001c  e06c              B        |L3.248|
                  |L3.30|
00001e  7802              LDRB     r2,[r0,#0]            ;675
000020  0652              LSLS     r2,r2,#25             ;675
000022  d169              BNE      |L3.248|
000024  7880              LDRB     r0,[r0,#2]            ;677
000026  2801              CMP      r0,#1                 ;678
000028  d004              BEQ      |L3.52|
00002a  2802              CMP      r0,#2                 ;682
00002c  d004              BEQ      |L3.56|
00002e  2803              CMP      r0,#3                 ;686
000030  d004              BEQ      |L3.60|
000032  e061              B        |L3.248|
                  |L3.52|
000034  69c9              LDR      r1,[r1,#0x1c]         ;680
000036  e056              B        |L3.230|
                  |L3.56|
000038  6a09              LDR      r1,[r1,#0x20]         ;684
00003a  e054              B        |L3.230|
                  |L3.60|
00003c  6a49              LDR      r1,[r1,#0x24]         ;688
00003e  e052              B        |L3.230|
                  |L3.64|
000040  8842              LDRH     r2,[r0,#2]            ;694
000042  bbb2              CBNZ     r2,|L3.178|
000044  88c2              LDRH     r2,[r0,#6]            ;695
000046  2a02              CMP      r2,#2                 ;695
000048  d156              BNE      |L3.248|
00004a  7902              LDRB     r2,[r0,#4]            ;696
00004c  bb8a              CBNZ     r2,|L3.178|
00004e  7802              LDRB     r2,[r0,#0]            ;699
000050  0653              LSLS     r3,r2,#25             ;699
000052  d101              BNE      |L3.88|
000054  8883              LDRH     r3,[r0,#4]            ;700
000056  b133              CBZ      r3,|L3.102|
                  |L3.88|
000058  f002027f          AND      r2,r2,#0x7f           ;706
00005c  2a01              CMP      r2,#1                 ;706
00005e  d004              BEQ      |L3.106|
000060  2a02              CMP      r2,#2                 ;716
000062  d00c              BEQ      |L3.126|
000064  e048              B        |L3.248|
                  |L3.102|
000066  493d              LDR      r1,|L3.348|
000068  e03d              B        |L3.230|
                  |L3.106|
00006a  698a              LDR      r2,[r1,#0x18]         ;708
00006c  7940              LDRB     r0,[r0,#5]            ;708
00006e  2100              MOVS     r1,#0                 ;708
000070  4790              BLX      r2                    ;708
000072  b9f0              CBNZ     r0,|L3.178|
000074  6820              LDR      r0,[r4,#0]            ;709  ; pInformation
000076  7a80              LDRB     r0,[r0,#0xa]          ;709
000078  2800              CMP      r0,#0                 ;709
00007a  d1f4              BNE      |L3.102|
00007c  e03c              B        |L3.248|
                  |L3.126|
00007e  7940              LDRB     r0,[r0,#5]            ;718
000080  4937              LDR      r1,|L3.352|
000082  f0000270          AND      r2,r0,#0x70           ;719
000086  0603              LSLS     r3,r0,#24             ;721
000088  f000000f          AND      r0,r0,#0xf            ;718
00008c  eb010180          ADD      r1,r1,r0,LSL #2       ;729
000090  f8d11c00          LDR      r1,[r1,#0xc00]        ;729
000094  d503              BPL      |L3.158|
000096  f3c11101          UBFX     r1,r1,#4,#2           ;725
00009a  0109              LSLS     r1,r1,#4              ;725
00009c  e002              B        |L3.164|
                  |L3.158|
00009e  f3c13101          UBFX     r1,r1,#12,#2          ;729
0000a2  0309              LSLS     r1,r1,#12             ;729
                  |L3.164|
0000a4  4b2f              LDR      r3,|L3.356|
0000a6  781b              LDRB     r3,[r3,#0]            ;732  ; Device_Table
0000a8  4283              CMP      r3,r0                 ;732
0000aa  d925              BLS      |L3.248|
0000ac  b90a              CBNZ     r2,|L3.178|
0000ae  2900              CMP      r1,#0                 ;733
0000b0  d1d9              BNE      |L3.102|
                  |L3.178|
0000b2  e021              B        |L3.248|
                  |L3.180|
0000b4  7800              LDRB     r0,[r0,#0]            ;744
0000b6  0640              LSLS     r0,r0,#25             ;744
0000b8  d11e              BNE      |L3.248|
0000ba  492b              LDR      r1,|L3.360|
0000bc  e013              B        |L3.230|
                  |L3.190|
0000be  7802              LDRB     r2,[r0,#0]            ;752
0000c0  f002027f          AND      r2,r2,#0x7f           ;752
0000c4  2a01              CMP      r2,#1                 ;752
0000c6  d117              BNE      |L3.248|
0000c8  7a82              LDRB     r2,[r0,#0xa]          ;753
0000ca  b1aa              CBZ      r2,|L3.248|
0000cc  8842              LDRH     r2,[r0,#2]            ;753
0000ce  b99a              CBNZ     r2,|L3.248|
0000d0  7902              LDRB     r2,[r0,#4]            ;754
0000d2  b98a              CBNZ     r2,|L3.248|
0000d4  88c2              LDRH     r2,[r0,#6]            ;754
0000d6  2a01              CMP      r2,#1                 ;754
0000d8  d10e              BNE      |L3.248|
0000da  698a              LDR      r2,[r1,#0x18]         ;755
0000dc  7940              LDRB     r0,[r0,#5]            ;755
0000de  2100              MOVS     r1,#0                 ;755
0000e0  4790              BLX      r2                    ;755
0000e2  b948              CBNZ     r0,|L3.248|
0000e4  4921              LDR      r1,|L3.364|
                  |L3.230|
0000e6  b139              CBZ      r1,|L3.248|
0000e8  6820              LDR      r0,[r4,#0]            ;765  ; pInformation
0000ea  2200              MOVS     r2,#0                 ;765
0000ec  8242              STRH     r2,[r0,#0x12]         ;765
0000ee  6181              STR      r1,[r0,#0x18]         ;769
0000f0  4610              MOV      r0,r2                 ;769
0000f2  4788              BLX      r1                    ;769
0000f4  2000              MOVS     r0,#0                 ;770
0000f6  e006              B        |L3.262|
                  |L3.248|
0000f8  6829              LDR      r1,[r5,#0]            ;774  ; pProperty
0000fa  6820              LDR      r0,[r4,#0]            ;774  ; pInformation
0000fc  6909              LDR      r1,[r1,#0x10]         ;774
0000fe  7840              LDRB     r0,[r0,#1]            ;774
000100  4788              BLX      r1                    ;774
000102  2803              CMP      r0,#3                 ;775
000104  d007              BEQ      |L3.278|
                  |L3.262|
;;;778          return;
;;;779        }
;;;780      }
;;;781    
;;;782      if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
000106  6821              LDR      r1,[r4,#0]  ; pInformation
000108  8a0a              LDRH     r2,[r1,#0x10]
00010a  f5a2437f          SUB      r3,r2,#0xff00
00010e  3bff              SUBS     r3,r3,#0xff
000110  d104              BNE      |L3.284|
;;;783      {
;;;784        /* Data is not ready, wait it */
;;;785        pInformation->ControlState = PAUSE;
000112  720e              STRB     r6,[r1,#8]
;;;786        return;
;;;787      }
;;;788      if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
;;;789      {
;;;790        /* Unsupported request */
;;;791        pInformation->ControlState = STALLED;
;;;792        return;
;;;793      }
;;;794    
;;;795    
;;;796      if (ValBit(pInformation->USBbmRequestType, 7))
;;;797      {
;;;798        /* Device ==> Host */
;;;799        u32 wLength = pInformation->USBwLength;
;;;800    
;;;801        /* Restrict the data length to be the one host asks */
;;;802        if (pInformation->Ctrl_Info.Usb_wLength > wLength)
;;;803        {
;;;804          pInformation->Ctrl_Info.Usb_wLength = wLength;
;;;805        }
;;;806    
;;;807        pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
;;;808        DataStageIn();
;;;809      }
;;;810      else
;;;811      {
;;;812        pInformation->ControlState = OUT_DATA;
;;;813        vSetEPRxStatus(EP_RX_VALID);/* enable for next data reception */
;;;814      }
;;;815    
;;;816      return;
;;;817    }
000114  bd70              POP      {r4-r6,pc}
                  |L3.278|
000116  6820              LDR      r0,[r4,#0]            ;777  ; pInformation
000118  7206              STRB     r6,[r0,#8]            ;777
00011a  bd70              POP      {r4-r6,pc}
                  |L3.284|
00011c  2802              CMP      r0,#2                 ;788
00011e  d00f              BEQ      |L3.320|
000120  b172              CBZ      r2,|L3.320|
000122  7808              LDRB     r0,[r1,#0]            ;796
000124  0600              LSLS     r0,r0,#24             ;796
000126  d50e              BPL      |L3.326|
000128  88c8              LDRH     r0,[r1,#6]            ;799
00012a  4282              CMP      r2,r0                 ;802
00012c  d900              BLS      |L3.304|
00012e  8208              STRH     r0,[r1,#0x10]         ;804
                  |L3.304|
000130  6828              LDR      r0,[r5,#0]            ;807  ; pProperty
000132  f890002c          LDRB     r0,[r0,#0x2c]         ;807
000136  8288              STRH     r0,[r1,#0x14]         ;807
000138  e8bd4070          POP      {r4-r6,lr}            ;808
00013c  f7ffbffe          B.W      DataStageIn
                  |L3.320|
000140  2008              MOVS     r0,#8                 ;791
000142  7208              STRB     r0,[r1,#8]            ;791
000144  bd70              POP      {r4-r6,pc}
                  |L3.326|
000146  2003              MOVS     r0,#3                 ;812
000148  7208              STRB     r0,[r1,#8]            ;812
00014a  4909              LDR      r1,|L3.368|
00014c  0300              LSLS     r0,r0,#12             ;813
00014e  8008              STRH     r0,[r1,#0]            ;813
000150  bd70              POP      {r4-r6,pc}
;;;818    
                          ENDP

000152  0000              DCW      0x0000
                  |L3.340|
                          DCD      pInformation
                  |L3.344|
                          DCD      pProperty
                  |L3.348|
                          DCD      Standard_GetStatus
                  |L3.352|
                          DCD      0x40005000
                  |L3.356|
                          DCD      Device_Table
                  |L3.360|
                          DCD      Standard_GetConfiguration
                  |L3.364|
                          DCD      Standard_GetInterface
                  |L3.368|
                          DCD      SaveRState

                          AREA ||i.In0_Process||, CODE, READONLY, ALIGN=2

                  In0_Process PROC
;;;869    *******************************************************************************/
;;;870    u8 In0_Process(void)
000000  b510              PUSH     {r4,lr}
;;;871    {
;;;872      u32 ControlState = pInformation->ControlState;
000002  4c13              LDR      r4,|L4.80|
000004  6820              LDR      r0,[r4,#0]  ; pInformation
000006  7a01              LDRB     r1,[r0,#8]
;;;873    
;;;874      if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
000008  2902              CMP      r1,#2
00000a  d004              BEQ      |L4.22|
00000c  2904              CMP      r1,#4
00000e  d002              BEQ      |L4.22|
;;;875      {
;;;876        DataStageIn();
;;;877        /* ControlState may be changed outside the function */
;;;878        ControlState = pInformation->ControlState;
;;;879      }
;;;880    
;;;881      else if (ControlState == WAIT_STATUS_IN)
000010  2906              CMP      r1,#6
000012  d005              BEQ      |L4.32|
000014  e015              B        |L4.66|
                  |L4.22|
000016  f7fffffe          BL       DataStageIn
00001a  6820              LDR      r0,[r4,#0]            ;878  ; pInformation
00001c  7a00              LDRB     r0,[r0,#8]            ;878
00001e  e011              B        |L4.68|
                  |L4.32|
;;;882      {
;;;883        if ((pInformation->USBbRequest == SET_ADDRESS) &&
000020  7841              LDRB     r1,[r0,#1]
000022  2905              CMP      r1,#5
000024  d109              BNE      |L4.58|
;;;884            (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
000026  7801              LDRB     r1,[r0,#0]
000028  0649              LSLS     r1,r1,#25
00002a  d106              BNE      |L4.58|
;;;885        {
;;;886          SetDeviceAddress(pInformation->USBwValue0);
00002c  78c0              LDRB     r0,[r0,#3]
00002e  f7fffffe          BL       SetDeviceAddress
;;;887          pUser_Standard_Requests->User_SetDeviceAddress();
000032  4808              LDR      r0,|L4.84|
000034  6800              LDR      r0,[r0,#0]  ; pUser_Standard_Requests
000036  6a00              LDR      r0,[r0,#0x20]
000038  4780              BLX      r0
                  |L4.58|
;;;888        }
;;;889        (*pProperty->Process_Status_IN)();
00003a  4807              LDR      r0,|L4.88|
00003c  6800              LDR      r0,[r0,#0]  ; pProperty
00003e  6880              LDR      r0,[r0,#8]
000040  4780              BLX      r0
                  |L4.66|
;;;890        ControlState = STALLED;
;;;891      }
;;;892    
;;;893      else
;;;894      {
;;;895        ControlState = STALLED;
000042  2008              MOVS     r0,#8
                  |L4.68|
;;;896      }
;;;897    
;;;898      pInformation->ControlState = ControlState;
000044  6821              LDR      r1,[r4,#0]  ; pInformation
000046  7208              STRB     r0,[r1,#8]
;;;899    
;;;900      return Post0_Process();
000048  e8bd4010          POP      {r4,lr}
00004c  f7ffbffe          B.W      Post0_Process
;;;901    }
;;;902    
                          ENDP

                  |L4.80|
                          DCD      pInformation
                  |L4.84|
                          DCD      pUser_Standard_Requests
                  |L4.88|
                          DCD      pProperty

                          AREA ||i.NOP_Process||, CODE, READONLY, ALIGN=1

                  NOP_Process PROC
;;;990    *******************************************************************************/
;;;991    void NOP_Process(void)
000000  4770              BX       lr
;;;992    {
;;;993    }
;;;994    
                          ENDP


                          AREA ||i.NoData_Setup0||, CODE, READONLY, ALIGN=2

                  NoData_Setup0 PROC
;;;534    *******************************************************************************/
;;;535    void NoData_Setup0(void)
000000  b570              PUSH     {r4-r6,lr}
;;;536    {
;;;537      RESULT Result = USB_UNSUPPORT;
;;;538      u32 RequestNo = pInformation->USBbRequest;
000002  4d31              LDR      r5,|L6.200|
;;;539      u32 ControlState;
;;;540    
;;;541      if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
000004  6828              LDR      r0,[r5,#0]  ; pInformation
000006  7801              LDRB     r1,[r0,#0]
000008  7844              LDRB     r4,[r0,#1]            ;538
00000a  064a              LSLS     r2,r1,#25
00000c  d006              BEQ      |L6.28|
;;;542      {
;;;543        /* Device Request*/
;;;544        /* SET_CONFIGURATION*/
;;;545        if (RequestNo == SET_CONFIGURATION)
;;;546        {
;;;547          Result = Standard_SetConfiguration();
;;;548        }
;;;549    
;;;550        /*SET ADDRESS*/
;;;551        else if (RequestNo == SET_ADDRESS)
;;;552        {
;;;553          if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
;;;554              || (pInformation->USBwIndex != 0)
;;;555              || (pInformation->Current_Configuration != 0))
;;;556            /* Device Address should be 127 or less*/
;;;557          {
;;;558            ControlState = STALLED;
;;;559            goto exit_NoData_Setup0;
;;;560          }
;;;561          else
;;;562          {
;;;563            Result = USB_SUCCESS;
;;;564          }
;;;565        }
;;;566        /*SET FEATURE for Device*/
;;;567        else if (RequestNo == SET_FEATURE)
;;;568        {
;;;569          if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
;;;570              && (pInformation->USBwIndex == 0)
;;;571              && (ValBit(pInformation->Current_Feature, 5)))
;;;572          {
;;;573            Result = Standard_SetDeviceFeature();
;;;574          }
;;;575          else
;;;576          {
;;;577            Result = USB_UNSUPPORT;
;;;578          }
;;;579        }
;;;580        /*Clear FEATURE for Device */
;;;581        else if (RequestNo == CLEAR_FEATURE)
;;;582        {
;;;583          if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
;;;584              && pInformation->USBwIndex == 0
;;;585              && ValBit(pInformation->Current_Feature, 5))
;;;586          {
;;;587            Result = Standard_ClearFeature();
;;;588          }
;;;589          else
;;;590          {
;;;591            Result = USB_UNSUPPORT;
;;;592          }
;;;593        }
;;;594    
;;;595      }
;;;596    
;;;597      /* Interface Request*/
;;;598      else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
00000e  f001007f          AND      r0,r1,#0x7f
000012  2801              CMP      r0,#1
000014  d02b              BEQ      |L6.110|
;;;599      {
;;;600        /*SET INTERFACE*/
;;;601        if (RequestNo == SET_INTERFACE)
;;;602        {
;;;603          Result = Standard_SetInterface();
;;;604        }
;;;605      }
;;;606    
;;;607      /* EndPoint Request*/
;;;608      else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
000016  2802              CMP      r0,#2
000018  d02e              BEQ      |L6.120|
00001a  e038              B        |L6.142|
                  |L6.28|
00001c  2c09              CMP      r4,#9                 ;545
00001e  d006              BEQ      |L6.46|
000020  2c05              CMP      r4,#5                 ;551
000022  d007              BEQ      |L6.52|
000024  2c03              CMP      r4,#3                 ;567
000026  d00e              BEQ      |L6.70|
000028  2c01              CMP      r4,#1                 ;581
00002a  d017              BEQ      |L6.92|
00002c  e02f              B        |L6.142|
                  |L6.46|
00002e  f7fffffe          BL       Standard_SetConfiguration
000032  e02b              B        |L6.140|
                  |L6.52|
000034  78c1              LDRB     r1,[r0,#3]            ;553
000036  297f              CMP      r1,#0x7f              ;553
000038  d831              BHI      |L6.158|
00003a  7881              LDRB     r1,[r0,#2]            ;553
00003c  bb79              CBNZ     r1,|L6.158|
00003e  8881              LDRH     r1,[r0,#4]            ;554
000040  bb69              CBNZ     r1,|L6.158|
000042  7a80              LDRB     r0,[r0,#0xa]          ;555
000044  e02a              B        |L6.156|
                  |L6.70|
000046  78c1              LDRB     r1,[r0,#3]            ;569
000048  2901              CMP      r1,#1                 ;569
00004a  d120              BNE      |L6.142|
00004c  8881              LDRH     r1,[r0,#4]            ;570
00004e  b9f1              CBNZ     r1,|L6.142|
000050  7a40              LDRB     r0,[r0,#9]            ;571
000052  0680              LSLS     r0,r0,#26             ;571
000054  d51b              BPL      |L6.142|
000056  f7fffffe          BL       Standard_SetDeviceFeature
00005a  e017              B        |L6.140|
                  |L6.92|
00005c  78c1              LDRB     r1,[r0,#3]            ;583
00005e  2901              CMP      r1,#1                 ;583
000060  d115              BNE      |L6.142|
000062  8881              LDRH     r1,[r0,#4]            ;584
000064  b999              CBNZ     r1,|L6.142|
000066  7a40              LDRB     r0,[r0,#9]            ;585
000068  0680              LSLS     r0,r0,#26             ;585
00006a  d40a              BMI      |L6.130|
00006c  e00f              B        |L6.142|
                  |L6.110|
00006e  2c0b              CMP      r4,#0xb               ;601
000070  d10d              BNE      |L6.142|
000072  f7fffffe          BL       Standard_SetInterface
000076  e009              B        |L6.140|
                  |L6.120|
;;;609      {
;;;610        /*CLEAR FEATURE for EndPoint*/
;;;611        if (RequestNo == CLEAR_FEATURE)
000078  2c01              CMP      r4,#1
00007a  d002              BEQ      |L6.130|
;;;612        {
;;;613          Result = Standard_ClearFeature();
;;;614        }
;;;615        /* SET FEATURE for EndPoint*/
;;;616        else if (RequestNo == SET_FEATURE)
00007c  2c03              CMP      r4,#3
00007e  d003              BEQ      |L6.136|
000080  e005              B        |L6.142|
                  |L6.130|
000082  f7fffffe          BL       Standard_ClearFeature
000086  e001              B        |L6.140|
                  |L6.136|
;;;617        {
;;;618          Result = Standard_SetEndPointFeature();
000088  f7fffffe          BL       Standard_SetEndPointFeature
                  |L6.140|
;;;619        }
;;;620      }
;;;621      else
;;;622      {
;;;623        Result = USB_UNSUPPORT;
;;;624      }
;;;625    
;;;626    
;;;627      if (Result != USB_SUCCESS)
00008c  b158              CBZ      r0,|L6.166|
                  |L6.142|
;;;628      {
;;;629        Result = (*pProperty->Class_NoData_Setup)(RequestNo);
00008e  480f              LDR      r0,|L6.204|
000090  6800              LDR      r0,[r0,#0]  ; pProperty
000092  6941              LDR      r1,[r0,#0x14]
000094  b2e0              UXTB     r0,r4
000096  4788              BLX      r1
;;;630        if (Result == USB_NOT_READY)
000098  2803              CMP      r0,#3
00009a  d002              BEQ      |L6.162|
                  |L6.156|
;;;631        {
;;;632          ControlState = PAUSE;
;;;633          goto exit_NoData_Setup0;
;;;634        }
;;;635      }
;;;636    
;;;637      if (Result != USB_SUCCESS)
00009c  b118              CBZ      r0,|L6.166|
                  |L6.158|
;;;638      {
;;;639        ControlState = STALLED;
00009e  2008              MOVS     r0,#8
;;;640        goto exit_NoData_Setup0;
0000a0  e00f              B        |L6.194|
                  |L6.162|
0000a2  2009              MOVS     r0,#9                 ;632
0000a4  e00d              B        |L6.194|
                  |L6.166|
;;;641      }
;;;642    
;;;643      ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
;;;644    
;;;645      USB_StatusIn();
0000a6  4a0a              LDR      r2,|L6.208|
0000a8  2006              MOVS     r0,#6                 ;643
0000aa  2100              MOVS     r1,#0
0000ac  6813              LDR      r3,[r2,#0]
0000ae  4a09              LDR      r2,|L6.212|
0000b0  ea4f4303          LSL      r3,r3,#16
0000b4  eb0232d3          ADD      r2,r2,r3,LSR #15
0000b8  6051              STR      r1,[r2,#4]
0000ba  4a07              LDR      r2,|L6.216|
0000bc  f04f0130          MOV      r1,#0x30
0000c0  8011              STRH     r1,[r2,#0]
                  |L6.194|
;;;646    
;;;647    exit_NoData_Setup0:
;;;648      pInformation->ControlState = ControlState;
0000c2  6829              LDR      r1,[r5,#0]  ; pInformation
0000c4  7208              STRB     r0,[r1,#8]
;;;649      return;
;;;650    }
0000c6  bd70              POP      {r4-r6,pc}
;;;651    
                          ENDP

                  |L6.200|
                          DCD      pInformation
                  |L6.204|
                          DCD      pProperty
                  |L6.208|
                          DCD      0x40005c50
                  |L6.212|
                          DCD      0x40006000
                  |L6.216|
                          DCD      SaveTState

                          AREA ||i.Out0_Process||, CODE, READONLY, ALIGN=2

                  Out0_Process PROC
;;;909    *******************************************************************************/
;;;910    u8 Out0_Process(void)
000000  b510              PUSH     {r4,lr}
;;;911    {
;;;912      u32 ControlState = pInformation->ControlState;
000002  4c0d              LDR      r4,|L7.56|
000004  6820              LDR      r0,[r4,#0]  ; pInformation
000006  7a00              LDRB     r0,[r0,#8]
;;;913    
;;;914      if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
000008  2803              CMP      r0,#3
00000a  d004              BEQ      |L7.22|
00000c  2805              CMP      r0,#5
00000e  d002              BEQ      |L7.22|
;;;915      {
;;;916        DataStageOut();
;;;917        ControlState = pInformation->ControlState; /* may be changed outside the function */
;;;918      }
;;;919    
;;;920      else if (ControlState == WAIT_STATUS_OUT)
000010  2807              CMP      r0,#7
000012  d005              BEQ      |L7.32|
000014  e008              B        |L7.40|
                  |L7.22|
000016  f7fffffe          BL       DataStageOut
00001a  6820              LDR      r0,[r4,#0]            ;917  ; pInformation
00001c  7a00              LDRB     r0,[r0,#8]            ;917
00001e  e004              B        |L7.42|
                  |L7.32|
;;;921      {
;;;922        (*pProperty->Process_Status_OUT)();
000020  4806              LDR      r0,|L7.60|
000022  6800              LDR      r0,[r0,#0]  ; pProperty
000024  68c0              LDR      r0,[r0,#0xc]
000026  4780              BLX      r0
                  |L7.40|
;;;923        ControlState = STALLED;
;;;924      }
;;;925    
;;;926      else if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
;;;927      {
;;;928        /* host aborts the transfer before finish */
;;;929        ControlState = STALLED;
000028  2008              MOVS     r0,#8
                  |L7.42|
;;;930      }
;;;931    
;;;932      /* Unexpect state, STALL the endpoint */
;;;933      else
;;;934      {
;;;935        ControlState = STALLED;
;;;936      }
;;;937    
;;;938      pInformation->ControlState = ControlState;
00002a  6821              LDR      r1,[r4,#0]  ; pInformation
00002c  7208              STRB     r0,[r1,#8]
;;;939    
;;;940      return Post0_Process();
00002e  e8bd4010          POP      {r4,lr}
000032  f7ffbffe          B.W      Post0_Process
;;;941    }
;;;942    
                          ENDP

000036  0000              DCW      0x0000
                  |L7.56|
                          DCD      pInformation
                  |L7.60|
                          DCD      pProperty

                          AREA ||i.Post0_Process||, CODE, READONLY, ALIGN=2

                  Post0_Process PROC
;;;950    *******************************************************************************/
;;;951    u8 Post0_Process(void)
000000  480b              LDR      r0,|L8.48|
;;;952    {
000002  b510              PUSH     {r4,lr}
;;;953      SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
000004  f890102c          LDRB     r1,[r0,#0x2c]  ; Device_Property
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       SetEPRxCount
;;;954    
;;;955      if (pInformation->ControlState == STALLED)
00000e  4809              LDR      r0,|L8.52|
000010  6800              LDR      r0,[r0,#0]  ; pInformation
000012  7a01              LDRB     r1,[r0,#8]
000014  2908              CMP      r1,#8
000016  d105              BNE      |L8.36|
;;;956      {
;;;957        vSetEPRxStatus(EP_RX_STALL);
000018  4a07              LDR      r2,|L8.56|
00001a  0248              LSLS     r0,r1,#9
00001c  8010              STRH     r0,[r2,#0]
;;;958        vSetEPTxStatus(EP_TX_STALL);
00001e  4a07              LDR      r2,|L8.60|
000020  2010              MOVS     r0,#0x10
000022  8010              STRH     r0,[r2,#0]
                  |L8.36|
;;;959      }
;;;960    
;;;961      return (pInformation->ControlState == PAUSE);
000024  2001              MOVS     r0,#1
000026  2909              CMP      r1,#9
000028  d000              BEQ      |L8.44|
00002a  2000              MOVS     r0,#0
                  |L8.44|
;;;962    }
00002c  bd10              POP      {r4,pc}
;;;963    
                          ENDP

00002e  0000              DCW      0x0000
                  |L8.48|
                          DCD      Device_Property
                  |L8.52|
                          DCD      pInformation
                  |L8.56|
                          DCD      SaveRState
                  |L8.60|
                          DCD      SaveTState

                          AREA ||i.SetDeviceAddress||, CODE, READONLY, ALIGN=2

                  SetDeviceAddress PROC
;;;970    *******************************************************************************/
;;;971    void SetDeviceAddress(u8 Val)
000000  b5f0              PUSH     {r4-r7,lr}
;;;972    {
;;;973      u32 i;
;;;974      u32 nEP = Device_Table.Total_Endpoint;
000002  490c              LDR      r1,|L9.52|
;;;975    
;;;976      /* set address in every used endpoint */
;;;977      for (i = 0; i < nEP; i++)
;;;978      {
;;;979        _SetEPAddress((u8)i, (u8)i);
000004  4a0c              LDR      r2,|L9.56|
000006  f648768f          MOV      r6,#0x8f8f
00000a  780b              LDRB     r3,[r1,#0]            ;974  ; Device_Table
00000c  2100              MOVS     r1,#0                 ;977
00000e  e00a              B        |L9.38|
                  |L9.16|
000010  b2cc              UXTB     r4,r1
000012  eb020584          ADD      r5,r2,r4,LSL #2
000016  f8d57c00          LDR      r7,[r5,#0xc00]
00001a  b2bf              UXTH     r7,r7
00001c  4037              ANDS     r7,r7,r6
00001e  4327              ORRS     r7,r7,r4
000020  f8c57c00          STR      r7,[r5,#0xc00]
000024  1c49              ADDS     r1,r1,#1              ;977
                  |L9.38|
000026  4299              CMP      r1,r3                 ;977
000028  d3f2              BCC      |L9.16|
;;;980      } /* for */
;;;981      _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
00002a  f0400080          ORR      r0,r0,#0x80
00002e  f8c20c4c          STR      r0,[r2,#0xc4c]
;;;982    }
000032  bdf0              POP      {r4-r7,pc}
;;;983    
                          ENDP

                  |L9.52|
                          DCD      Device_Table
                  |L9.56|
                          DCD      0x40005000

                          AREA ||i.Setup0_Process||, CODE, READONLY, ALIGN=2

                  Setup0_Process PROC
;;;825    *******************************************************************************/
;;;826    u8 Setup0_Process(void)
000000  b570              PUSH     {r4-r6,lr}
;;;827    {
000002  4817              LDR      r0,|L10.96|
;;;828    
;;;829      union
;;;830      {
;;;831        u8* b;
;;;832        u16* w;
;;;833      } pBuf;
;;;834    
;;;835      pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
000004  6801              LDR      r1,[r0,#0]
000006  4817              LDR      r0,|L10.100|
000008  ea4f4101          LSL      r1,r1,#16
00000c  eb0031d1          ADD      r1,r0,r1,LSR #15
;;;836    
;;;837      if (pInformation->ControlState != PAUSE)
000010  4d15              LDR      r5,|L10.104|
000012  6889              LDR      r1,[r1,#8]            ;835
000014  ea4f4101          LSL      r1,r1,#16             ;835
000018  eb0034d1          ADD      r4,r0,r1,LSR #15      ;835
00001c  6828              LDR      r0,[r5,#0]  ; pInformation
00001e  7a01              LDRB     r1,[r0,#8]
000020  2909              CMP      r1,#9
000022  d00f              BEQ      |L10.68|
;;;838      {
;;;839        pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
000024  7821              LDRB     r1,[r4,#0]
000026  7001              STRB     r1,[r0,#0]
;;;840        pInformation->USBbRequest = *pBuf.b++; /* bRequest */
000028  7861              LDRB     r1,[r4,#1]
00002a  7041              STRB     r1,[r0,#1]
;;;841        pBuf.w++;  /* word not accessed because of 32 bits addressing */
;;;842        pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
00002c  88a0              LDRH     r0,[r4,#4]
00002e  f7fffffe          BL       ByteSwap
000032  6829              LDR      r1,[r5,#0]  ; pInformation
000034  8048              STRH     r0,[r1,#2]
;;;843        pBuf.w++;  /* word not accessed because of 32 bits addressing */
;;;844        pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
000036  8920              LDRH     r0,[r4,#8]
000038  f7fffffe          BL       ByteSwap
00003c  6829              LDR      r1,[r5,#0]  ; pInformation
00003e  8088              STRH     r0,[r1,#4]
;;;845        pBuf.w++;  /* word not accessed because of 32 bits addressing */
;;;846        pInformation->USBwLength = *pBuf.w; /* wLength */
000040  89a0              LDRH     r0,[r4,#0xc]
000042  80c8              STRH     r0,[r1,#6]
                  |L10.68|
;;;847      }
;;;848    
;;;849      pInformation->ControlState = SETTING_UP;
000044  6828              LDR      r0,[r5,#0]  ; pInformation
000046  2101              MOVS     r1,#1
000048  7201              STRB     r1,[r0,#8]
;;;850      if (pInformation->USBwLength == 0)
00004a  88c0              LDRH     r0,[r0,#6]
00004c  b128              CBZ      r0,|L10.90|
;;;851      {
;;;852        /* Setup with no data stage */
;;;853        NoData_Setup0();
;;;854      }
;;;855      else
;;;856      {
;;;857        /* Setup with data stage */
;;;858        Data_Setup0();
00004e  f7fffffe          BL       Data_Setup0
                  |L10.82|
;;;859      }
;;;860      return Post0_Process();
000052  e8bd4070          POP      {r4-r6,lr}
000056  f7ffbffe          B.W      Post0_Process
                  |L10.90|
00005a  f7fffffe          BL       NoData_Setup0
00005e  e7f8              B        |L10.82|
;;;861    }
;;;862    
                          ENDP

                  |L10.96|
                          DCD      0x40005c50
                  |L10.100|
                          DCD      0x40006000
                  |L10.104|
                          DCD      pInformation

                          AREA ||i.Standard_ClearFeature||, CODE, READONLY, ALIGN=2

                  Standard_ClearFeature PROC
;;;239    *******************************************************************************/
;;;240    RESULT Standard_ClearFeature(void)
000000  b570              PUSH     {r4-r6,lr}
;;;241    {
;;;242      u32     Type_Rec = Type_Recipient;
000002  4837              LDR      r0,|L11.224|
000004  6801              LDR      r1,[r0,#0]  ; pInformation
000006  7808              LDRB     r0,[r1,#0]
000008  f010007f          ANDS     r0,r0,#0x7f
;;;243      u32     Status;
;;;244    
;;;245    
;;;246      if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
00000c  d002              BEQ      |L11.20|
;;;247      {/*Device Clear Feature*/
;;;248        ClrBit(pInformation->Current_Feature, 5);
;;;249        return USB_SUCCESS;
;;;250      }
;;;251      else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
00000e  2802              CMP      r0,#2
000010  d005              BEQ      |L11.30|
000012  e062              B        |L11.218|
                  |L11.20|
000014  7a48              LDRB     r0,[r1,#9]            ;248
000016  f00000df          AND      r0,r0,#0xdf           ;248
00001a  7248              STRB     r0,[r1,#9]            ;248
00001c  e04c              B        |L11.184|
                  |L11.30|
;;;252      {/*EndPoint Clear Feature*/
;;;253        DEVICE* pDev;
;;;254        u32 Related_Endpoint;
;;;255        u32 wIndex0;
;;;256        u32 rEP;
;;;257    
;;;258        if ((pInformation->USBwValue != ENDPOINT_STALL)
00001e  8848              LDRH     r0,[r1,#2]
000020  bbe8              CBNZ     r0,|L11.158|
;;;259            || (pInformation->USBwIndex1 != 0))
000022  7908              LDRB     r0,[r1,#4]
000024  bbd8              CBNZ     r0,|L11.158|
;;;260        {
;;;261          return USB_UNSUPPORT;
;;;262        }
;;;263    
;;;264        pDev = &Device_Table;
;;;265        wIndex0 = pInformation->USBwIndex0;
000026  794a              LDRB     r2,[r1,#5]
;;;266        rEP = wIndex0 & ~0x80;
;;;267        Related_Endpoint = ENDP0 + rEP;
;;;268    
;;;269        if (ValBit(pInformation->USBwIndex0, 7))
;;;270        {
;;;271          /*Get Status of endpoint & stall the request if the related_ENdpoint
;;;272          is Disabled*/
;;;273          Status = _GetEPTxStatus(Related_Endpoint);
000028  4c2f              LDR      r4,|L11.232|
00002a  0613              LSLS     r3,r2,#24             ;269
00002c  f0220080          BIC      r0,r2,#0x80           ;266
000030  2b00              CMP      r3,#0                 ;269
;;;274        }
;;;275        else
;;;276        {
;;;277          Status = _GetEPRxStatus(Related_Endpoint);
000032  eb040380          ADD      r3,r4,r0,LSL #2
000036  4d2b              LDR      r5,|L11.228|
000038  f8d33c00          LDR      r3,[r3,#0xc00]
00003c  da03              BGE      |L11.70|
00003e  f3c31301          UBFX     r3,r3,#4,#2           ;273
000042  011b              LSLS     r3,r3,#4              ;273
000044  e002              B        |L11.76|
                  |L11.70|
000046  f3c33301          UBFX     r3,r3,#12,#2
00004a  031b              LSLS     r3,r3,#12
                  |L11.76|
;;;278        }
;;;279    
;;;280        if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
00004c  782e              LDRB     r6,[r5,#0]
00004e  4605              MOV      r5,r0
000050  4286              CMP      r6,r0
000052  d942              BLS      |L11.218|
000054  b31b              CBZ      r3,|L11.158|
;;;281            || (pInformation->Current_Configuration == 0))
000056  7a89              LDRB     r1,[r1,#0xa]
000058  b309              CBZ      r1,|L11.158|
;;;282        {
;;;283          return USB_UNSUPPORT;
;;;284        }
;;;285    
;;;286    
;;;287        if (wIndex0 & 0x80)
00005a  0611              LSLS     r1,r2,#24
00005c  d510              BPL      |L11.128|
;;;288        {
;;;289          /* IN endpoint */
;;;290          if (_GetTxStallStatus(Related_Endpoint ))
00005e  eb040180          ADD      r1,r4,r0,LSL #2
000062  f8d11c00          LDR      r1,[r1,#0xc00]
000066  f3c11101          UBFX     r1,r1,#4,#2
00006a  2901              CMP      r1,#1
00006c  d120              BNE      |L11.176|
;;;291          {
;;;292            ClearDTOG_TX(Related_Endpoint);
00006e  b2e8              UXTB     r0,r5
000070  4604              MOV      r4,r0
000072  f7fffffe          BL       ClearDTOG_TX
;;;293            SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
000076  2130              MOVS     r1,#0x30
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       SetEPTxStatus
00007e  e017              B        |L11.176|
                  |L11.128|
;;;294          }
;;;295        }
;;;296        else
;;;297        {
;;;298          /* OUT endpoint */
;;;299          if (_GetRxStallStatus(Related_Endpoint))
000080  eb040580          ADD      r5,r4,r0,LSL #2
000084  f8d51c00          LDR      r1,[r5,#0xc00]
000088  f3c13101          UBFX     r1,r1,#12,#2
00008c  2901              CMP      r1,#1
00008e  d10f              BNE      |L11.176|
;;;300          {
;;;301            if (Related_Endpoint == ENDP0)
;;;302            {
;;;303              /* After clear the STALL, enable the default endpoint receiver */
;;;304              SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
;;;305              _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
000090  f64b768f          MOV      r6,#0xbf8f
000094  b190              CBZ      r0,|L11.188|
;;;306            }
;;;307            else
;;;308            {
;;;309              ClearDTOG_RX(Related_Endpoint);
000096  b2c0              UXTB     r0,r0
000098  f7fffffe          BL       ClearDTOG_RX
;;;310              _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
00009c  e000              B        |L11.160|
                  |L11.158|
00009e  e01c              B        |L11.218|
                  |L11.160|
0000a0  f8d50c00          LDR      r0,[r5,#0xc00]
0000a4  b280              UXTH     r0,r0
0000a6  4030              ANDS     r0,r0,r6
0000a8  f4805040          EOR      r0,r0,#0x3000
0000ac  f8c50c00          STR      r0,[r5,#0xc00]
                  |L11.176|
;;;311            }
;;;312          }
;;;313        }
;;;314        pUser_Standard_Requests->User_ClearFeature();
0000b0  480e              LDR      r0,|L11.236|
0000b2  6800              LDR      r0,[r0,#0]  ; pUser_Standard_Requests
0000b4  6940              LDR      r0,[r0,#0x14]
0000b6  4780              BLX      r0
                  |L11.184|
;;;315        return USB_SUCCESS;
0000b8  2000              MOVS     r0,#0
;;;316      }
;;;317    
;;;318      return USB_UNSUPPORT;
;;;319    }
0000ba  bd70              POP      {r4-r6,pc}
                  |L11.188|
0000bc  480c              LDR      r0,|L11.240|
0000be  f890102c          LDRB     r1,[r0,#0x2c]         ;304  ; Device_Property
0000c2  2000              MOVS     r0,#0                 ;304
0000c4  f7fffffe          BL       SetEPRxCount
0000c8  f8d40c00          LDR      r0,[r4,#0xc00]        ;305
0000cc  b280              UXTH     r0,r0                 ;305
0000ce  4030              ANDS     r0,r0,r6              ;305
0000d0  f4805040          EOR      r0,r0,#0x3000         ;305
0000d4  f8c40c00          STR      r0,[r4,#0xc00]        ;305
0000d8  e7ea              B        |L11.176|
                  |L11.218|
0000da  2002              MOVS     r0,#2                 ;318
0000dc  bd70              POP      {r4-r6,pc}
;;;320    
                          ENDP

0000de  0000              DCW      0x0000
                  |L11.224|
                          DCD      pInformation
                  |L11.228|
                          DCD      Device_Table
                  |L11.232|
                          DCD      0x40005000
                  |L11.236|
                          DCD      pUser_Standard_Requests
                  |L11.240|
                          DCD      Device_Property

                          AREA ||i.Standard_GetConfiguration||, CODE, READONLY, ALIGN=2

                  Standard_GetConfiguration PROC
;;;59     *******************************************************************************/
;;;60     u8 *Standard_GetConfiguration(u16 Length)
000000  b510              PUSH     {r4,lr}
;;;61     {
;;;62       if (Length == 0)
;;;63       {
;;;64         pInformation->Ctrl_Info.Usb_wLength =
000002  4c07              LDR      r4,|L12.32|
000004  b130              CBZ      r0,|L12.20|
;;;65           sizeof(pInformation->Current_Configuration);
;;;66         return 0;
;;;67       }
;;;68       pUser_Standard_Requests->User_GetConfiguration();
000006  4807              LDR      r0,|L12.36|
000008  6800              LDR      r0,[r0,#0]  ; pUser_Standard_Requests
00000a  6800              LDR      r0,[r0,#0]
00000c  4780              BLX      r0
;;;69       return (u8 *)&pInformation->Current_Configuration;
00000e  6820              LDR      r0,[r4,#0]  ; pInformation
000010  300a              ADDS     r0,r0,#0xa
;;;70     }
000012  bd10              POP      {r4,pc}
                  |L12.20|
000014  6821              LDR      r1,[r4,#0]            ;64  ; pInformation
000016  2001              MOVS     r0,#1                 ;64
000018  8208              STRH     r0,[r1,#0x10]         ;64
00001a  2000              MOVS     r0,#0                 ;66
00001c  bd10              POP      {r4,pc}
;;;71     
                          ENDP

00001e  0000              DCW      0x0000
                  |L12.32|
                          DCD      pInformation
                  |L12.36|
                          DCD      pUser_Standard_Requests

                          AREA ||i.Standard_GetDescriptorData||, CODE, READONLY, ALIGN=2

                  Standard_GetDescriptorData PROC
;;;408    *******************************************************************************/
;;;409    u8 *Standard_GetDescriptorData(u16 Length, ONE_DESCRIPTOR *pDesc)
000000  4a06              LDR      r2,|L13.28|
;;;410    {
;;;411      u32  wOffset;
;;;412    
;;;413      wOffset = pInformation->Ctrl_Info.Usb_wOffset;
;;;414      if (Length == 0)
000002  2800              CMP      r0,#0
000004  6812              LDR      r2,[r2,#0]            ;413  ; pInformation
000006  8a50              LDRH     r0,[r2,#0x12]         ;413
000008  d002              BEQ      |L13.16|
;;;415      {
;;;416        pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
;;;417        return 0;
;;;418      }
;;;419    
;;;420      return pDesc->Descriptor + wOffset;
00000a  6809              LDR      r1,[r1,#0]
00000c  4408              ADD      r0,r0,r1
;;;421    }
00000e  4770              BX       lr
                  |L13.16|
000010  8889              LDRH     r1,[r1,#4]            ;416
000012  1a08              SUBS     r0,r1,r0              ;416
000014  8210              STRH     r0,[r2,#0x10]         ;416
000016  2000              MOVS     r0,#0                 ;417
000018  4770              BX       lr
;;;422    
                          ENDP

00001a  0000              DCW      0x0000
                  |L13.28|
                          DCD      pInformation

                          AREA ||i.Standard_GetInterface||, CODE, READONLY, ALIGN=2

                  Standard_GetInterface PROC
;;;105    *******************************************************************************/
;;;106    u8 *Standard_GetInterface(u16 Length)
000000  b510              PUSH     {r4,lr}
;;;107    {
;;;108      if (Length == 0)
;;;109      {
;;;110        pInformation->Ctrl_Info.Usb_wLength =
000002  4c07              LDR      r4,|L14.32|
000004  b130              CBZ      r0,|L14.20|
;;;111          sizeof(pInformation->Current_AlternateSetting);
;;;112        return 0;
;;;113      }
;;;114      pUser_Standard_Requests->User_GetInterface();
000006  4807              LDR      r0,|L14.36|
000008  6800              LDR      r0,[r0,#0]  ; pUser_Standard_Requests
00000a  6880              LDR      r0,[r0,#8]
00000c  4780              BLX      r0
;;;115      return (u8 *)&pInformation->Current_AlternateSetting;
00000e  6820              LDR      r0,[r4,#0]  ; pInformation
000010  300c              ADDS     r0,r0,#0xc
;;;116    }
000012  bd10              POP      {r4,pc}
                  |L14.20|
000014  6821              LDR      r1,[r4,#0]            ;110  ; pInformation
000016  2001              MOVS     r0,#1                 ;110
000018  8208              STRH     r0,[r1,#0x10]         ;110
00001a  2000              MOVS     r0,#0                 ;112
00001c  bd10              POP      {r4,pc}
;;;117    
                          ENDP

00001e  0000              DCW      0x0000
                  |L14.32|
                          DCD      pInformation
                  |L14.36|
                          DCD      pUser_Standard_Requests

                          AREA ||i.Standard_GetStatus||, CODE, READONLY, ALIGN=2

                  Standard_GetStatus PROC
;;;161    *******************************************************************************/
;;;162    u8 *Standard_GetStatus(u16 Length)
000000  491f              LDR      r1,|L15.128|
;;;163    {
000002  b510              PUSH     {r4,lr}
;;;164      if (Length == 0)
;;;165      {
;;;166        pInformation->Ctrl_Info.Usb_wLength = 2;
000004  6809              LDR      r1,[r1,#0]
000006  b160              CBZ      r0,|L15.34|
;;;167        return 0;
;;;168      }
;;;169    
;;;170      StatusInfo.w = 0;
000008  481e              LDR      r0,|L15.132|
00000a  2200              MOVS     r2,#0
00000c  8002              STRH     r2,[r0,#0]
;;;171      /* Reset Status Information */
;;;172    
;;;173      if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
00000e  780a              LDRB     r2,[r1,#0]
000010  0653              LSLS     r3,r2,#25
000012  d00a              BEQ      |L15.42|
;;;174      {
;;;175        /*Get Device Status */
;;;176        u8 Feature = pInformation->Current_Feature;
;;;177    
;;;178        /* Remote Wakeup enabled */
;;;179        if (ValBit(Feature, 5))
;;;180        {
;;;181          SetBit(StatusInfo0, 1);
;;;182        }
;;;183    
;;;184        /* Self-powered */
;;;185        if (ValBit(Feature, 6))
;;;186        {
;;;187          SetBit(StatusInfo0, 0);
;;;188        }
;;;189        else /* Bus-powered */
;;;190        {
;;;191          ClrBit(StatusInfo0, 0);
;;;192        }
;;;193      }
;;;194      /*Interface Status*/
;;;195      else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
000014  f002027f          AND      r2,r2,#0x7f
000018  2a01              CMP      r2,#1
00001a  d013              BEQ      |L15.68|
;;;196      {
;;;197        return (u8 *)&StatusInfo;
;;;198      }
;;;199      /*Get EndPoint Status*/
;;;200      else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
00001c  2a02              CMP      r2,#2
00001e  d013              BEQ      |L15.72|
000020  e001              B        |L15.38|
                  |L15.34|
000022  2002              MOVS     r0,#2                 ;166
000024  8208              STRH     r0,[r1,#0x10]         ;166
                  |L15.38|
;;;201      {
;;;202        u8 Related_Endpoint;
;;;203        u8 wIndex0 = pInformation->USBwIndex0;
;;;204    
;;;205        Related_Endpoint = (wIndex0 & 0x0f);
;;;206        if (ValBit(wIndex0, 7))
;;;207        {
;;;208          /* IN endpoint */
;;;209          if (_GetTxStallStatus(Related_Endpoint))
;;;210          {
;;;211            SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
;;;212          }
;;;213        }
;;;214        else
;;;215        {
;;;216          /* OUT endpoint */
;;;217          if (_GetRxStallStatus(Related_Endpoint))
;;;218          {
;;;219            SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
;;;220          }
;;;221        }
;;;222    
;;;223      }
;;;224      else
;;;225      {
;;;226        return NULL;
000026  2000              MOVS     r0,#0
;;;227      }
;;;228      pUser_Standard_Requests->User_GetStatus();
;;;229      return (u8 *)&StatusInfo;
;;;230    }
000028  bd10              POP      {r4,pc}
                  |L15.42|
00002a  7a49              LDRB     r1,[r1,#9]            ;176
00002c  068a              LSLS     r2,r1,#26             ;179
00002e  d503              BPL      |L15.56|
000030  7802              LDRB     r2,[r0,#0]            ;181  ; StatusInfo
000032  f0420202          ORR      r2,r2,#2              ;181
000036  7002              STRB     r2,[r0,#0]            ;181
                  |L15.56|
000038  0649              LSLS     r1,r1,#25             ;185
00003a  d412              BMI      |L15.98|
00003c  7801              LDRB     r1,[r0,#0]            ;191  ; StatusInfo
00003e  f00101fe          AND      r1,r1,#0xfe           ;191
000042  e011              B        |L15.104|
                  |L15.68|
000044  480f              LDR      r0,|L15.132|
000046  bd10              POP      {r4,pc}
                  |L15.72|
000048  794a              LDRB     r2,[r1,#5]            ;203
00004a  f002010f          AND      r1,r2,#0xf            ;205
00004e  0613              LSLS     r3,r2,#24             ;206
000050  4a0d              LDR      r2,|L15.136|
000052  eb020181          ADD      r1,r2,r1,LSL #2       ;217
000056  f8d11c00          LDR      r1,[r1,#0xc00]        ;217
00005a  d507              BPL      |L15.108|
00005c  f3c11101          UBFX     r1,r1,#4,#2           ;209
000060  e006              B        |L15.112|
                  |L15.98|
000062  7801              LDRB     r1,[r0,#0]            ;211  ; StatusInfo
000064  f0410101          ORR      r1,r1,#1              ;211
                  |L15.104|
000068  7001              STRB     r1,[r0,#0]            ;211
00006a  e003              B        |L15.116|
                  |L15.108|
00006c  f3c13101          UBFX     r1,r1,#12,#2          ;217
                  |L15.112|
000070  2901              CMP      r1,#1                 ;209
000072  d0f6              BEQ      |L15.98|
                  |L15.116|
000074  4805              LDR      r0,|L15.140|
000076  6800              LDR      r0,[r0,#0]            ;228  ; pUser_Standard_Requests
000078  6900              LDR      r0,[r0,#0x10]         ;228
00007a  4780              BLX      r0                    ;228
00007c  e7e2              B        |L15.68|
;;;231    
                          ENDP

00007e  0000              DCW      0x0000
                  |L15.128|
                          DCD      pInformation
                  |L15.132|
                          DCD      ||.data||
                  |L15.136|
                          DCD      0x40005000
                  |L15.140|
                          DCD      pUser_Standard_Requests

                          AREA ||i.Standard_SetConfiguration||, CODE, READONLY, ALIGN=2

                  Standard_SetConfiguration PROC
;;;80     *******************************************************************************/
;;;81     RESULT Standard_SetConfiguration(void)
000000  480a              LDR      r0,|L16.44|
;;;82     {
000002  b510              PUSH     {r4,lr}
;;;83     
;;;84       if ((pInformation->USBwValue0 <=
000004  490a              LDR      r1,|L16.48|
000006  6800              LDR      r0,[r0,#0]  ; pInformation
000008  784a              LDRB     r2,[r1,#1]  ; Device_Table
00000a  78c1              LDRB     r1,[r0,#3]
00000c  4291              CMP      r1,r2
00000e  d803              BHI      |L16.24|
;;;85           Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
000010  7882              LDRB     r2,[r0,#2]
000012  b90a              CBNZ     r2,|L16.24|
;;;86           && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
000014  8882              LDRH     r2,[r0,#4]
000016  b10a              CBZ      r2,|L16.28|
                  |L16.24|
;;;87       {
;;;88         pInformation->Current_Configuration = pInformation->USBwValue0;
;;;89         pUser_Standard_Requests->User_SetConfiguration();
;;;90         return USB_SUCCESS;
;;;91       }
;;;92       else
;;;93       {
;;;94         return USB_UNSUPPORT;
000018  2002              MOVS     r0,#2
;;;95       }
;;;96     }
00001a  bd10              POP      {r4,pc}
                  |L16.28|
00001c  7281              STRB     r1,[r0,#0xa]          ;88
00001e  4805              LDR      r0,|L16.52|
000020  6800              LDR      r0,[r0,#0]            ;89  ; pUser_Standard_Requests
000022  6840              LDR      r0,[r0,#4]            ;89
000024  4780              BLX      r0                    ;89
000026  2000              MOVS     r0,#0                 ;90
000028  bd10              POP      {r4,pc}
;;;97     
                          ENDP

00002a  0000              DCW      0x0000
                  |L16.44|
                          DCD      pInformation
                  |L16.48|
                          DCD      Device_Table
                  |L16.52|
                          DCD      pUser_Standard_Requests

                          AREA ||i.Standard_SetDeviceFeature||, CODE, READONLY, ALIGN=2

                  Standard_SetDeviceFeature PROC
;;;382    *******************************************************************************/
;;;383    RESULT Standard_SetDeviceFeature(void)
000000  4806              LDR      r0,|L17.28|
;;;384    {
000002  b510              PUSH     {r4,lr}
;;;385      SetBit(pInformation->Current_Feature, 5);
000004  6800              LDR      r0,[r0,#0]  ; pInformation
000006  7a41              LDRB     r1,[r0,#9]
000008  f0410120          ORR      r1,r1,#0x20
00000c  7241              STRB     r1,[r0,#9]
;;;386      pUser_Standard_Requests->User_SetDeviceFeature();
00000e  4804              LDR      r0,|L17.32|
000010  6800              LDR      r0,[r0,#0]  ; pUser_Standard_Requests
000012  69c0              LDR      r0,[r0,#0x1c]
000014  4780              BLX      r0
;;;387      return USB_SUCCESS;
000016  2000              MOVS     r0,#0
;;;388    }
000018  bd10              POP      {r4,pc}
;;;389    
                          ENDP

00001a  0000              DCW      0x0000
                  |L17.28|
                          DCD      pInformation
                  |L17.32|
                          DCD      pUser_Standard_Requests

                          AREA ||i.Standard_SetEndPointFeature||, CODE, READONLY, ALIGN=2

                  Standard_SetEndPointFeature PROC
;;;328    *******************************************************************************/
;;;329    RESULT Standard_SetEndPointFeature(void)
000000  b570              PUSH     {r4-r6,lr}
;;;330    {
;;;331      u32    wIndex0;
;;;332      u32    Related_Endpoint;
;;;333      u32    rEP;
;;;334      u32   Status;
;;;335    
;;;336      wIndex0 = pInformation->USBwIndex0;
000002  481c              LDR      r0,|L18.116|
000004  6803              LDR      r3,[r0,#0]  ; pInformation
;;;337      rEP = wIndex0 & ~0x80;
;;;338      Related_Endpoint = ENDP0 + rEP;
;;;339    
;;;340      if (ValBit(pInformation->USBwIndex0, 7))
;;;341      {
;;;342        /* get Status of endpoint & stall the request if the related_ENdpoint
;;;343        is Disabled*/
;;;344        Status = _GetEPTxStatus(Related_Endpoint);
000006  481c              LDR      r0,|L18.120|
000008  7959              LDRB     r1,[r3,#5]            ;336
00000a  f0210580          BIC      r5,r1,#0x80           ;337
00000e  eb000085          ADD      r0,r0,r5,LSL #2
000012  060c              LSLS     r4,r1,#24             ;340
;;;345      }
;;;346      else
;;;347      {
;;;348        Status = _GetEPRxStatus(Related_Endpoint);
000014  f8d04c00          LDR      r4,[r0,#0xc00]
000018  f0210280          BIC      r2,r1,#0x80           ;337
00001c  d503              BPL      |L18.38|
00001e  f3c41401          UBFX     r4,r4,#4,#2           ;344
000022  0124              LSLS     r4,r4,#4              ;344
000024  e002              B        |L18.44|
                  |L18.38|
000026  f3c43401          UBFX     r4,r4,#12,#2
00002a  0324              LSLS     r4,r4,#12
                  |L18.44|
;;;349      }
;;;350    
;;;351      if (Related_Endpoint >= Device_Table.Total_Endpoint
00002c  4d13              LDR      r5,|L18.124|
00002e  782d              LDRB     r5,[r5,#0]  ; Device_Table
000030  4295              CMP      r5,r2
000032  d90f              BLS      |L18.84|
;;;352          || pInformation->USBwValue != 0 || Status == 0
000034  885a              LDRH     r2,[r3,#2]
000036  b96a              CBNZ     r2,|L18.84|
000038  b164              CBZ      r4,|L18.84|
;;;353          || pInformation->Current_Configuration == 0)
00003a  7a9a              LDRB     r2,[r3,#0xa]
00003c  b152              CBZ      r2,|L18.84|
;;;354      {
;;;355        return USB_UNSUPPORT;
;;;356      }
;;;357      else
;;;358      {
;;;359        if (wIndex0 & 0x80)
00003e  0609              LSLS     r1,r1,#24
;;;360        {
;;;361          /* IN endpoint */
;;;362          _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
;;;363        }
;;;364    
;;;365        else
;;;366        {
;;;367          /* OUT endpoint */
;;;368          _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
000040  f8d01c00          LDR      r1,[r0,#0xc00]
000044  d508              BPL      |L18.88|
000046  f64872bf          MOV      r2,#0x8fbf            ;362
00004a  b289              UXTH     r1,r1                 ;362
00004c  4011              ANDS     r1,r1,r2              ;362
00004e  f0810110          EOR      r1,r1,#0x10           ;362
000052  e007              B        |L18.100|
                  |L18.84|
000054  2002              MOVS     r0,#2                 ;355
;;;369        }
;;;370      }
;;;371      pUser_Standard_Requests->User_SetEndPointFeature();
;;;372      return USB_SUCCESS;
;;;373    }
000056  bd70              POP      {r4-r6,pc}
                  |L18.88|
000058  f64b728f          MOV      r2,#0xbf8f            ;368
00005c  b289              UXTH     r1,r1                 ;368
00005e  4011              ANDS     r1,r1,r2              ;368
000060  f4815180          EOR      r1,r1,#0x1000         ;368
                  |L18.100|
000064  f8c01c00          STR      r1,[r0,#0xc00]        ;362
000068  4805              LDR      r0,|L18.128|
00006a  6800              LDR      r0,[r0,#0]            ;371  ; pUser_Standard_Requests
00006c  6980              LDR      r0,[r0,#0x18]         ;371
00006e  4780              BLX      r0                    ;371
000070  2000              MOVS     r0,#0                 ;372
000072  bd70              POP      {r4-r6,pc}
;;;374    
                          ENDP

                  |L18.116|
                          DCD      pInformation
                  |L18.120|
                          DCD      0x40005000
                  |L18.124|
                          DCD      Device_Table
                  |L18.128|
                          DCD      pUser_Standard_Requests

                          AREA ||i.Standard_SetInterface||, CODE, READONLY, ALIGN=2

                  Standard_SetInterface PROC
;;;126    *******************************************************************************/
;;;127    RESULT Standard_SetInterface(void)
000000  b510              PUSH     {r4,lr}
;;;128    {
;;;129      RESULT Re;
;;;130      /*Test if the specified Interface and Alternate Setting are supported by
;;;131        the application Firmware*/
;;;132      Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
000002  4c0e              LDR      r4,|L19.60|
000004  4a0e              LDR      r2,|L19.64|
000006  6820              LDR      r0,[r4,#0]  ; pInformation
000008  6812              LDR      r2,[r2,#0]  ; pProperty
00000a  78c1              LDRB     r1,[r0,#3]
00000c  6992              LDR      r2,[r2,#0x18]
00000e  7940              LDRB     r0,[r0,#5]
000010  4790              BLX      r2
;;;133    
;;;134      if (pInformation->Current_Configuration != 0)
000012  6821              LDR      r1,[r4,#0]  ; pInformation
000014  7a8a              LDRB     r2,[r1,#0xa]
000016  b122              CBZ      r2,|L19.34|
;;;135      {
;;;136        if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
000018  b918              CBNZ     r0,|L19.34|
00001a  7908              LDRB     r0,[r1,#4]
00001c  b908              CBNZ     r0,|L19.34|
;;;137            || (pInformation->USBwValue1 != 0))
00001e  7888              LDRB     r0,[r1,#2]
000020  b108              CBZ      r0,|L19.38|
                  |L19.34|
;;;138        {
;;;139          return  USB_UNSUPPORT;
;;;140        }
;;;141        else if (Re == USB_SUCCESS)
;;;142        {
;;;143          pUser_Standard_Requests->User_SetInterface();
;;;144          pInformation->Current_Interface = pInformation->USBwIndex0;
;;;145          pInformation->Current_AlternateSetting = pInformation->USBwValue0;
;;;146          return USB_SUCCESS;
;;;147        }
;;;148    
;;;149      }
;;;150    
;;;151      return USB_UNSUPPORT;
000022  2002              MOVS     r0,#2
;;;152    }
000024  bd10              POP      {r4,pc}
                  |L19.38|
000026  4807              LDR      r0,|L19.68|
000028  6800              LDR      r0,[r0,#0]            ;143  ; pUser_Standard_Requests
00002a  68c0              LDR      r0,[r0,#0xc]          ;143
00002c  4780              BLX      r0                    ;143
00002e  6820              LDR      r0,[r4,#0]            ;144  ; pInformation
000030  7941              LDRB     r1,[r0,#5]            ;144
000032  72c1              STRB     r1,[r0,#0xb]          ;144
000034  78c1              LDRB     r1,[r0,#3]            ;145
000036  7301              STRB     r1,[r0,#0xc]          ;145
000038  2000              MOVS     r0,#0                 ;146
00003a  bd10              POP      {r4,pc}
;;;153    
                          ENDP

                  |L19.60|
                          DCD      pInformation
                  |L19.64|
                          DCD      pProperty
                  |L19.68|
                          DCD      pUser_Standard_Requests

                          AREA ||.data||, DATA, ALIGN=1

                  StatusInfo
000000  0000              DCB      0x00,0x00
