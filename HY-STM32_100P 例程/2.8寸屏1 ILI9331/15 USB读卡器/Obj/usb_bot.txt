; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Obj\usb_bot.o --depend=.\Obj\usb_bot.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\usb_library\inc -I..\USB_test -I.\FWlib\inc -I.\user -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Obj\usb_bot.crf usb_library\src\usb_bot.c]
                          THUMB

                          AREA ||i.Bot_Abort||, CODE, READONLY, ALIGN=1

                  Bot_Abort PROC
;;;296    *******************************************************************************/
;;;297    void Bot_Abort(u8 Direction)
000000  b510              PUSH     {r4,lr}
;;;298    {
;;;299      switch (Direction)
000002  b178              CBZ      r0,|L1.36|
;;;300      {
;;;301        case DIR_IN :
;;;302          SetEPTxStatus(ENDP1, EP_TX_STALL);
;;;303          break;
;;;304        case DIR_OUT :
;;;305          SetEPRxStatus(ENDP2, EP_RX_STALL);
000004  f44f5480          MOV      r4,#0x1000
000008  2801              CMP      r0,#1                 ;299
00000a  d005              BEQ      |L1.24|
00000c  2802              CMP      r0,#2                 ;299
00000e  d10f              BNE      |L1.48|
;;;306          break;
;;;307        case BOTH_DIR :
;;;308          SetEPTxStatus(ENDP1, EP_TX_STALL);
000010  2110              MOVS     r1,#0x10
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       SetEPTxStatus
                  |L1.24|
000018  4621              MOV      r1,r4                 ;305
00001a  e8bd4010          POP      {r4,lr}               ;305
00001e  2002              MOVS     r0,#2                 ;305
000020  f7ffbffe          B.W      SetEPRxStatus
                  |L1.36|
000024  2110              MOVS     r1,#0x10              ;302
000026  e8bd4010          POP      {r4,lr}               ;302
00002a  2001              MOVS     r0,#1                 ;302
00002c  f7ffbffe          B.W      SetEPTxStatus
                  |L1.48|
;;;309          SetEPRxStatus(ENDP2, EP_RX_STALL);
;;;310          break;
;;;311        default:
;;;312          break;
;;;313      }
;;;314    }
000030  bd10              POP      {r4,pc}
;;;315    
                          ENDP


                          AREA ||i.CBW_Decode||, CODE, READONLY, ALIGN=2

                  CBW_Decode PROC
;;;117    *******************************************************************************/
;;;118    void CBW_Decode(void)
000000  b510              PUSH     {r4,lr}
;;;119    {
;;;120      u32 Counter;
;;;121    
;;;122      for (Counter = 0; Counter < Data_Len; Counter++)
000002  4954              LDR      r1,|L2.340|
;;;123      {
;;;124        *((u8 *)&CBW + Counter) = Bulk_Data_Buff[Counter];
000004  4c54              LDR      r4,|L2.344|
000006  2000              MOVS     r0,#0                 ;122
000008  8849              LDRH     r1,[r1,#2]            ;122  ; Data_Len
00000a  f1a40240          SUB      r2,r4,#0x40
00000e  e002              B        |L2.22|
                  |L2.16|
000010  5c13              LDRB     r3,[r2,r0]
000012  5423              STRB     r3,[r4,r0]
000014  1c40              ADDS     r0,r0,#1              ;122
                  |L2.22|
000016  460b              MOV      r3,r1                 ;122
000018  4288              CMP      r0,r1                 ;122
00001a  d3f9              BCC      |L2.16|
;;;125      }
;;;126      CSW.dTag = CBW.dTag;
00001c  484e              LDR      r0,|L2.344|
00001e  6862              LDR      r2,[r4,#4]  ; CBW
000020  3020              ADDS     r0,r0,#0x20
;;;127      CSW.dDataResidue = CBW.dDataLength;
;;;128      if (Data_Len != BOT_CBW_PACKET_LENGTH)
000022  2b1f              CMP      r3,#0x1f
000024  6042              STR      r2,[r0,#4]            ;127  ; CSW
000026  68a2              LDR      r2,[r4,#8]            ;127  ; CBW
000028  6082              STR      r2,[r0,#8]  ; CSW
00002a  d006              BEQ      |L2.58|
;;;129      {
;;;130        Bot_Abort(BOTH_DIR);
00002c  2002              MOVS     r0,#2
00002e  f7fffffe          BL       Bot_Abort
;;;131        /* reset the CBW.dSignature to desible the clear feature until receiving a Mass storage reset*/
;;;132        CBW.dSignature = 0;
000032  2000              MOVS     r0,#0
;;;133        Set_Scsi_Sense_Data(ILLEGAL_REQUEST, PARAMETER_LIST_LENGTH_ERROR);
000034  211a              MOVS     r1,#0x1a
;;;134        Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
;;;135        return;
000036  6020              STR      r0,[r4,#0]  ; CBW
000038  e00d              B        |L2.86|
                  |L2.58|
;;;136      }
;;;137    
;;;138      if (CBW.dSignature == BOT_CBW_SIGNATURE)
00003a  4948              LDR      r1,|L2.348|
00003c  6820              LDR      r0,[r4,#0]  ; CBW
00003e  4288              CMP      r0,r1
000040  d14f              BNE      |L2.226|
;;;139      {
;;;140        /* Valid CBW */
;;;141        if ((CBW.bLUN != 0) || (CBW.bCBLength < 1) || (CBW.bCBLength > 16))
000042  7b60              LDRB     r0,[r4,#0xd]  ; CBW
000044  b918              CBNZ     r0,|L2.78|
000046  7ba0              LDRB     r0,[r4,#0xe]  ; CBW
000048  b108              CBZ      r0,|L2.78|
00004a  2810              CMP      r0,#0x10
00004c  d90c              BLS      |L2.104|
                  |L2.78|
;;;142        {
;;;143          Bot_Abort(BOTH_DIR);
00004e  2002              MOVS     r0,#2
000050  f7fffffe          BL       Bot_Abort
;;;144          Set_Scsi_Sense_Data(ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
000054  2124              MOVS     r1,#0x24
                  |L2.86|
;;;145          Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
;;;146        }
;;;147        else
;;;148        {
;;;149          switch (CBW.CB[0])
;;;150          {
;;;151            case SCSI_REQUEST_SENSE:
;;;152              SCSI_RequestSense_Cmd ();
;;;153              break;
;;;154            case SCSI_INQUIRY:
;;;155              SCSI_Inquiry_Cmd();
;;;156              break;
;;;157            case SCSI_START_STOP_UNIT:
;;;158              SCSI_Start_Stop_Unit_Cmd();
;;;159            case SCSI_ALLOW_MEDIUM_REMOVAL:
;;;160              SCSI_Start_Stop_Unit_Cmd();
;;;161              break;
;;;162            case SCSI_MODE_SENSE6:
;;;163              SCSI_ModeSense6_Cmd ();
;;;164              break;
;;;165            case SCSI_MODE_SENSE10:
;;;166              SCSI_ModeSense10_Cmd ();
;;;167              break;
;;;168            case SCSI_READ_FORMAT_CAPACITIES:
;;;169              SCSI_ReadFormatCapacity_Cmd();
;;;170              break;
;;;171            case SCSI_READ_CAPACITY10:
;;;172              SCSI_ReadCapacity10_Cmd();
;;;173              break;
;;;174            case SCSI_TEST_UNIT_READY:
;;;175              SCSI_TestUnitReady_Cmd();
;;;176              break;
;;;177            case SCSI_READ10:
;;;178              SCSI_Read10_Cmd();
;;;179              break;
;;;180            case SCSI_WRITE10:
;;;181              SCSI_Write10_Cmd();
;;;182              break;
;;;183            case SCSI_VERIFY10:
;;;184              SCSI_Verify10_Cmd();
;;;185              break;
;;;186              /*Unsupported command*/
;;;187    
;;;188            case SCSI_MODE_SELECT10:
;;;189              SCSI_Mode_Select10_Cmd();
;;;190              break;
;;;191            case SCSI_MODE_SELECT6:
;;;192              SCSI_Mode_Select6_Cmd();
;;;193              break;
;;;194            case SCSI_FORMAT_UNIT:
;;;195              SCSI_FormatUnit_Cmd();
;;;196              break;
;;;197            case SCSI_SEND_DIAGNOSTIC:
;;;198              SCSI_Send_Diagnostic_Cmd();
;;;199              break;
;;;200            case SCSI_READ6:
;;;201              SCSI_Read6_Cmd();
;;;202              break;
;;;203            case SCSI_READ12:
;;;204              SCSI_Read12_Cmd();
;;;205              break;
;;;206            case SCSI_READ16:
;;;207              SCSI_Read16_Cmd();
;;;208              break;
;;;209            case SCSI_READ_CAPACITY16:
;;;210              SCSI_READ_CAPACITY16_Cmd();
;;;211              break;
;;;212            case SCSI_WRITE6:
;;;213              SCSI_Write6_Cmd();
;;;214              break;
;;;215            case SCSI_WRITE12:
;;;216              SCSI_Write12_Cmd();
;;;217              break;
;;;218            case SCSI_WRITE16:
;;;219              SCSI_Write16_Cmd();
;;;220              break;
;;;221            case SCSI_VERIFY12:
;;;222              SCSI_Verify12_Cmd();
;;;223              break;
;;;224            case SCSI_VERIFY16:
;;;225              SCSI_Verify16_Cmd();
;;;226              break;
;;;227    
;;;228            default:
;;;229            {
;;;230              Bot_Abort(BOTH_DIR);
;;;231              Set_Scsi_Sense_Data(ILLEGAL_REQUEST, INVALID_COMMAND);
;;;232              Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
;;;233            }
;;;234          }
;;;235        }
;;;236      }
;;;237      else
;;;238      {
;;;239        /* Invalid CBW */
;;;240        Bot_Abort(BOTH_DIR);
;;;241        Set_Scsi_Sense_Data(ILLEGAL_REQUEST, INVALID_COMMAND);
000056  2005              MOVS     r0,#5
000058  f7fffffe          BL       Set_Scsi_Sense_Data
;;;242        Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
00005c  2100              MOVS     r1,#0
00005e  e8bd4010          POP      {r4,lr}
000062  2001              MOVS     r0,#1
000064  f7ffbffe          B.W      Set_CSW
                  |L2.104|
000068  7be0              LDRB     r0,[r4,#0xf]          ;149  ; CBW
00006a  2825              CMP      r0,#0x25              ;149
00006c  d059              BEQ      |L2.290|
00006e  dc1a              BGT      |L2.166|
000070  2815              CMP      r0,#0x15              ;149
000072  d06a              BEQ      |L2.330|
000074  dc0d              BGT      |L2.146|
000076  2808              CMP      r0,#8                 ;149
000078  d067              BEQ      |L2.330|
00007a  dc05              BGT      |L2.136|
00007c  b3b0              CBZ      r0,|L2.236|
00007e  2803              CMP      r0,#3                 ;149
000080  d035              BEQ      |L2.238|
000082  2804              CMP      r0,#4                 ;149
000084  d12d              BNE      |L2.226|
000086  e060              B        |L2.330|
                  |L2.136|
000088  280a              CMP      r0,#0xa               ;149
00008a  d05e              BEQ      |L2.330|
00008c  2812              CMP      r0,#0x12              ;149
00008e  d128              BNE      |L2.226|
000090  e031              B        |L2.246|
                  |L2.146|
000092  381a              SUBS     r0,r0,#0x1a           ;149
000094  280a              CMP      r0,#0xa               ;149
000096  d224              BCS      |L2.226|
000098  e8dff000          TBB      [pc,r0]               ;149
00009c  37312357          DCB      0x37,0x31,0x23,0x57
0000a0  33232323          DCB      0x33,0x23,0x23,0x23
0000a4  233f              DCB      0x23,0x3f
                  |L2.166|
0000a6  288a              CMP      r0,#0x8a              ;149
0000a8  d04f              BEQ      |L2.330|
0000aa  dc0e              BGT      |L2.202|
0000ac  2855              CMP      r0,#0x55              ;149
0000ae  d04c              BEQ      |L2.330|
0000b0  dc06              BGT      |L2.192|
0000b2  2828              CMP      r0,#0x28              ;149
0000b4  d03d              BEQ      |L2.306|
0000b6  282a              CMP      r0,#0x2a              ;149
0000b8  d03f              BEQ      |L2.314|
0000ba  282f              CMP      r0,#0x2f              ;149
0000bc  d111              BNE      |L2.226|
0000be  e040              B        |L2.322|
                  |L2.192|
0000c0  285a              CMP      r0,#0x5a              ;149
0000c2  d026              BEQ      |L2.274|
0000c4  2888              CMP      r0,#0x88              ;149
0000c6  d10c              BNE      |L2.226|
0000c8  e03f              B        |L2.330|
                  |L2.202|
0000ca  28a8              CMP      r0,#0xa8              ;149
0000cc  d03d              BEQ      |L2.330|
0000ce  dc04              BGT      |L2.218|
0000d0  288f              CMP      r0,#0x8f              ;149
0000d2  d03a              BEQ      |L2.330|
0000d4  289e              CMP      r0,#0x9e              ;149
0000d6  d104              BNE      |L2.226|
0000d8  e037              B        |L2.330|
                  |L2.218|
0000da  28aa              CMP      r0,#0xaa              ;149
0000dc  d035              BEQ      |L2.330|
0000de  28af              CMP      r0,#0xaf              ;149
0000e0  d033              BEQ      |L2.330|
                  |L2.226|
0000e2  2002              MOVS     r0,#2                 ;240
0000e4  f7fffffe          BL       Bot_Abort
0000e8  2120              MOVS     r1,#0x20              ;241
0000ea  e7b4              B        |L2.86|
                  |L2.236|
0000ec  e01d              B        |L2.298|
                  |L2.238|
0000ee  e8bd4010          POP      {r4,lr}               ;152
0000f2  f7ffbffe          B.W      SCSI_RequestSense_Cmd
                  |L2.246|
0000f6  e8bd4010          POP      {r4,lr}               ;155
0000fa  f7ffbffe          B.W      SCSI_Inquiry_Cmd
0000fe  f7fffffe          BL       SCSI_Start_Stop_Unit_Cmd
000102  e8bd4010          POP      {r4,lr}               ;160
000106  f7ffbffe          B.W      SCSI_Start_Stop_Unit_Cmd
00010a  e8bd4010          POP      {r4,lr}               ;163
00010e  f7ffbffe          B.W      SCSI_ModeSense6_Cmd
                  |L2.274|
000112  e8bd4010          POP      {r4,lr}               ;166
000116  f7ffbffe          B.W      SCSI_ModeSense10_Cmd
00011a  e8bd4010          POP      {r4,lr}               ;169
00011e  f7ffbffe          B.W      SCSI_ReadFormatCapacity_Cmd
                  |L2.290|
000122  e8bd4010          POP      {r4,lr}               ;172
000126  f7ffbffe          B.W      SCSI_ReadCapacity10_Cmd
                  |L2.298|
00012a  e8bd4010          POP      {r4,lr}               ;175
00012e  f7ffbffe          B.W      SCSI_Valid_Cmd
                  |L2.306|
000132  e8bd4010          POP      {r4,lr}               ;178
000136  f7ffbffe          B.W      SCSI_Read10_Cmd
                  |L2.314|
00013a  e8bd4010          POP      {r4,lr}               ;181
00013e  f7ffbffe          B.W      SCSI_Write10_Cmd
                  |L2.322|
000142  e8bd4010          POP      {r4,lr}               ;184
000146  f7ffbffe          B.W      SCSI_Verify10_Cmd
                  |L2.330|
00014a  e8bd4010          POP      {r4,lr}               ;225
00014e  f7ffbffe          B.W      SCSI_Invalid_Cmd
;;;243      }
;;;244    }
;;;245    
                          ENDP

000152  0000              DCW      0x0000
                  |L2.340|
                          DCD      ||.data||
                  |L2.344|
                          DCD      ||.bss||+0x40
                  |L2.348|
                          DCD      0x43425355

                          AREA ||i.Mass_Storage_In||, CODE, READONLY, ALIGN=2

                  Mass_Storage_In PROC
;;;44     *******************************************************************************/
;;;45     void Mass_Storage_In (void)
000000  4811              LDR      r0,|L3.72|
;;;46     {
000002  b510              PUSH     {r4,lr}
;;;47       switch (Bot_State)
000004  7801              LDRB     r1,[r0,#0]  ; Bot_State
000006  2902              CMP      r1,#2
000008  d00a              BEQ      |L3.32|
;;;48       {
;;;49         case BOT_CSW_Send:
;;;50         case BOT_ERROR:
;;;51           Bot_State = BOT_IDLE;
;;;52           SetEPRxStatus(ENDP2, EP_RX_VALID);/* enable the Endpoint to recive the next cmd*/
00000a  f44f5440          MOV      r4,#0x3000
00000e  2903              CMP      r1,#3                 ;47
000010  d00e              BEQ      |L3.48|
000012  2904              CMP      r1,#4                 ;47
000014  d001              BEQ      |L3.26|
000016  2905              CMP      r1,#5                 ;47
000018  d114              BNE      |L3.68|
                  |L3.26|
00001a  2100              MOVS     r1,#0                 ;51
00001c  7001              STRB     r1,[r0,#0]            ;51
;;;53           break;
00001e  e00b              B        |L3.56|
                  |L3.32|
;;;54         case BOT_DATA_IN:
;;;55           switch (CBW.CB[0])
000020  480a              LDR      r0,|L3.76|
000022  7bc0              LDRB     r0,[r0,#0xf]  ; CBW
000024  2828              CMP      r0,#0x28
000026  d10d              BNE      |L3.68|
;;;56           {
;;;57             case SCSI_READ10:
;;;58               SCSI_Read10_Cmd();
000028  e8bd4010          POP      {r4,lr}
00002c  f7ffbffe          B.W      SCSI_Read10_Cmd
                  |L3.48|
;;;59               break;
;;;60           }
;;;61           break;
;;;62         case BOT_DATA_IN_LAST:
;;;63           Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
000030  2101              MOVS     r1,#1
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       Set_CSW
                  |L3.56|
;;;64           SetEPRxStatus(ENDP2, EP_RX_VALID);
000038  4621              MOV      r1,r4
00003a  e8bd4010          POP      {r4,lr}
00003e  2002              MOVS     r0,#2
000040  f7ffbffe          B.W      SetEPRxStatus
                  |L3.68|
;;;65           break;
;;;66     
;;;67         default:
;;;68           break;
;;;69       }
;;;70     }
000044  bd10              POP      {r4,pc}
;;;71     
                          ENDP

000046  0000              DCW      0x0000
                  |L3.72|
                          DCD      ||.data||
                  |L3.76|
                          DCD      ||.bss||+0x40

                          AREA ||i.Mass_Storage_Out||, CODE, READONLY, ALIGN=2

                  Mass_Storage_Out PROC
;;;78     *******************************************************************************/
;;;79     void Mass_Storage_Out (void)
000000  b570              PUSH     {r4-r6,lr}
;;;80     {
;;;81       u8 CMD;
;;;82       CMD = CBW.CB[0];
000002  4815              LDR      r0,|L4.88|
000004  7bc4              LDRB     r4,[r0,#0xf]  ; CBW
;;;83       Data_Len = GetEPRxCount(ENDP2);
000006  2002              MOVS     r0,#2
000008  f7fffffe          BL       GetEPRxCount
00000c  4d13              LDR      r5,|L4.92|
00000e  4602              MOV      r2,r0
;;;84     
;;;85       PMAToUserBufferCopy(Bulk_Data_Buff, ENDP2_RXADDR, Data_Len);
000010  21d8              MOVS     r1,#0xd8
000012  8068              STRH     r0,[r5,#2]            ;83
000014  4810              LDR      r0,|L4.88|
000016  3840              SUBS     r0,r0,#0x40
000018  f7fffffe          BL       PMAToUserBufferCopy
;;;86     
;;;87       switch (Bot_State)
00001c  7828              LDRB     r0,[r5,#0]  ; Bot_State
00001e  b118              CBZ      r0,|L4.40|
000020  2801              CMP      r0,#1
000022  d005              BEQ      |L4.48|
;;;88       {
;;;89         case BOT_IDLE:
;;;90           CBW_Decode();
;;;91           break;
;;;92         case BOT_DATA_OUT:
;;;93           if (CMD == SCSI_WRITE10)
;;;94           {
;;;95             SCSI_Write10_Cmd();
;;;96             break;
;;;97           }
;;;98           Bot_Abort(DIR_OUT);
;;;99           Set_Scsi_Sense_Data(ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
;;;100          Set_CSW (CSW_PHASE_ERROR, SEND_CSW_DISABLE);
;;;101          break;
;;;102        default:
;;;103          Bot_Abort(BOTH_DIR);
000024  2002              MOVS     r0,#2
;;;104          Set_Scsi_Sense_Data(ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
;;;105          Set_CSW (CSW_PHASE_ERROR, SEND_CSW_DISABLE);
;;;106          break;
000026  e006              B        |L4.54|
                  |L4.40|
000028  e8bd4070          POP      {r4-r6,lr}            ;90
00002c  f7ffbffe          B.W      CBW_Decode
                  |L4.48|
000030  2c2a              CMP      r4,#0x2a              ;93
000032  d00c              BEQ      |L4.78|
000034  2001              MOVS     r0,#1                 ;98
                  |L4.54|
000036  f7fffffe          BL       Bot_Abort
00003a  2124              MOVS     r1,#0x24              ;104
00003c  2005              MOVS     r0,#5                 ;104
00003e  f7fffffe          BL       Set_Scsi_Sense_Data
000042  e8bd4070          POP      {r4-r6,lr}            ;105
000046  2100              MOVS     r1,#0                 ;105
000048  2002              MOVS     r0,#2                 ;105
00004a  f7ffbffe          B.W      Set_CSW
                  |L4.78|
00004e  e8bd4070          POP      {r4-r6,lr}            ;95
000052  f7ffbffe          B.W      SCSI_Write10_Cmd
;;;107      }
;;;108    }
;;;109    
                          ENDP

000056  0000              DCW      0x0000
                  |L4.88|
                          DCD      ||.bss||+0x40
                  |L4.92|
                          DCD      ||.data||

                          AREA ||i.Set_CSW||, CODE, READONLY, ALIGN=2

                  Set_CSW PROC
;;;272    *******************************************************************************/
;;;273    void Set_CSW (u8 CSW_Status, u8 Send_Permission)
000000  b510              PUSH     {r4,lr}
;;;274    {
000002  460c              MOV      r4,r1
;;;275      CSW.dSignature = BOT_CSW_SIGNATURE;
000004  490e              LDR      r1,|L5.64|
000006  4a0d              LDR      r2,|L5.60|
;;;276      CSW.bStatus = CSW_Status;
000008  600a              STR      r2,[r1,#0]  ; CSW
00000a  7308              STRB     r0,[r1,#0xc]
;;;277    
;;;278      UserToPMABufferCopy(((u8 *)& CSW), ENDP1_TXADDR, CSW_DATA_LENGTH);
00000c  220d              MOVS     r2,#0xd
00000e  2198              MOVS     r1,#0x98
000010  480b              LDR      r0,|L5.64|
000012  f7fffffe          BL       UserToPMABufferCopy
;;;279    
;;;280      SetEPTxCount(ENDP1, CSW_DATA_LENGTH);
000016  210d              MOVS     r1,#0xd
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       SetEPTxCount
;;;281      Bot_State = BOT_ERROR;
00001e  4809              LDR      r0,|L5.68|
000020  2105              MOVS     r1,#5
;;;282      if (Send_Permission)
000022  2c00              CMP      r4,#0
000024  7001              STRB     r1,[r0,#0]            ;281
000026  d007              BEQ      |L5.56|
;;;283      {
;;;284        Bot_State = BOT_CSW_Send;
000028  2104              MOVS     r1,#4
00002a  7001              STRB     r1,[r0,#0]
;;;285        SetEPTxStatus(ENDP1, EP_TX_VALID);
00002c  2130              MOVS     r1,#0x30
00002e  e8bd4010          POP      {r4,lr}
000032  2001              MOVS     r0,#1
000034  f7ffbffe          B.W      SetEPTxStatus
                  |L5.56|
;;;286      }
;;;287    
;;;288    }
000038  bd10              POP      {r4,pc}
;;;289    
                          ENDP

00003a  0000              DCW      0x0000
                  |L5.60|
                          DCD      0x53425355
                  |L5.64|
                          DCD      ||.bss||+0x60
                  |L5.68|
                          DCD      ||.data||

                          AREA ||i.Transfer_Data_Request||, CODE, READONLY, ALIGN=2

                  Transfer_Data_Request PROC
;;;253    *******************************************************************************/
;;;254    void Transfer_Data_Request(u8* Data_Pointer, u16 Data_Len)
000000  b510              PUSH     {r4,lr}
;;;255    {
000002  460c              MOV      r4,r1
;;;256      UserToPMABufferCopy(Data_Pointer, ENDP1_TXADDR, Data_Len);
000004  460a              MOV      r2,r1
000006  2198              MOVS     r1,#0x98
000008  f7fffffe          BL       UserToPMABufferCopy
;;;257    
;;;258      SetEPTxCount(ENDP1, Data_Len);
00000c  4621              MOV      r1,r4
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       SetEPTxCount
;;;259      SetEPTxStatus(ENDP1, EP_TX_VALID);
000014  2130              MOVS     r1,#0x30
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       SetEPTxStatus
;;;260      Bot_State = BOT_DATA_IN_LAST;
00001c  4904              LDR      r1,|L6.48|
00001e  2003              MOVS     r0,#3
000020  7008              STRB     r0,[r1,#0]
;;;261      CSW.dDataResidue -= Data_Len;
000022  4804              LDR      r0,|L6.52|
000024  6881              LDR      r1,[r0,#8]  ; CSW
000026  1b09              SUBS     r1,r1,r4
;;;262      CSW.bStatus = CSW_CMD_PASSED;
000028  6081              STR      r1,[r0,#8]  ; CSW
00002a  2100              MOVS     r1,#0
00002c  7301              STRB     r1,[r0,#0xc]
;;;263    }
00002e  bd10              POP      {r4,pc}
;;;264    
                          ENDP

                  |L6.48|
                          DCD      ||.data||
                  |L6.52|
                          DCD      ||.bss||+0x60

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Bulk_Data_Buff
                          %        64
                  ||CBW||
                          %        32
                  ||CSW||
                          %        16

                          AREA ||.data||, DATA, ALIGN=1

                  Bot_State
000000  0000              DCB      0x00,0x00
                  Data_Len
000002  0000              DCB      0x00,0x00
