; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Obj\memory.o --depend=.\Obj\memory.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\usb_library\inc -I..\USB_test -I.\FWlib\inc -I.\user -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Obj\memory.crf usb_library\src\memory.c]
                          THUMB

                          AREA ||i.Address_Management_Test||, CODE, READONLY, ALIGN=2

                  Address_Management_Test PROC
;;;163    *******************************************************************************/
;;;164    bool Address_Management_Test(u8 Cmd)
000000  b570              PUSH     {r4-r6,lr}
;;;165    {
000002  4604              MOV      r4,r0
;;;166      vu32 temp1;
;;;167      vu32 temp2;
;;;168      GPIO_SetBits(GPIOB, GPIO_Pin_5);
000004  2120              MOVS     r1,#0x20
000006  481d              LDR      r0,|L1.124|
000008  f7fffffe          BL       GPIO_SetBits
;;;169      /* Logical Block Address of First Block */
;;;170      temp1 = (CBW.CB[2] << 24) |
00000c  4a1c              LDR      r2,|L1.128|
;;;171              (CBW.CB[3] << 16) |
;;;172              (CBW.CB[4] <<  8) |
;;;173              (CBW.CB[5] <<  0);
;;;174      /* Number of Blocks to transfer */
;;;175      temp2 = (CBW.CB[7] <<  8) |
;;;176              (CBW.CB[8] <<  0);
;;;177    
;;;178      Memory_Offset = temp1 * Mass_Block_Size;
00000e  4b1d              LDR      r3,|L1.132|
000010  f8d20011          LDR      r0,[r2,#0x11]         ;170  ; CBW
000014  7d11              LDRB     r1,[r2,#0x14]         ;170  ; CBW
000016  ba00              REV      r0,r0                 ;170
000018  f02000ff          BIC      r0,r0,#0xff           ;170
00001c  4308              ORRS     r0,r0,r1              ;170
00001e  681d              LDR      r5,[r3,#0]  ; Mass_Block_Size
000020  4b19              LDR      r3,|L1.136|
000022  8ad1              LDRH     r1,[r2,#0x16]         ;175  ; CBW
000024  4368              MULS     r0,r5,r0
000026  ba49              REV16    r1,r1                 ;175
000028  6098              STR      r0,[r3,#8]  ; Memory_Offset
;;;179      Transfer_Length = temp2 * Mass_Block_Size;
00002a  4369              MULS     r1,r5,r1
;;;180    
;;;181      if ((Memory_Offset + Transfer_Length) > Mass_Memory_Size)
00002c  60d9              STR      r1,[r3,#0xc]  ; Transfer_Length
00002e  6898              LDR      r0,[r3,#8]  ; Memory_Offset
000030  4b16              LDR      r3,|L1.140|
000032  4408              ADD      r0,r0,r1
000034  681b              LDR      r3,[r3,#0]  ; Mass_Memory_Size
000036  4298              CMP      r0,r3
000038  d909              BLS      |L1.78|
;;;182      {
;;;183        if (Cmd == SCSI_WRITE10)
00003a  2c2a              CMP      r4,#0x2a
00003c  d102              BNE      |L1.68|
;;;184        {
;;;185          Bot_Abort(BOTH_DIR);
00003e  2002              MOVS     r0,#2
000040  f7fffffe          BL       Bot_Abort
                  |L1.68|
;;;186        }
;;;187        Bot_Abort(DIR_IN);
000044  2000              MOVS     r0,#0
000046  f7fffffe          BL       Bot_Abort
;;;188        Set_Scsi_Sense_Data(ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
00004a  2121              MOVS     r1,#0x21
;;;189        Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
;;;190        return (FALSE);
00004c  e009              B        |L1.98|
                  |L1.78|
;;;191      }
;;;192    
;;;193    
;;;194      if (CBW.dDataLength != Transfer_Length)
00004e  6890              LDR      r0,[r2,#8]  ; CBW
000050  4288              CMP      r0,r1
000052  d011              BEQ      |L1.120|
;;;195      {
;;;196        if (Cmd == SCSI_WRITE10)
000054  2c2a              CMP      r4,#0x2a
000056  d00d              BEQ      |L1.116|
;;;197        {
;;;198          Bot_Abort(BOTH_DIR);
;;;199        }
;;;200        else
;;;201        {
;;;202          Bot_Abort(DIR_IN);
000058  f05f0000          MOVS.W   r0,#0
                  |L1.92|
00005c  f7fffffe          BL       Bot_Abort
;;;203        }
;;;204        Set_Scsi_Sense_Data(ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
000060  2124              MOVS     r1,#0x24
                  |L1.98|
000062  2005              MOVS     r0,#5
000064  f7fffffe          BL       Set_Scsi_Sense_Data
;;;205        Set_CSW (CSW_CMD_FAILED, SEND_CSW_DISABLE);
000068  2100              MOVS     r1,#0
00006a  2001              MOVS     r0,#1
00006c  f7fffffe          BL       Set_CSW
;;;206        return (FALSE);
000070  2000              MOVS     r0,#0
;;;207      }
;;;208      return (TRUE);
;;;209    }
000072  bd70              POP      {r4-r6,pc}
                  |L1.116|
000074  2002              MOVS     r0,#2                 ;198
000076  e7f1              B        |L1.92|
                  |L1.120|
000078  2001              MOVS     r0,#1                 ;208
00007a  bd70              POP      {r4-r6,pc}
;;;210    
                          ENDP

                  |L1.124|
                          DCD      0x40010c00
                  |L1.128|
                          DCD      ||CBW||
                  |L1.132|
                          DCD      Mass_Block_Size
                  |L1.136|
                          DCD      ||.data||
                  |L1.140|
                          DCD      Mass_Memory_Size

                          AREA ||i.Read_Memory||, CODE, READONLY, ALIGN=2

                  Read_Memory PROC
;;;61     *******************************************************************************/
;;;62     void Read_Memory(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;63     { unsigned int a=0,b=0;	 
;;;64      // GPIO_SetBits(GPIOB, GPIO_Pin_5);
;;;65       if (!Block_Read_count)
000004  4c27              LDR      r4,|L2.164|
000006  2500              MOVS     r5,#0                 ;63
000008  462f              MOV      r7,r5                 ;63
00000a  6820              LDR      r0,[r4,#0]  ; Block_Read_count
;;;66       {	
;;;67         SD_ReadBlock(Memory_Offset,Data_Buffer,512);
;;;68     	b=0; a=0;
;;;69         while(a<512){
;;;70     		Data1_Buffer[a]=(u8) (Data_Buffer[b]);
00000c  4e26              LDR      r6,|L2.168|
00000e  b158              CBZ      r0,|L2.40|
;;;71     		Data1_Buffer[a+1]=(u8) (Data_Buffer[b]>>8);
;;;72     		Data1_Buffer[a+2]=(u8) (Data_Buffer[b]>>16);
;;;73     		Data1_Buffer[a+3]=(u8) (Data_Buffer[b]>>24);
;;;74     		a=a+4;
;;;75     		b++;	
;;;76     	}
;;;77         UserToPMABufferCopy(Data1_Buffer, ENDP1_TXADDR, BULK_MAX_PACKET_SIZE);
;;;78         Block_Read_count = 512 - BULK_MAX_PACKET_SIZE;
;;;79         Block_offset = BULK_MAX_PACKET_SIZE;	 
;;;80     	//printf("\r\n  %d \n" ,Block_Read_count);
;;;81       }
;;;82       else
;;;83       {
;;;84         UserToPMABufferCopy(Data1_Buffer + Block_offset, ENDP1_TXADDR, BULK_MAX_PACKET_SIZE);
000010  6920              LDR      r0,[r4,#0x10]  ; Block_offset
000012  2240              MOVS     r2,#0x40
000014  4430              ADD      r0,r0,r6
000016  2198              MOVS     r1,#0x98
000018  f7fffffe          BL       UserToPMABufferCopy
;;;85         Block_Read_count -= BULK_MAX_PACKET_SIZE;
00001c  6820              LDR      r0,[r4,#0]  ; Block_Read_count
00001e  3840              SUBS     r0,r0,#0x40
000020  6020              STR      r0,[r4,#0]  ; Block_Read_count
;;;86         Block_offset += BULK_MAX_PACKET_SIZE;
000022  6920              LDR      r0,[r4,#0x10]  ; Block_offset
000024  3040              ADDS     r0,r0,#0x40
000026  e020              B        |L2.106|
                  |L2.40|
000028  f44f7800          MOV      r8,#0x200             ;67
00002c  4642              MOV      r2,r8                 ;67
00002e  491f              LDR      r1,|L2.172|
000030  68a0              LDR      r0,[r4,#8]            ;67  ; Memory_Offset
000032  f7fffffe          BL       SD_ReadBlock
000036  4b1d              LDR      r3,|L2.172|
000038  46c4              MOV      r12,r8                ;67
00003a  bf00              NOP                            ;70
                  |L2.60|
00003c  f8530027          LDR      r0,[r3,r7,LSL #2]     ;70
000040  5570              STRB     r0,[r6,r5]            ;70
000042  1971              ADDS     r1,r6,r5              ;71
000044  0a02              LSRS     r2,r0,#8              ;71
000046  704a              STRB     r2,[r1,#1]            ;71
000048  0c02              LSRS     r2,r0,#16             ;72
00004a  0e00              LSRS     r0,r0,#24             ;73
00004c  708a              STRB     r2,[r1,#2]            ;72
00004e  1d2d              ADDS     r5,r5,#4              ;74
000050  1c7f              ADDS     r7,r7,#1              ;75
000052  70c8              STRB     r0,[r1,#3]            ;73
000054  4565              CMP      r5,r12                ;69
000056  d3f1              BCC      |L2.60|
000058  2240              MOVS     r2,#0x40              ;77
00005a  2198              MOVS     r1,#0x98              ;77
00005c  4812              LDR      r0,|L2.168|
00005e  f7fffffe          BL       UserToPMABufferCopy
000062  f44f70e0          MOV      r0,#0x1c0             ;78
000066  6020              STR      r0,[r4,#0]            ;78  ; Block_Read_count
000068  2040              MOVS     r0,#0x40              ;79
                  |L2.106|
00006a  6120              STR      r0,[r4,#0x10]  ; Block_offset
;;;87     	//printf("\r\n  %d \n" ,Block_Read_count);
;;;88       }
;;;89     
;;;90       SetEPTxCount(ENDP1, BULK_MAX_PACKET_SIZE);
00006c  2140              MOVS     r1,#0x40
00006e  2001              MOVS     r0,#1
000070  f7fffffe          BL       SetEPTxCount
;;;91       SetEPTxStatus(ENDP1, EP_TX_VALID);
000074  2130              MOVS     r1,#0x30
000076  2001              MOVS     r0,#1
000078  f7fffffe          BL       SetEPTxStatus
;;;92     
;;;93     
;;;94       Memory_Offset += BULK_MAX_PACKET_SIZE;
00007c  68a0              LDR      r0,[r4,#8]  ; Memory_Offset
00007e  3040              ADDS     r0,r0,#0x40
000080  60a0              STR      r0,[r4,#8]  ; Memory_Offset
;;;95       Transfer_Length -= BULK_MAX_PACKET_SIZE;
000082  68e0              LDR      r0,[r4,#0xc]  ; Transfer_Length
;;;96     
;;;97       CSW.dDataResidue -= BULK_MAX_PACKET_SIZE;
000084  490a              LDR      r1,|L2.176|
000086  3840              SUBS     r0,r0,#0x40           ;95
000088  60e0              STR      r0,[r4,#0xc]  ; Transfer_Length
00008a  688a              LDR      r2,[r1,#8]  ; CSW
00008c  f1a20240          SUB      r2,r2,#0x40
;;;98       //Led_RW_ON();
;;;99     
;;;100      if (Transfer_Length == 0)
000090  608a              STR      r2,[r1,#8]  ; CSW
000092  d105              BNE      |L2.160|
;;;101      {
;;;102        Block_Read_count = 0;
000094  6020              STR      r0,[r4,#0]  ; Block_Read_count
;;;103        Block_offset = 0;
000096  6120              STR      r0,[r4,#0x10]  ; Block_offset
;;;104        Memory_Offset = 0;
000098  60a0              STR      r0,[r4,#8]  ; Memory_Offset
;;;105        Bot_State = BOT_DATA_IN_LAST;
00009a  4906              LDR      r1,|L2.180|
00009c  2003              MOVS     r0,#3
00009e  7008              STRB     r0,[r1,#0]
                  |L2.160|
;;;106        //Led_RW_OFF();
;;;107      }
;;;108    }
0000a0  e8bd81f0          POP      {r4-r8,pc}
;;;109    
                          ENDP

                  |L2.164|
                          DCD      ||.data||
                  |L2.168|
                          DCD      ||.bss||+0x200
                  |L2.172|
                          DCD      ||.bss||
                  |L2.176|
                          DCD      ||CSW||
                  |L2.180|
                          DCD      Bot_State

                          AREA ||i.Write_Memory||, CODE, READONLY, ALIGN=2

                  Write_Memory PROC
;;;116    *******************************************************************************/
;;;117    void Write_Memory(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;118    { unsigned int a=0,b=0;
;;;119      u32 temp =  Counter + 64;
000004  4c29              LDR      r4,|L3.172|
000006  6861              LDR      r1,[r4,#4]  ; Counter
;;;120    
;;;121      //GPIO_SetBits(GPIOB, GPIO_Pin_5);
;;;122      i = 0;
000008  2600              MOVS     r6,#0
00000a  4635              MOV      r5,r6
00000c  3140              ADDS     r1,r1,#0x40           ;119
;;;123      for (; Counter < temp; Counter++)
;;;124      {
;;;125        Data1_Buffer[Counter] = Bulk_Data_Buff[i];
00000e  4828              LDR      r0,|L3.176|
000010  4f28              LDR      r7,|L3.180|
000012  6166              STR      r6,[r4,#0x14]         ;123  ; i
000014  e006              B        |L3.36|
                  |L3.22|
000016  5d7a              LDRB     r2,[r7,r5]
000018  6863              LDR      r3,[r4,#4]  ; Counter
;;;126        i++;
00001a  1c6d              ADDS     r5,r5,#1
00001c  54c2              STRB     r2,[r0,r3]            ;125
00001e  6862              LDR      r2,[r4,#4]            ;123  ; Counter
000020  1c52              ADDS     r2,r2,#1              ;123
000022  6062              STR      r2,[r4,#4]            ;123  ; Counter
                  |L3.36|
000024  6862              LDR      r2,[r4,#4]            ;123  ; Counter
000026  428a              CMP      r2,r1                 ;123
000028  d3f5              BCC      |L3.22|
;;;127      }
;;;128    
;;;129      Memory_Offset += Data_Len;
00002a  6165              STR      r5,[r4,#0x14]  ; i
00002c  68a2              LDR      r2,[r4,#8]  ; Memory_Offset
00002e  f8df8088          LDR      r8,|L3.184|
000032  f8b81000          LDRH     r1,[r8,#0]  ; Data_Len
000036  440a              ADD      r2,r2,r1
000038  60a2              STR      r2,[r4,#8]  ; Memory_Offset
;;;130      Transfer_Length -= Data_Len;
00003a  68e2              LDR      r2,[r4,#0xc]  ; Transfer_Length
00003c  1a51              SUBS     r1,r2,r1
;;;131    
;;;132      if (!(Transfer_Length % 512))
00003e  60e1              STR      r1,[r4,#0xc]  ; Transfer_Length
000040  05c9              LSLS     r1,r1,#23
000042  d118              BNE      |L3.118|
;;;133      {
;;;134        Counter = 0;
000044  6066              STR      r6,[r4,#4]  ; Counter
;;;135    	b=0; a=0;
000046  2300              MOVS     r3,#0
;;;136    	while(a<512){
;;;137    		Data_Buffer[b]=((u32) (Data1_Buffer[a+3])<<24)|((u32) (Data1_Buffer[a+2])<<16)|((u32) (Data1_Buffer[a+1])<<8)|((u32) (Data1_Buffer[a]));
000048  4d1c              LDR      r5,|L3.188|
00004a  4619              MOV      r1,r3                 ;135
00004c  f44f7200          MOV      r2,#0x200             ;136
                  |L3.80|
000050  eb000c01          ADD      r12,r0,r1
000054  5c47              LDRB     r7,[r0,r1]
000056  f8dcc001          LDR      r12,[r12,#1]
;;;138    	    a=a+4;
00005a  1d09              ADDS     r1,r1,#4
00005c  ea47270c          ORR      r7,r7,r12,LSL #8      ;137
000060  f8457023          STR      r7,[r5,r3,LSL #2]     ;137
;;;139    		b++;	
000064  1c5b              ADDS     r3,r3,#1
000066  4291              CMP      r1,r2                 ;136
000068  d3f2              BCC      |L3.80|
;;;140    	}
;;;141        SD_WriteBlock(Memory_Offset - 512,Data_Buffer, 512);
00006a  4914              LDR      r1,|L3.188|
00006c  68a0              LDR      r0,[r4,#8]  ; Memory_Offset
00006e  f5a07000          SUB      r0,r0,#0x200
000072  f7fffffe          BL       SD_WriteBlock
                  |L3.118|
;;;142      }
;;;143    
;;;144      CSW.dDataResidue -= Data_Len;
000076  4812              LDR      r0,|L3.192|
000078  f8b81000          LDRH     r1,[r8,#0]  ; Data_Len
00007c  6882              LDR      r2,[r0,#8]  ; CSW
00007e  1a51              SUBS     r1,r2,r1
;;;145      SetEPRxStatus(ENDP2, EP_RX_VALID); /* enable the next transaction*/
000080  6081              STR      r1,[r0,#8]  ; CSW
000082  f44f5140          MOV      r1,#0x3000
000086  2002              MOVS     r0,#2
000088  f7fffffe          BL       SetEPRxStatus
;;;146    
;;;147      //Led_RW_ON();
;;;148    
;;;149      if ((Transfer_Length == 0) || (Bot_State == BOT_CSW_Send))
00008c  68e0              LDR      r0,[r4,#0xc]  ; Transfer_Length
00008e  b118              CBZ      r0,|L3.152|
000090  480c              LDR      r0,|L3.196|
000092  7800              LDRB     r0,[r0,#0]  ; Bot_State
000094  2804              CMP      r0,#4
000096  d106              BNE      |L3.166|
                  |L3.152|
;;;150      {
;;;151        Counter = 0;
000098  6066              STR      r6,[r4,#4]  ; Counter
;;;152        Set_CSW (CSW_CMD_PASSED, SEND_CSW_ENABLE);
00009a  e8bd41f0          POP      {r4-r8,lr}
00009e  2101              MOVS     r1,#1
0000a0  2000              MOVS     r0,#0
0000a2  f7ffbffe          B.W      Set_CSW
                  |L3.166|
;;;153        //Led_RW_OFF();
;;;154      }
;;;155    }
0000a6  e8bd81f0          POP      {r4-r8,pc}
;;;156    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L3.172|
                          DCD      ||.data||
                  |L3.176|
                          DCD      ||.bss||+0x200
                  |L3.180|
                          DCD      Bulk_Data_Buff
                  |L3.184|
                          DCD      Data_Len
                  |L3.188|
                          DCD      ||.bss||
                  |L3.192|
                          DCD      ||CSW||
                  |L3.196|
                          DCD      Bot_State

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Data_Buffer
                          %        512
                  Data1_Buffer
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  Block_Read_count
                          DCD      0x00000000
                  Counter
                          DCD      0x00000000
                  Memory_Offset
                          DCD      0x00000000
                  Transfer_Length
                          DCD      0x00000000
                  Block_offset
                          DCD      0x00000000
                  i
                          DCD      0x00000000
