; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Obj\usb_prop.o --depend=.\Obj\usb_prop.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\usb_library\inc -I..\USB_test -I.\FWlib\inc -I.\user -Id:\Keil\ARM\INC -Id:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\Obj\usb_prop.crf user\usb_prop.c]
                          THUMB

                          AREA ||i.Get_Max_Lun||, CODE, READONLY, ALIGN=2

                  Get_Max_Lun PROC
;;;374    *******************************************************************************/
;;;375    u8 *Get_Max_Lun(u16 Length)
000000  b108              CBZ      r0,|L1.6|
;;;376    {
;;;377      if (Length == 0)
;;;378      {
;;;379        pInformation->Ctrl_Info.Usb_wLength = LUN_DATA_LENGTH;
;;;380        return 0;
;;;381      }
;;;382      else
;;;383      {
;;;384        return((u8*)(&Max_Lun));
000002  4804              LDR      r0,|L1.20|
;;;385      }
;;;386    }
000004  4770              BX       lr
                  |L1.6|
000006  4904              LDR      r1,|L1.24|
000008  2001              MOVS     r0,#1                 ;379
00000a  6809              LDR      r1,[r1,#0]            ;379  ; pInformation
00000c  8208              STRH     r0,[r1,#0x10]         ;379
00000e  2000              MOVS     r0,#0                 ;380
000010  4770              BX       lr
;;;387    /******************* (C) COPYRIGHT 2007 STMicroelectronics *****END OF FILE****/
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      ||.data||
                  |L1.24|
                          DCD      pInformation

                          AREA ||i.MASS_Data_Setup||, CODE, READONLY, ALIGN=2

                  MASS_Data_Setup PROC
;;;252    *******************************************************************************/
;;;253    RESULT MASS_Data_Setup(u8 RequestNo)
000000  490d              LDR      r1,|L2.56|
;;;254    {
000002  b500              PUSH     {lr}
;;;255      u8    *(*CopyRoutine)(u16);
;;;256    
;;;257      CopyRoutine = NULL;
;;;258      if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
000004  6809              LDR      r1,[r1,#0]  ; pInformation
000006  780a              LDRB     r2,[r1,#0]
000008  f002027f          AND      r2,r2,#0x7f
00000c  2a21              CMP      r2,#0x21
00000e  d108              BNE      |L2.34|
;;;259          && (RequestNo == GET_MAX_LUN) && (pInformation->USBwValue == 0)
000010  28fe              CMP      r0,#0xfe
000012  d106              BNE      |L2.34|
000014  8848              LDRH     r0,[r1,#2]
000016  b920              CBNZ     r0,|L2.34|
;;;260          && (pInformation->USBwIndex == 0) && (pInformation->USBwLength == 0x01))
000018  8888              LDRH     r0,[r1,#4]
00001a  b910              CBNZ     r0,|L2.34|
00001c  88c8              LDRH     r0,[r1,#6]
00001e  2801              CMP      r0,#1
000020  d001              BEQ      |L2.38|
                  |L2.34|
;;;261      {
;;;262        CopyRoutine = Get_Max_Lun;
;;;263      }
;;;264      else
;;;265      {
;;;266        return USB_UNSUPPORT;
000022  2002              MOVS     r0,#2
;;;267      }
;;;268    
;;;269      if (CopyRoutine == NULL)
;;;270      {
;;;271        return USB_UNSUPPORT;
;;;272      }
;;;273    
;;;274      pInformation->Ctrl_Info.CopyData = CopyRoutine;
;;;275      pInformation->Ctrl_Info.Usb_wOffset = 0;
;;;276      (*CopyRoutine)(0);
;;;277    
;;;278      return USB_SUCCESS;
;;;279    
;;;280    }
000024  bd00              POP      {pc}
                  |L2.38|
000026  4805              LDR      r0,|L2.60|
000028  6188              STR      r0,[r1,#0x18]         ;275
00002a  2000              MOVS     r0,#0                 ;275
00002c  8248              STRH     r0,[r1,#0x12]         ;275
00002e  f7fffffe          BL       Get_Max_Lun
000032  2000              MOVS     r0,#0                 ;278
000034  bd00              POP      {pc}
;;;281    
                          ENDP

000036  0000              DCW      0x0000
                  |L2.56|
                          DCD      pInformation
                  |L2.60|
                          DCD      Get_Max_Lun

                          AREA ||i.MASS_GetConfigDescriptor||, CODE, READONLY, ALIGN=2

                  MASS_GetConfigDescriptor PROC
;;;349    *******************************************************************************/
;;;350    u8 *MASS_GetConfigDescriptor(u16 Length)
000000  4901              LDR      r1,|L3.8|
;;;351    {
;;;352      return Standard_GetDescriptorData(Length, &Config_Descriptor );
000002  f7ffbffe          B.W      Standard_GetDescriptorData
;;;353    }
;;;354    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      ||.data||+0xc

                          AREA ||i.MASS_GetDeviceDescriptor||, CODE, READONLY, ALIGN=2

                  MASS_GetDeviceDescriptor PROC
;;;337    *******************************************************************************/
;;;338    u8 *MASS_GetDeviceDescriptor(u16 Length)
000000  4901              LDR      r1,|L4.8|
;;;339    {
;;;340      return Standard_GetDescriptorData(Length, &Device_Descriptor );
000002  f7ffbffe          B.W      Standard_GetDescriptorData
;;;341    }
;;;342    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      ||.data||+0x4

                          AREA ||i.MASS_GetStringDescriptor||, CODE, READONLY, ALIGN=2

                  MASS_GetStringDescriptor PROC
;;;361    *******************************************************************************/
;;;362    u8 *MASS_GetStringDescriptor(u16 Length)
000000  4903              LDR      r1,|L5.16|
;;;363    {
;;;364      u8 wValue0 = pInformation->USBwValue0;
;;;365      return Standard_GetDescriptorData( Length, &String_Descriptor[wValue0] );
000002  4a04              LDR      r2,|L5.20|
000004  6809              LDR      r1,[r1,#0]            ;364  ; pInformation
000006  78c9              LDRB     r1,[r1,#3]            ;364
000008  eb0201c1          ADD      r1,r2,r1,LSL #3
00000c  f7ffbffe          B.W      Standard_GetDescriptorData
;;;366    }
;;;367    
                          ENDP

                  |L5.16|
                          DCD      pInformation
                  |L5.20|
                          DCD      ||.data||+0x44

                          AREA ||i.MASS_Get_Interface_Setting||, CODE, READONLY, ALIGN=1

                  MASS_Get_Interface_Setting PROC
;;;317    *******************************************************************************/
;;;318    RESULT MASS_Get_Interface_Setting(u8 Interface, u8 AlternateSetting)
000000  b909              CBNZ     r1,|L6.6|
;;;319    {
;;;320      if (AlternateSetting > 0)
;;;321      {
;;;322        return USB_UNSUPPORT;/* in this application we don't have AlternateSetting*/
;;;323      }
;;;324      else if (Interface > 0)
000002  2800              CMP      r0,#0
000004  d000              BEQ      |L6.8|
                  |L6.6|
;;;325      {
;;;326        return USB_UNSUPPORT;/*in this application we have only 1 interfaces*/
000006  2002              MOVS     r0,#2
                  |L6.8|
;;;327      }
;;;328      return USB_SUCCESS;
;;;329    }
000008  4770              BX       lr
;;;330    
                          ENDP


                          AREA ||i.MASS_NoData_Setup||, CODE, READONLY, ALIGN=2

                  MASS_NoData_Setup PROC
;;;288    *******************************************************************************/
;;;289    RESULT MASS_NoData_Setup(u8 RequestNo)
000000  490f              LDR      r1,|L7.64|
;;;290    {
000002  b510              PUSH     {r4,lr}
;;;291      if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
000004  6809              LDR      r1,[r1,#0]  ; pInformation
000006  780a              LDRB     r2,[r1,#0]
000008  f002027f          AND      r2,r2,#0x7f
00000c  2a21              CMP      r2,#0x21
00000e  d107              BNE      |L7.32|
;;;292          && (RequestNo == MASS_STORAGE_RESET) && (pInformation->USBwValue == 0)
000010  28ff              CMP      r0,#0xff
000012  d105              BNE      |L7.32|
000014  8848              LDRH     r0,[r1,#2]
000016  b918              CBNZ     r0,|L7.32|
;;;293          && (pInformation->USBwIndex == 0) && (pInformation->USBwLength == 0x00))
000018  8888              LDRH     r0,[r1,#4]
00001a  b908              CBNZ     r0,|L7.32|
00001c  88c8              LDRH     r0,[r1,#6]
00001e  b108              CBZ      r0,|L7.36|
                  |L7.32|
;;;294      {
;;;295        /* Initialize Endpoint 1 */
;;;296        ClearDTOG_TX(ENDP1);
;;;297    
;;;298        /* Initialize Endpoint 2 */
;;;299        ClearDTOG_RX(ENDP2);
;;;300    
;;;301        /*intialise the CBW signature to enable the clear feature*/
;;;302        CBW.dSignature = BOT_CBW_SIGNATURE;
;;;303        Bot_State = BOT_IDLE;
;;;304    
;;;305        return USB_SUCCESS;
;;;306      }
;;;307      return USB_UNSUPPORT;
000020  2002              MOVS     r0,#2
;;;308    }
000022  bd10              POP      {r4,pc}
                  |L7.36|
000024  2001              MOVS     r0,#1                 ;296
000026  f7fffffe          BL       ClearDTOG_TX
00002a  2002              MOVS     r0,#2                 ;299
00002c  f7fffffe          BL       ClearDTOG_RX
000030  4905              LDR      r1,|L7.72|
000032  4804              LDR      r0,|L7.68|
000034  6008              STR      r0,[r1,#0]            ;303  ; CBW
000036  4905              LDR      r1,|L7.76|
000038  2000              MOVS     r0,#0                 ;303
00003a  7008              STRB     r0,[r1,#0]            ;303
00003c  bd10              POP      {r4,pc}
;;;309    
                          ENDP

00003e  0000              DCW      0x0000
                  |L7.64|
                          DCD      pInformation
                  |L7.68|
                          DCD      0x43425355
                  |L7.72|
                          DCD      ||CBW||
                  |L7.76|
                          DCD      Bot_State

                          AREA ||i.MASS_Reset||, CODE, READONLY, ALIGN=2

                  MASS_Reset PROC
;;;182    *******************************************************************************/
;;;183    void MASS_Reset()
000000  b570              PUSH     {r4-r6,lr}
;;;184    {
;;;185      /* Set the device as not configured */
;;;186      Device_Info.Current_Configuration = 0;
000002  482b              LDR      r0,|L8.176|
000004  2500              MOVS     r5,#0
000006  7285              STRB     r5,[r0,#0xa]
;;;187    
;;;188      SetBTABLE(BTABLE_ADDRESS);
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       SetBTABLE
;;;189    
;;;190      /* Initialize Endpoint 0 */
;;;191      SetEPType(ENDP0, EP_CONTROL);
00000e  f44f7100          MOV      r1,#0x200
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       SetEPType
;;;192      SetEPTxStatus(ENDP0, EP_TX_NAK);
000018  2120              MOVS     r1,#0x20
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       SetEPTxStatus
;;;193      SetEPRxAddr(ENDP0, ENDP0_RXADDR);
000020  2118              MOVS     r1,#0x18
000022  2000              MOVS     r0,#0
000024  f7fffffe          BL       SetEPRxAddr
;;;194      SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
000028  4c22              LDR      r4,|L8.180|
00002a  2000              MOVS     r0,#0
00002c  7821              LDRB     r1,[r4,#0]  ; Device_Property
00002e  f7fffffe          BL       SetEPRxCount
;;;195      SetEPTxAddr(ENDP0, ENDP0_TXADDR);
000032  2158              MOVS     r1,#0x58
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       SetEPTxAddr
;;;196      Clear_Status_Out(ENDP0);
00003a  2000              MOVS     r0,#0
00003c  f7fffffe          BL       Clear_Status_Out
;;;197      SetEPRxValid(ENDP0);
000040  2000              MOVS     r0,#0
000042  f7fffffe          BL       SetEPRxValid
;;;198    
;;;199      /* Initialize Endpoint 1 */
;;;200      SetEPType(ENDP1, EP_BULK);
000046  2100              MOVS     r1,#0
000048  2001              MOVS     r0,#1
00004a  f7fffffe          BL       SetEPType
;;;201      SetEPTxAddr(ENDP1, ENDP1_TXADDR);
00004e  2198              MOVS     r1,#0x98
000050  2001              MOVS     r0,#1
000052  f7fffffe          BL       SetEPTxAddr
;;;202      SetEPTxStatus(ENDP1, EP_TX_NAK);
000056  2120              MOVS     r1,#0x20
000058  2001              MOVS     r0,#1
00005a  f7fffffe          BL       SetEPTxStatus
;;;203      SetEPRxStatus(ENDP1, EP_RX_DIS);
00005e  2100              MOVS     r1,#0
000060  2001              MOVS     r0,#1
000062  f7fffffe          BL       SetEPRxStatus
;;;204    
;;;205      /* Initialize Endpoint 2 */
;;;206      SetEPType(ENDP2, EP_BULK);
000066  2100              MOVS     r1,#0
000068  2002              MOVS     r0,#2
00006a  f7fffffe          BL       SetEPType
;;;207      SetEPRxAddr(ENDP2, ENDP2_RXADDR);
00006e  21d8              MOVS     r1,#0xd8
000070  2002              MOVS     r0,#2
000072  f7fffffe          BL       SetEPRxAddr
;;;208      SetEPRxCount(ENDP2, Device_Property.MaxPacketSize);
000076  7821              LDRB     r1,[r4,#0]  ; Device_Property
000078  2002              MOVS     r0,#2
00007a  f7fffffe          BL       SetEPRxCount
;;;209      SetEPRxStatus(ENDP2, EP_RX_VALID);
00007e  f44f5140          MOV      r1,#0x3000
000082  2002              MOVS     r0,#2
000084  f7fffffe          BL       SetEPRxStatus
;;;210      SetEPTxStatus(ENDP2, EP_TX_DIS);
000088  2100              MOVS     r1,#0
00008a  2002              MOVS     r0,#2
00008c  f7fffffe          BL       SetEPTxStatus
;;;211    
;;;212    
;;;213      SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
000090  7821              LDRB     r1,[r4,#0]  ; Device_Property
000092  2000              MOVS     r0,#0
000094  f7fffffe          BL       SetEPRxCount
;;;214      SetEPRxValid(ENDP0);
000098  2000              MOVS     r0,#0
00009a  f7fffffe          BL       SetEPRxValid
;;;215    
;;;216      /* Set the device to response on default address */
;;;217      SetDeviceAddress(0);
00009e  2000              MOVS     r0,#0
0000a0  f7fffffe          BL       SetDeviceAddress
;;;218      CBW.dSignature = BOT_CBW_SIGNATURE;
0000a4  4905              LDR      r1,|L8.188|
0000a6  4804              LDR      r0,|L8.184|
;;;219      Bot_State = BOT_IDLE;
0000a8  6008              STR      r0,[r1,#0]  ; CBW
0000aa  4805              LDR      r0,|L8.192|
0000ac  7005              STRB     r5,[r0,#0]
;;;220    }
0000ae  bd70              POP      {r4-r6,pc}
;;;221    
                          ENDP

                  |L8.176|
                          DCD      Device_Info
                  |L8.180|
                          DCD      ||.data||+0x40
                  |L8.184|
                          DCD      0x43425355
                  |L8.188|
                          DCD      ||CBW||
                  |L8.192|
                          DCD      Bot_State

                          AREA ||i.MASS_Status_In||, CODE, READONLY, ALIGN=1

                  MASS_Status_In PROC
;;;228    *******************************************************************************/
;;;229    void MASS_Status_In(void)
000000  4770              BX       lr
;;;230    {
;;;231      return;
;;;232    }
;;;233    
                          ENDP


                          AREA ||i.MASS_Status_Out||, CODE, READONLY, ALIGN=1

                  MASS_Status_Out PROC
;;;240    *******************************************************************************/
;;;241    void MASS_Status_Out(void)
000000  4770              BX       lr
;;;242    {
;;;243      return;
;;;244    }
;;;245    
                          ENDP


                          AREA ||i.MASS_init||, CODE, READONLY, ALIGN=2

                  MASS_init PROC
;;;152    *******************************************************************************/
;;;153    void MASS_init()
000000  b570              PUSH     {r4-r6,lr}
;;;154    {
;;;155      pInformation->Current_Configuration = 0;
000002  4c0e              LDR      r4,|L11.60|
000004  2500              MOVS     r5,#0
000006  6820              LDR      r0,[r4,#0]  ; pInformation
000008  7285              STRB     r5,[r0,#0xa]
;;;156    
;;;157      /* Connect the device */
;;;158      PowerOn();
00000a  f7fffffe          BL       PowerOn
00000e  480c              LDR      r0,|L11.64|
;;;159    
;;;160      /* USB interrupts initialization */
;;;161      /* clear pending interrupts */
;;;162      _SetISTR(0);
000010  6045              STR      r5,[r0,#4]
;;;163      wInterrupt_Mask = IMR_MSK;
000012  4a0c              LDR      r2,|L11.68|
000014  f44f4104          MOV      r1,#0x8400
000018  8011              STRH     r1,[r2,#0]
;;;164      /* set interrupts mask */
;;;165      _SetCNTR(wInterrupt_Mask);
00001a  6001              STR      r1,[r0,#0]
;;;166      pInformation->Current_Feature = MASS_ConfigDescriptor[7];
00001c  480a              LDR      r0,|L11.72|
00001e  6821              LDR      r1,[r4,#0]  ; pInformation
000020  79c0              LDRB     r0,[r0,#7]  ; MASS_ConfigDescriptor
000022  7248              STRB     r0,[r1,#9]
;;;167    
;;;168      /* Wait until device is configured */
;;;169      while (pInformation->Current_Configuration == 0)
000024  e002              B        |L11.44|
;;;170      {
;;;171        NOP_Process();
000026  bf00              NOP      
                  |L11.40|
000028  f7fffffe          BL       NOP_Process
                  |L11.44|
00002c  6820              LDR      r0,[r4,#0]            ;169  ; pInformation
00002e  7a80              LDRB     r0,[r0,#0xa]          ;169
000030  2800              CMP      r0,#0                 ;169
000032  d0f9              BEQ      |L11.40|
;;;172      }
;;;173      bDeviceState = CONFIGURED;
000034  4905              LDR      r1,|L11.76|
000036  2005              MOVS     r0,#5
000038  7008              STRB     r0,[r1,#0]
;;;174    }
00003a  bd70              POP      {r4-r6,pc}
;;;175    
                          ENDP

                  |L11.60|
                          DCD      pInformation
                  |L11.64|
                          DCD      0x40005c40
                  |L11.68|
                          DCD      wInterrupt_Mask
                  |L11.72|
                          DCD      MASS_ConfigDescriptor
                  |L11.76|
                          DCD      bDeviceState

                          AREA ||i.Mass_Storage_ClearFeature||, CODE, READONLY, ALIGN=2

                  Mass_Storage_ClearFeature PROC
;;;137    *******************************************************************************/
;;;138    void Mass_Storage_ClearFeature(void)
000000  4804              LDR      r0,|L12.20|
;;;139    {
;;;140      /* when the host send a CBW with invalid signature or invalid length the two
;;;141         Endpoints (IN & OUT) shall stall until receiving a Mass Storage Reset     */
;;;142      if (CBW.dSignature != BOT_CBW_SIGNATURE)
000002  4905              LDR      r1,|L12.24|
000004  6800              LDR      r0,[r0,#0]  ; CBW
000006  4288              CMP      r0,r1
000008  d002              BEQ      |L12.16|
;;;143        Bot_Abort(BOTH_DIR);
00000a  2002              MOVS     r0,#2
00000c  f7ffbffe          B.W      Bot_Abort
                  |L12.16|
;;;144    }
000010  4770              BX       lr
;;;145    
                          ENDP

000012  0000              DCW      0x0000
                  |L12.20|
                          DCD      ||CBW||
                  |L12.24|
                          DCD      0x43425355

                          AREA ||i.Mass_Storage_SetConfiguration||, CODE, READONLY, ALIGN=2

                  Mass_Storage_SetConfiguration PROC
;;;120    *******************************************************************************/
;;;121    void Mass_Storage_SetConfiguration(void)
000000  4807              LDR      r0,|L13.32|
;;;122    {
000002  b510              PUSH     {r4,lr}
;;;123      if (pInformation->Current_Configuration)
000004  6800              LDR      r0,[r0,#0]  ; pInformation
000006  7a80              LDRB     r0,[r0,#0xa]
000008  2800              CMP      r0,#0
00000a  d008              BEQ      |L13.30|
;;;124      {
;;;125        ClearDTOG_TX(ENDP1);
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       ClearDTOG_TX
;;;126        ClearDTOG_RX(ENDP2);
000012  2002              MOVS     r0,#2
000014  f7fffffe          BL       ClearDTOG_RX
;;;127        Bot_State = BOT_IDLE; /* set the Bot state machine to the IDLE state */
000018  4902              LDR      r1,|L13.36|
00001a  2000              MOVS     r0,#0
00001c  7008              STRB     r0,[r1,#0]
                  |L13.30|
;;;128      }
;;;129    }
00001e  bd10              POP      {r4,pc}
;;;130    
                          ENDP

                  |L13.32|
                          DCD      pInformation
                  |L13.36|
                          DCD      Bot_State

                          AREA ||.data||, DATA, ALIGN=2

                  Max_Lun
                          DCD      0x00000000
                  Device_Descriptor
                          DCD      MASS_DeviceDescriptor
000008  0012              DCW      0x0012
00000a  0000              DCB      0x00,0x00
                  Config_Descriptor
                          DCD      MASS_ConfigDescriptor
000010  0020              DCW      0x0020
000012  0000              DCB      0x00,0x00
                  Device_Property
                          DCD      MASS_init
                          DCD      MASS_Reset
                          DCD      MASS_Status_In
                          DCD      MASS_Status_Out
                          DCD      MASS_Data_Setup
                          DCD      MASS_NoData_Setup
                          DCD      MASS_Get_Interface_Setting
                          DCD      MASS_GetDeviceDescriptor
                          DCD      MASS_GetConfigDescriptor
                          DCD      MASS_GetStringDescriptor
                          DCD      0x00000000
000040  40000000          DCB      0x40,0x00,0x00,0x00
                  String_Descriptor
                          DCD      MASS_StringLangID
000048  0004              DCW      0x0004
00004a  0000              DCB      0x00,0x00
                          DCD      MASS_StringVendor
000050  0026              DCW      0x0026
000052  0000              DCB      0x00,0x00
                          DCD      MASS_StringProduct
000058  0026              DCW      0x0026
00005a  0000              DCB      0x00,0x00
                          DCD      MASS_StringSerial
000060  001a              DCW      0x001a
000062  0000              DCB      0x00,0x00
                          DCD      MASS_StringInterface
000068  0010              DCW      0x0010
00006a  0000              DCB      0x00,0x00

                          AREA ||area_number.17||, DATA, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.data||
                  Device_Table
000000  0301              DCB      0x03,0x01

                          AREA ||area_number.18||, DATA, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.data||
                  User_Standard_Requests
                          DCD      NOP_Process
                          DCD      Mass_Storage_SetConfiguration
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      Mass_Storage_ClearFeature
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process

                          AREA ||area_number.19||, DATA, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.data||
                  ProtocolValue
                          DCD      0x00000000
