; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [-c --asm --interleave -o.\obj\stm32f10x_rcc.o --depend=.\obj\stm32f10x_rcc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL FWlib\SRC\stm32f10x_rcc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  RCC_DeInit PROC
;;;225      */
;;;226    void RCC_DeInit(void)
000000  48db              LDR      r0,|L1.880|
;;;227    {
;;;228      /* Set HSION bit */
;;;229      RCC->CR |= (uint32_t)0x00000001;
000002  6800              LDR      r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  49d9              LDR      r1,|L1.880|
00000a  6008              STR      r0,[r1,#0]
;;;230    
;;;231      /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
;;;232    #ifndef STM32F10X_CL
;;;233      RCC->CFGR &= (uint32_t)0xF8FF0000;
00000c  4608              MOV      r0,r1
00000e  6840              LDR      r0,[r0,#4]
000010  49d8              LDR      r1,|L1.884|
000012  4008              ANDS     r0,r0,r1
000014  49d6              LDR      r1,|L1.880|
000016  6048              STR      r0,[r1,#4]
;;;234    #else
;;;235      RCC->CFGR &= (uint32_t)0xF0FF0000;
;;;236    #endif /* STM32F10X_CL */   
;;;237      
;;;238      /* Reset HSEON, CSSON and PLLON bits */
;;;239      RCC->CR &= (uint32_t)0xFEF6FFFF;
000018  4608              MOV      r0,r1
00001a  6800              LDR      r0,[r0,#0]
00001c  49d6              LDR      r1,|L1.888|
00001e  4008              ANDS     r0,r0,r1
000020  49d3              LDR      r1,|L1.880|
000022  6008              STR      r0,[r1,#0]
;;;240    
;;;241      /* Reset HSEBYP bit */
;;;242      RCC->CR &= (uint32_t)0xFFFBFFFF;
000024  4608              MOV      r0,r1
000026  6800              LDR      r0,[r0,#0]
000028  f4202080          BIC      r0,r0,#0x40000
00002c  6008              STR      r0,[r1,#0]
;;;243    
;;;244      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
;;;245      RCC->CFGR &= (uint32_t)0xFF80FFFF;
00002e  4608              MOV      r0,r1
000030  6840              LDR      r0,[r0,#4]
000032  f42000fe          BIC      r0,r0,#0x7f0000
000036  6048              STR      r0,[r1,#4]
;;;246    
;;;247    #ifdef STM32F10X_CL
;;;248      /* Reset PLL2ON and PLL3ON bits */
;;;249      RCC->CR &= (uint32_t)0xEBFFFFFF;
;;;250    
;;;251      /* Disable all interrupts and clear pending bits  */
;;;252      RCC->CIR = 0x00FF0000;
;;;253    
;;;254      /* Reset CFGR2 register */
;;;255      RCC->CFGR2 = 0x00000000;
;;;256    #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) 
;;;257      /* Disable all interrupts and clear pending bits  */
;;;258      RCC->CIR = 0x009F0000;
;;;259    
;;;260      /* Reset CFGR2 register */
;;;261      RCC->CFGR2 = 0x00000000;      
;;;262    #else
;;;263      /* Disable all interrupts and clear pending bits  */
;;;264      RCC->CIR = 0x009F0000;
000038  f44f001f          MOV      r0,#0x9f0000
00003c  6088              STR      r0,[r1,#8]
;;;265    #endif /* STM32F10X_CL */
;;;266    
;;;267    }
00003e  4770              BX       lr
;;;268    
                          ENDP

                  RCC_HSEConfig PROC
;;;278      */
;;;279    void RCC_HSEConfig(uint32_t RCC_HSE)
000040  49cb              LDR      r1,|L1.880|
;;;280    {
;;;281      /* Check the parameters */
;;;282      assert_param(IS_RCC_HSE(RCC_HSE));
;;;283      /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
;;;284      /* Reset HSEON bit */
;;;285      RCC->CR &= CR_HSEON_Reset;
000042  6809              LDR      r1,[r1,#0]
000044  f4213180          BIC      r1,r1,#0x10000
000048  4ac9              LDR      r2,|L1.880|
00004a  6011              STR      r1,[r2,#0]
;;;286      /* Reset HSEBYP bit */
;;;287      RCC->CR &= CR_HSEBYP_Reset;
00004c  4611              MOV      r1,r2
00004e  6809              LDR      r1,[r1,#0]
000050  f4212180          BIC      r1,r1,#0x40000
000054  6011              STR      r1,[r2,#0]
;;;288      /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
;;;289      switch(RCC_HSE)
000056  f5b03f80          CMP      r0,#0x10000
00005a  d003              BEQ      |L1.100|
00005c  f5b02f80          CMP      r0,#0x40000
000060  d10e              BNE      |L1.128|
000062  e006              B        |L1.114|
                  |L1.100|
;;;290      {
;;;291        case RCC_HSE_ON:
;;;292          /* Set HSEON bit */
;;;293          RCC->CR |= CR_HSEON_Set;
000064  49c2              LDR      r1,|L1.880|
000066  6809              LDR      r1,[r1,#0]
000068  f4413180          ORR      r1,r1,#0x10000
00006c  4ac0              LDR      r2,|L1.880|
00006e  6011              STR      r1,[r2,#0]
;;;294          break;
000070  e007              B        |L1.130|
                  |L1.114|
;;;295          
;;;296        case RCC_HSE_Bypass:
;;;297          /* Set HSEBYP and HSEON bits */
;;;298          RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
000072  49bf              LDR      r1,|L1.880|
000074  6809              LDR      r1,[r1,#0]
000076  f44121a0          ORR      r1,r1,#0x50000
00007a  4abd              LDR      r2,|L1.880|
00007c  6011              STR      r1,[r2,#0]
;;;299          break;
00007e  e000              B        |L1.130|
                  |L1.128|
;;;300          
;;;301        default:
;;;302          break;
000080  bf00              NOP      
                  |L1.130|
000082  bf00              NOP                            ;294
;;;303      }
;;;304    }
000084  4770              BX       lr
;;;305    
                          ENDP

                  RCC_GetFlagStatus PROC
;;;1332     */
;;;1333   FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
000086  b510              PUSH     {r4,lr}
;;;1334   {
000088  4601              MOV      r1,r0
;;;1335     uint32_t tmp = 0;
00008a  2200              MOVS     r2,#0
;;;1336     uint32_t statusreg = 0;
00008c  2300              MOVS     r3,#0
;;;1337     FlagStatus bitstatus = RESET;
00008e  2000              MOVS     r0,#0
;;;1338     /* Check the parameters */
;;;1339     assert_param(IS_RCC_FLAG(RCC_FLAG));
;;;1340   
;;;1341     /* Get the RCC register index */
;;;1342     tmp = RCC_FLAG >> 5;
000090  114a              ASRS     r2,r1,#5
;;;1343     if (tmp == 1)               /* The flag to check is in CR register */
000092  2a01              CMP      r2,#1
000094  d102              BNE      |L1.156|
;;;1344     {
;;;1345       statusreg = RCC->CR;
000096  4cb6              LDR      r4,|L1.880|
000098  6823              LDR      r3,[r4,#0]
00009a  e006              B        |L1.170|
                  |L1.156|
;;;1346     }
;;;1347     else if (tmp == 2)          /* The flag to check is in BDCR register */
00009c  2a02              CMP      r2,#2
00009e  d102              BNE      |L1.166|
;;;1348     {
;;;1349       statusreg = RCC->BDCR;
0000a0  4cb3              LDR      r4,|L1.880|
0000a2  6a23              LDR      r3,[r4,#0x20]
0000a4  e001              B        |L1.170|
                  |L1.166|
;;;1350     }
;;;1351     else                       /* The flag to check is in CSR register */
;;;1352     {
;;;1353       statusreg = RCC->CSR;
0000a6  4cb2              LDR      r4,|L1.880|
0000a8  6a63              LDR      r3,[r4,#0x24]
                  |L1.170|
;;;1354     }
;;;1355   
;;;1356     /* Get the flag position */
;;;1357     tmp = RCC_FLAG & FLAG_Mask;
0000aa  f001021f          AND      r2,r1,#0x1f
;;;1358     if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
0000ae  2401              MOVS     r4,#1
0000b0  4094              LSLS     r4,r4,r2
0000b2  421c              TST      r4,r3
0000b4  d001              BEQ      |L1.186|
;;;1359     {
;;;1360       bitstatus = SET;
0000b6  2001              MOVS     r0,#1
0000b8  e000              B        |L1.188|
                  |L1.186|
;;;1361     }
;;;1362     else
;;;1363     {
;;;1364       bitstatus = RESET;
0000ba  2000              MOVS     r0,#0
                  |L1.188|
;;;1365     }
;;;1366   
;;;1367     /* Return the flag status */
;;;1368     return bitstatus;
;;;1369   }
0000bc  bd10              POP      {r4,pc}
;;;1370   
                          ENDP

                  RCC_WaitForHSEStartUp PROC
;;;312      */
;;;313    ErrorStatus RCC_WaitForHSEStartUp(void)
0000be  b570              PUSH     {r4-r6,lr}
;;;314    {
;;;315      __IO uint32_t StartUpCounter = 0;
0000c0  2400              MOVS     r4,#0
;;;316      ErrorStatus status = ERROR;
0000c2  2500              MOVS     r5,#0
;;;317      FlagStatus HSEStatus = RESET;
0000c4  2600              MOVS     r6,#0
;;;318      
;;;319      /* Wait till HSE is ready and if Time out is reached exit */
;;;320      do
0000c6  bf00              NOP      
                  |L1.200|
;;;321      {
;;;322        HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
0000c8  2031              MOVS     r0,#0x31
0000ca  f7fffffe          BL       RCC_GetFlagStatus
0000ce  4606              MOV      r6,r0
;;;323        StartUpCounter++;  
0000d0  1c64              ADDS     r4,r4,#1
;;;324      } while((StartUpCounter != HSEStartUp_TimeOut) && (HSEStatus == RESET));
0000d2  f5b46fa0          CMP      r4,#0x500
0000d6  d001              BEQ      |L1.220|
0000d8  2e00              CMP      r6,#0
0000da  d0f5              BEQ      |L1.200|
                  |L1.220|
;;;325      
;;;326      if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
0000dc  2031              MOVS     r0,#0x31
0000de  f7fffffe          BL       RCC_GetFlagStatus
0000e2  b108              CBZ      r0,|L1.232|
;;;327      {
;;;328        status = SUCCESS;
0000e4  2501              MOVS     r5,#1
0000e6  e000              B        |L1.234|
                  |L1.232|
;;;329      }
;;;330      else
;;;331      {
;;;332        status = ERROR;
0000e8  2500              MOVS     r5,#0
                  |L1.234|
;;;333      }  
;;;334      return (status);
0000ea  4628              MOV      r0,r5
;;;335    }
0000ec  bd70              POP      {r4-r6,pc}
;;;336    
                          ENDP

                  RCC_AdjustHSICalibrationValue PROC
;;;342      */
;;;343    void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
0000ee  4601              MOV      r1,r0
;;;344    {
;;;345      uint32_t tmpreg = 0;
0000f0  2000              MOVS     r0,#0
;;;346      /* Check the parameters */
;;;347      assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
;;;348      tmpreg = RCC->CR;
0000f2  4a9f              LDR      r2,|L1.880|
0000f4  6810              LDR      r0,[r2,#0]
;;;349      /* Clear HSITRIM[4:0] bits */
;;;350      tmpreg &= CR_HSITRIM_Mask;
0000f6  f02000f8          BIC      r0,r0,#0xf8
;;;351      /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
;;;352      tmpreg |= (uint32_t)HSICalibrationValue << 3;
0000fa  ea4000c1          ORR      r0,r0,r1,LSL #3
;;;353      /* Store the new value */
;;;354      RCC->CR = tmpreg;
0000fe  6010              STR      r0,[r2,#0]
;;;355    }
000100  4770              BX       lr
;;;356    
                          ENDP

                  RCC_HSICmd PROC
;;;362      */
;;;363    void RCC_HSICmd(FunctionalState NewState)
000102  499e              LDR      r1,|L1.892|
;;;364    {
;;;365      /* Check the parameters */
;;;366      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;367      *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
000104  6008              STR      r0,[r1,#0]
;;;368    }
000106  4770              BX       lr
;;;369    
                          ENDP

                  RCC_PLLConfig PROC
;;;386      */
;;;387    void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
000108  4602              MOV      r2,r0
;;;388    {
;;;389      uint32_t tmpreg = 0;
00010a  2000              MOVS     r0,#0
;;;390    
;;;391      /* Check the parameters */
;;;392      assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
;;;393      assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
;;;394    
;;;395      tmpreg = RCC->CFGR;
00010c  4b98              LDR      r3,|L1.880|
00010e  6858              LDR      r0,[r3,#4]
;;;396      /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
;;;397      tmpreg &= CFGR_PLL_Mask;
000110  f420107c          BIC      r0,r0,#0x3f0000
;;;398      /* Set the PLL configuration bits */
;;;399      tmpreg |= RCC_PLLSource | RCC_PLLMul;
000114  ea420301          ORR      r3,r2,r1
000118  4318              ORRS     r0,r0,r3
;;;400      /* Store the new value */
;;;401      RCC->CFGR = tmpreg;
00011a  4b95              LDR      r3,|L1.880|
00011c  6058              STR      r0,[r3,#4]
;;;402    }
00011e  4770              BX       lr
;;;403    
                          ENDP

                  RCC_PLLCmd PROC
;;;409      */
;;;410    void RCC_PLLCmd(FunctionalState NewState)
000120  4996              LDR      r1,|L1.892|
;;;411    {
;;;412      /* Check the parameters */
;;;413      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;414    
;;;415      *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
000122  6608              STR      r0,[r1,#0x60]
;;;416    }
000124  4770              BX       lr
;;;417    
                          ENDP

                  RCC_SYSCLKConfig PROC
;;;572      */
;;;573    void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
000126  4601              MOV      r1,r0
;;;574    {
;;;575      uint32_t tmpreg = 0;
000128  2000              MOVS     r0,#0
;;;576      /* Check the parameters */
;;;577      assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
;;;578      tmpreg = RCC->CFGR;
00012a  4a91              LDR      r2,|L1.880|
00012c  6850              LDR      r0,[r2,#4]
;;;579      /* Clear SW[1:0] bits */
;;;580      tmpreg &= CFGR_SW_Mask;
00012e  f0200003          BIC      r0,r0,#3
;;;581      /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
;;;582      tmpreg |= RCC_SYSCLKSource;
000132  4308              ORRS     r0,r0,r1
;;;583      /* Store the new value */
;;;584      RCC->CFGR = tmpreg;
000134  6050              STR      r0,[r2,#4]
;;;585    }
000136  4770              BX       lr
;;;586    
                          ENDP

                  RCC_GetSYSCLKSource PROC
;;;595      */
;;;596    uint8_t RCC_GetSYSCLKSource(void)
000138  488d              LDR      r0,|L1.880|
;;;597    {
;;;598      return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
00013a  6840              LDR      r0,[r0,#4]
00013c  f000000c          AND      r0,r0,#0xc
;;;599    }
000140  4770              BX       lr
;;;600    
                          ENDP

                  RCC_HCLKConfig PROC
;;;616      */
;;;617    void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
000142  4601              MOV      r1,r0
;;;618    {
;;;619      uint32_t tmpreg = 0;
000144  2000              MOVS     r0,#0
;;;620      /* Check the parameters */
;;;621      assert_param(IS_RCC_HCLK(RCC_SYSCLK));
;;;622      tmpreg = RCC->CFGR;
000146  4a8a              LDR      r2,|L1.880|
000148  6850              LDR      r0,[r2,#4]
;;;623      /* Clear HPRE[3:0] bits */
;;;624      tmpreg &= CFGR_HPRE_Reset_Mask;
00014a  f02000f0          BIC      r0,r0,#0xf0
;;;625      /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
;;;626      tmpreg |= RCC_SYSCLK;
00014e  4308              ORRS     r0,r0,r1
;;;627      /* Store the new value */
;;;628      RCC->CFGR = tmpreg;
000150  6050              STR      r0,[r2,#4]
;;;629    }
000152  4770              BX       lr
;;;630    
                          ENDP

                  RCC_PCLK1Config PROC
;;;642      */
;;;643    void RCC_PCLK1Config(uint32_t RCC_HCLK)
000154  4601              MOV      r1,r0
;;;644    {
;;;645      uint32_t tmpreg = 0;
000156  2000              MOVS     r0,#0
;;;646      /* Check the parameters */
;;;647      assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;648      tmpreg = RCC->CFGR;
000158  4a85              LDR      r2,|L1.880|
00015a  6850              LDR      r0,[r2,#4]
;;;649      /* Clear PPRE1[2:0] bits */
;;;650      tmpreg &= CFGR_PPRE1_Reset_Mask;
00015c  f42060e0          BIC      r0,r0,#0x700
;;;651      /* Set PPRE1[2:0] bits according to RCC_HCLK value */
;;;652      tmpreg |= RCC_HCLK;
000160  4308              ORRS     r0,r0,r1
;;;653      /* Store the new value */
;;;654      RCC->CFGR = tmpreg;
000162  6050              STR      r0,[r2,#4]
;;;655    }
000164  4770              BX       lr
;;;656    
                          ENDP

                  RCC_PCLK2Config PROC
;;;668      */
;;;669    void RCC_PCLK2Config(uint32_t RCC_HCLK)
000166  4601              MOV      r1,r0
;;;670    {
;;;671      uint32_t tmpreg = 0;
000168  2000              MOVS     r0,#0
;;;672      /* Check the parameters */
;;;673      assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;674      tmpreg = RCC->CFGR;
00016a  4a81              LDR      r2,|L1.880|
00016c  6850              LDR      r0,[r2,#4]
;;;675      /* Clear PPRE2[2:0] bits */
;;;676      tmpreg &= CFGR_PPRE2_Reset_Mask;
00016e  f4205060          BIC      r0,r0,#0x3800
;;;677      /* Set PPRE2[2:0] bits according to RCC_HCLK value */
;;;678      tmpreg |= RCC_HCLK << 3;
000172  ea4000c1          ORR      r0,r0,r1,LSL #3
;;;679      /* Store the new value */
;;;680      RCC->CFGR = tmpreg;
000176  6050              STR      r0,[r2,#4]
;;;681    }
000178  4770              BX       lr
;;;682    
                          ENDP

                  RCC_ITConfig PROC
;;;708      */
;;;709    void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
00017a  b129              CBZ      r1,|L1.392|
;;;710    {
;;;711      /* Check the parameters */
;;;712      assert_param(IS_RCC_IT(RCC_IT));
;;;713      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;714      if (NewState != DISABLE)
;;;715      {
;;;716        /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
;;;717        *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
00017c  4a7c              LDR      r2,|L1.880|
00017e  7a52              LDRB     r2,[r2,#9]
000180  4302              ORRS     r2,r2,r0
000182  4b7b              LDR      r3,|L1.880|
000184  725a              STRB     r2,[r3,#9]
000186  e006              B        |L1.406|
                  |L1.392|
;;;718      }
;;;719      else
;;;720      {
;;;721        /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
;;;722        *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
000188  4a79              LDR      r2,|L1.880|
00018a  7a52              LDRB     r2,[r2,#9]
00018c  43c3              MVNS     r3,r0
00018e  b2db              UXTB     r3,r3
000190  401a              ANDS     r2,r2,r3
000192  4b77              LDR      r3,|L1.880|
000194  725a              STRB     r2,[r3,#9]
                  |L1.406|
;;;723      }
;;;724    }
000196  4770              BX       lr
;;;725    
                          ENDP

                  RCC_USBCLKConfig PROC
;;;736      */
;;;737    void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
000198  4979              LDR      r1,|L1.896|
;;;738    {
;;;739      /* Check the parameters */
;;;740      assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));
;;;741    
;;;742      *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
00019a  6008              STR      r0,[r1,#0]
;;;743    }
00019c  4770              BX       lr
;;;744    #else
                          ENDP

                  RCC_ADCCLKConfig PROC
;;;774      */
;;;775    void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
00019e  4601              MOV      r1,r0
;;;776    {
;;;777      uint32_t tmpreg = 0;
0001a0  2000              MOVS     r0,#0
;;;778      /* Check the parameters */
;;;779      assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
;;;780      tmpreg = RCC->CFGR;
0001a2  4a73              LDR      r2,|L1.880|
0001a4  6850              LDR      r0,[r2,#4]
;;;781      /* Clear ADCPRE[1:0] bits */
;;;782      tmpreg &= CFGR_ADCPRE_Reset_Mask;
0001a6  f4204040          BIC      r0,r0,#0xc000
;;;783      /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
;;;784      tmpreg |= RCC_PCLK2;
0001aa  4308              ORRS     r0,r0,r1
;;;785      /* Store the new value */
;;;786      RCC->CFGR = tmpreg;
0001ac  6050              STR      r0,[r2,#4]
;;;787    }
0001ae  4770              BX       lr
;;;788    
                          ENDP

                  RCC_LSEConfig PROC
;;;837      */
;;;838    void RCC_LSEConfig(uint8_t RCC_LSE)
0001b0  2100              MOVS     r1,#0
;;;839    {
;;;840      /* Check the parameters */
;;;841      assert_param(IS_RCC_LSE(RCC_LSE));
;;;842      /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
;;;843      /* Reset LSEON bit */
;;;844      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
0001b2  4a74              LDR      r2,|L1.900|
0001b4  7011              STRB     r1,[r2,#0]
;;;845      /* Reset LSEBYP bit */
;;;846      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
0001b6  4a6e              LDR      r2,|L1.880|
0001b8  f8821020          STRB     r1,[r2,#0x20]
;;;847      /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
;;;848      switch(RCC_LSE)
0001bc  2801              CMP      r0,#1
0001be  d002              BEQ      |L1.454|
0001c0  2804              CMP      r0,#4
0001c2  d108              BNE      |L1.470|
0001c4  e003              B        |L1.462|
                  |L1.454|
;;;849      {
;;;850        case RCC_LSE_ON:
;;;851          /* Set LSEON bit */
;;;852          *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
0001c6  2101              MOVS     r1,#1
0001c8  4a6e              LDR      r2,|L1.900|
0001ca  7011              STRB     r1,[r2,#0]
;;;853          break;
0001cc  e004              B        |L1.472|
                  |L1.462|
;;;854          
;;;855        case RCC_LSE_Bypass:
;;;856          /* Set LSEBYP and LSEON bits */
;;;857          *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
0001ce  2105              MOVS     r1,#5
0001d0  4a6c              LDR      r2,|L1.900|
0001d2  7011              STRB     r1,[r2,#0]
;;;858          break;            
0001d4  e000              B        |L1.472|
                  |L1.470|
;;;859          
;;;860        default:
;;;861          break;      
0001d6  bf00              NOP      
                  |L1.472|
0001d8  bf00              NOP                            ;853
;;;862      }
;;;863    }
0001da  4770              BX       lr
;;;864    
                          ENDP

                  RCC_LSICmd PROC
;;;870      */
;;;871    void RCC_LSICmd(FunctionalState NewState)
0001dc  496a              LDR      r1,|L1.904|
;;;872    {
;;;873      /* Check the parameters */
;;;874      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;875      *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
0001de  6008              STR      r0,[r1,#0]
;;;876    }
0001e0  4770              BX       lr
;;;877    
                          ENDP

                  RCC_RTCCLKConfig PROC
;;;887      */
;;;888    void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
0001e2  4963              LDR      r1,|L1.880|
;;;889    {
;;;890      /* Check the parameters */
;;;891      assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
;;;892      /* Select the RTC clock source */
;;;893      RCC->BDCR |= RCC_RTCCLKSource;
0001e4  6a09              LDR      r1,[r1,#0x20]
0001e6  4301              ORRS     r1,r1,r0
0001e8  4a61              LDR      r2,|L1.880|
0001ea  6211              STR      r1,[r2,#0x20]
;;;894    }
0001ec  4770              BX       lr
;;;895    
                          ENDP

                  RCC_RTCCLKCmd PROC
;;;901      */
;;;902    void RCC_RTCCLKCmd(FunctionalState NewState)
0001ee  4967              LDR      r1,|L1.908|
;;;903    {
;;;904      /* Check the parameters */
;;;905      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;906      *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
0001f0  6008              STR      r0,[r1,#0]
;;;907    }
0001f2  4770              BX       lr
;;;908    
                          ENDP

                  RCC_GetClocksFreq PROC
;;;914      */
;;;915    void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
0001f4  b530              PUSH     {r4,r5,lr}
;;;916    {
;;;917      uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
0001f6  2100              MOVS     r1,#0
0001f8  2200              MOVS     r2,#0
0001fa  2400              MOVS     r4,#0
0001fc  2300              MOVS     r3,#0
;;;918    
;;;919    #ifdef  STM32F10X_CL
;;;920      uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
;;;921    #endif /* STM32F10X_CL */
;;;922    
;;;923    #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL)
;;;924      uint32_t prediv1factor = 0;
;;;925    #endif
;;;926        
;;;927      /* Get SYSCLK source -------------------------------------------------------*/
;;;928      tmp = RCC->CFGR & CFGR_SWS_Mask;
0001fe  4d5c              LDR      r5,|L1.880|
000200  686d              LDR      r5,[r5,#4]
000202  f005010c          AND      r1,r5,#0xc
;;;929      
;;;930      switch (tmp)
000206  b121              CBZ      r1,|L1.530|
000208  2904              CMP      r1,#4
00020a  d005              BEQ      |L1.536|
00020c  2908              CMP      r1,#8
00020e  d123              BNE      |L1.600|
000210  e005              B        |L1.542|
                  |L1.530|
;;;931      {
;;;932        case 0x00:  /* HSI used as system clock */
;;;933          RCC_Clocks->SYSCLK_Frequency = HSI_Value;
000212  4d5f              LDR      r5,|L1.912|
000214  6005              STR      r5,[r0,#0]
;;;934          break;
000216  e022              B        |L1.606|
                  |L1.536|
;;;935        case 0x04:  /* HSE used as system clock */
;;;936          RCC_Clocks->SYSCLK_Frequency = HSE_Value;
000218  4d5d              LDR      r5,|L1.912|
00021a  6005              STR      r5,[r0,#0]
;;;937          break;
00021c  e01f              B        |L1.606|
                  |L1.542|
;;;938        case 0x08:  /* PLL used as system clock */
;;;939    
;;;940          /* Get PLL clock source and multiplication factor ----------------------*/
;;;941          pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
00021e  4d54              LDR      r5,|L1.880|
000220  686d              LDR      r5,[r5,#4]
000222  f4051270          AND      r2,r5,#0x3c0000
;;;942          pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
000226  4d52              LDR      r5,|L1.880|
000228  686d              LDR      r5,[r5,#4]
00022a  f4053480          AND      r4,r5,#0x10000
;;;943          
;;;944    #ifndef STM32F10X_CL      
;;;945          pllmull = ( pllmull >> 18) + 2;
00022e  2502              MOVS     r5,#2
000230  eb054292          ADD      r2,r5,r2,LSR #18
;;;946          
;;;947          if (pllsource == 0x00)
000234  b91c              CBNZ     r4,|L1.574|
;;;948          {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;949            RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
000236  4d57              LDR      r5,|L1.916|
000238  4355              MULS     r5,r2,r5
00023a  6005              STR      r5,[r0,#0]
00023c  e00b              B        |L1.598|
                  |L1.574|
;;;950          }
;;;951          else
;;;952          {
;;;953     #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL)
;;;954           prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
;;;955           /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;956           RCC_Clocks->SYSCLK_Frequency = (HSE_Value / prediv1factor) * pllmull; 
;;;957     #else
;;;958            /* HSE selected as PLL clock entry */
;;;959            if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
00023e  4d4c              LDR      r5,|L1.880|
000240  686d              LDR      r5,[r5,#4]
000242  f4153f00          TST      r5,#0x20000
000246  d003              BEQ      |L1.592|
;;;960            {/* HSE oscillator clock divided by 2 */
;;;961              RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
000248  4d52              LDR      r5,|L1.916|
00024a  4355              MULS     r5,r2,r5
00024c  6005              STR      r5,[r0,#0]
00024e  e002              B        |L1.598|
                  |L1.592|
;;;962            }
;;;963            else
;;;964            {
;;;965              RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
000250  4d4f              LDR      r5,|L1.912|
000252  4355              MULS     r5,r2,r5
000254  6005              STR      r5,[r0,#0]
                  |L1.598|
;;;966            }
;;;967     #endif
;;;968          }
;;;969    #else
;;;970          pllmull = pllmull >> 18;
;;;971          
;;;972          if (pllmull != 0x0D)
;;;973          {
;;;974             pllmull += 2;
;;;975          }
;;;976          else
;;;977          { /* PLL multiplication factor = PLL input clock * 6.5 */
;;;978            pllmull = 13 / 2; 
;;;979          }
;;;980                
;;;981          if (pllsource == 0x00)
;;;982          {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;983            RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
;;;984          }
;;;985          else
;;;986          {/* PREDIV1 selected as PLL clock entry */
;;;987            
;;;988            /* Get PREDIV1 clock source and division factor */
;;;989            prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
;;;990            prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
;;;991            
;;;992            if (prediv1source == 0)
;;;993            { /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;994              RCC_Clocks->SYSCLK_Frequency = (HSE_Value / prediv1factor) * pllmull;          
;;;995            }
;;;996            else
;;;997            {/* PLL2 clock selected as PREDIV1 clock entry */
;;;998              
;;;999              /* Get PREDIV2 division factor and PLL2 multiplication factor */
;;;1000             prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
;;;1001             pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
;;;1002             RCC_Clocks->SYSCLK_Frequency = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
;;;1003           }
;;;1004         }
;;;1005   #endif /* STM32F10X_CL */ 
;;;1006         break;
000256  e002              B        |L1.606|
                  |L1.600|
;;;1007   
;;;1008       default:
;;;1009         RCC_Clocks->SYSCLK_Frequency = HSI_Value;
000258  4d4d              LDR      r5,|L1.912|
00025a  6005              STR      r5,[r0,#0]
;;;1010         break;
00025c  bf00              NOP      
                  |L1.606|
00025e  bf00              NOP                            ;934
;;;1011     }
;;;1012   
;;;1013     /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
;;;1014     /* Get HCLK prescaler */
;;;1015     tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
000260  4d43              LDR      r5,|L1.880|
000262  686d              LDR      r5,[r5,#4]
000264  f00501f0          AND      r1,r5,#0xf0
;;;1016     tmp = tmp >> 4;
000268  0909              LSRS     r1,r1,#4
;;;1017     presc = APBAHBPrescTable[tmp];
00026a  4d4b              LDR      r5,|L1.920|
00026c  5c6b              LDRB     r3,[r5,r1]
;;;1018     /* HCLK clock frequency */
;;;1019     RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
00026e  6805              LDR      r5,[r0,#0]
000270  40dd              LSRS     r5,r5,r3
000272  6045              STR      r5,[r0,#4]
;;;1020     /* Get PCLK1 prescaler */
;;;1021     tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
000274  4d3e              LDR      r5,|L1.880|
000276  686d              LDR      r5,[r5,#4]
000278  f40561e0          AND      r1,r5,#0x700
;;;1022     tmp = tmp >> 8;
00027c  0a09              LSRS     r1,r1,#8
;;;1023     presc = APBAHBPrescTable[tmp];
00027e  4d46              LDR      r5,|L1.920|
000280  5c6b              LDRB     r3,[r5,r1]
;;;1024     /* PCLK1 clock frequency */
;;;1025     RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
000282  6845              LDR      r5,[r0,#4]
000284  40dd              LSRS     r5,r5,r3
000286  6085              STR      r5,[r0,#8]
;;;1026     /* Get PCLK2 prescaler */
;;;1027     tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
000288  4d39              LDR      r5,|L1.880|
00028a  686d              LDR      r5,[r5,#4]
00028c  f4055160          AND      r1,r5,#0x3800
;;;1028     tmp = tmp >> 11;
000290  0ac9              LSRS     r1,r1,#11
;;;1029     presc = APBAHBPrescTable[tmp];
000292  4d41              LDR      r5,|L1.920|
000294  5c6b              LDRB     r3,[r5,r1]
;;;1030     /* PCLK2 clock frequency */
;;;1031     RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
000296  6845              LDR      r5,[r0,#4]
000298  40dd              LSRS     r5,r5,r3
00029a  60c5              STR      r5,[r0,#0xc]
;;;1032     /* Get ADCCLK prescaler */
;;;1033     tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
00029c  4d34              LDR      r5,|L1.880|
00029e  686d              LDR      r5,[r5,#4]
0002a0  f4054140          AND      r1,r5,#0xc000
;;;1034     tmp = tmp >> 14;
0002a4  0b89              LSRS     r1,r1,#14
;;;1035     presc = ADCPrescTable[tmp];
0002a6  4d3d              LDR      r5,|L1.924|
0002a8  5c6b              LDRB     r3,[r5,r1]
;;;1036     /* ADCCLK clock frequency */
;;;1037     RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
0002aa  68c5              LDR      r5,[r0,#0xc]
0002ac  fbb5f5f3          UDIV     r5,r5,r3
0002b0  6105              STR      r5,[r0,#0x10]
;;;1038   }
0002b2  bd30              POP      {r4,r5,pc}
;;;1039   
                          ENDP

                  RCC_AHBPeriphClockCmd PROC
;;;1070     */
;;;1071   void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
0002b4  b129              CBZ      r1,|L1.706|
;;;1072   {
;;;1073     /* Check the parameters */
;;;1074     assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
;;;1075     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1076   
;;;1077     if (NewState != DISABLE)
;;;1078     {
;;;1079       RCC->AHBENR |= RCC_AHBPeriph;
0002b6  4a2e              LDR      r2,|L1.880|
0002b8  6952              LDR      r2,[r2,#0x14]
0002ba  4302              ORRS     r2,r2,r0
0002bc  4b2c              LDR      r3,|L1.880|
0002be  615a              STR      r2,[r3,#0x14]
0002c0  e004              B        |L1.716|
                  |L1.706|
;;;1080     }
;;;1081     else
;;;1082     {
;;;1083       RCC->AHBENR &= ~RCC_AHBPeriph;
0002c2  4a2b              LDR      r2,|L1.880|
0002c4  6952              LDR      r2,[r2,#0x14]
0002c6  4382              BICS     r2,r2,r0
0002c8  4b29              LDR      r3,|L1.880|
0002ca  615a              STR      r2,[r3,#0x14]
                  |L1.716|
;;;1084     }
;;;1085   }
0002cc  4770              BX       lr
;;;1086   
                          ENDP

                  RCC_APB2PeriphClockCmd PROC
;;;1101     */
;;;1102   void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
0002ce  b129              CBZ      r1,|L1.732|
;;;1103   {
;;;1104     /* Check the parameters */
;;;1105     assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;1106     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1107     if (NewState != DISABLE)
;;;1108     {
;;;1109       RCC->APB2ENR |= RCC_APB2Periph;
0002d0  4a27              LDR      r2,|L1.880|
0002d2  6992              LDR      r2,[r2,#0x18]
0002d4  4302              ORRS     r2,r2,r0
0002d6  4b26              LDR      r3,|L1.880|
0002d8  619a              STR      r2,[r3,#0x18]
0002da  e004              B        |L1.742|
                  |L1.732|
;;;1110     }
;;;1111     else
;;;1112     {
;;;1113       RCC->APB2ENR &= ~RCC_APB2Periph;
0002dc  4a24              LDR      r2,|L1.880|
0002de  6992              LDR      r2,[r2,#0x18]
0002e0  4382              BICS     r2,r2,r0
0002e2  4b23              LDR      r3,|L1.880|
0002e4  619a              STR      r2,[r3,#0x18]
                  |L1.742|
;;;1114     }
;;;1115   }
0002e6  4770              BX       lr
;;;1116   
                          ENDP

                  RCC_APB1PeriphClockCmd PROC
;;;1132     */
;;;1133   void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
0002e8  b129              CBZ      r1,|L1.758|
;;;1134   {
;;;1135     /* Check the parameters */
;;;1136     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;1137     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1138     if (NewState != DISABLE)
;;;1139     {
;;;1140       RCC->APB1ENR |= RCC_APB1Periph;
0002ea  4a21              LDR      r2,|L1.880|
0002ec  69d2              LDR      r2,[r2,#0x1c]
0002ee  4302              ORRS     r2,r2,r0
0002f0  4b1f              LDR      r3,|L1.880|
0002f2  61da              STR      r2,[r3,#0x1c]
0002f4  e004              B        |L1.768|
                  |L1.758|
;;;1141     }
;;;1142     else
;;;1143     {
;;;1144       RCC->APB1ENR &= ~RCC_APB1Periph;
0002f6  4a1e              LDR      r2,|L1.880|
0002f8  69d2              LDR      r2,[r2,#0x1c]
0002fa  4382              BICS     r2,r2,r0
0002fc  4b1c              LDR      r3,|L1.880|
0002fe  61da              STR      r2,[r3,#0x1c]
                  |L1.768|
;;;1145     }
;;;1146   }
000300  4770              BX       lr
;;;1147   
                          ENDP

                  RCC_APB2PeriphResetCmd PROC
;;;1191     */
;;;1192   void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000302  b129              CBZ      r1,|L1.784|
;;;1193   {
;;;1194     /* Check the parameters */
;;;1195     assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;1196     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1197     if (NewState != DISABLE)
;;;1198     {
;;;1199       RCC->APB2RSTR |= RCC_APB2Periph;
000304  4a1a              LDR      r2,|L1.880|
000306  68d2              LDR      r2,[r2,#0xc]
000308  4302              ORRS     r2,r2,r0
00030a  4b19              LDR      r3,|L1.880|
00030c  60da              STR      r2,[r3,#0xc]
00030e  e004              B        |L1.794|
                  |L1.784|
;;;1200     }
;;;1201     else
;;;1202     {
;;;1203       RCC->APB2RSTR &= ~RCC_APB2Periph;
000310  4a17              LDR      r2,|L1.880|
000312  68d2              LDR      r2,[r2,#0xc]
000314  4382              BICS     r2,r2,r0
000316  4b16              LDR      r3,|L1.880|
000318  60da              STR      r2,[r3,#0xc]
                  |L1.794|
;;;1204     }
;;;1205   }
00031a  4770              BX       lr
;;;1206   
                          ENDP

                  RCC_APB1PeriphResetCmd PROC
;;;1222     */
;;;1223   void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
00031c  b129              CBZ      r1,|L1.810|
;;;1224   {
;;;1225     /* Check the parameters */
;;;1226     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;1227     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1228     if (NewState != DISABLE)
;;;1229     {
;;;1230       RCC->APB1RSTR |= RCC_APB1Periph;
00031e  4a14              LDR      r2,|L1.880|
000320  6912              LDR      r2,[r2,#0x10]
000322  4302              ORRS     r2,r2,r0
000324  4b12              LDR      r3,|L1.880|
000326  611a              STR      r2,[r3,#0x10]
000328  e004              B        |L1.820|
                  |L1.810|
;;;1231     }
;;;1232     else
;;;1233     {
;;;1234       RCC->APB1RSTR &= ~RCC_APB1Periph;
00032a  4a11              LDR      r2,|L1.880|
00032c  6912              LDR      r2,[r2,#0x10]
00032e  4382              BICS     r2,r2,r0
000330  4b0f              LDR      r3,|L1.880|
000332  611a              STR      r2,[r3,#0x10]
                  |L1.820|
;;;1235     }
;;;1236   }
000334  4770              BX       lr
;;;1237   
                          ENDP

                  RCC_BackupResetCmd PROC
;;;1243     */
;;;1244   void RCC_BackupResetCmd(FunctionalState NewState)
000336  491a              LDR      r1,|L1.928|
;;;1245   {
;;;1246     /* Check the parameters */
;;;1247     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1248     *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
000338  6008              STR      r0,[r1,#0]
;;;1249   }
00033a  4770              BX       lr
;;;1250   
                          ENDP

                  RCC_ClockSecuritySystemCmd PROC
;;;1256     */
;;;1257   void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
00033c  490f              LDR      r1,|L1.892|
;;;1258   {
;;;1259     /* Check the parameters */
;;;1260     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1261     *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
00033e  64c8              STR      r0,[r1,#0x4c]
;;;1262   }
000340  4770              BX       lr
;;;1263   
                          ENDP

                  RCC_MCOConfig PROC
;;;1288     */
;;;1289   void RCC_MCOConfig(uint8_t RCC_MCO)
000342  490b              LDR      r1,|L1.880|
;;;1290   {
;;;1291     /* Check the parameters */
;;;1292     assert_param(IS_RCC_MCO(RCC_MCO));
;;;1293   
;;;1294     /* Perform Byte access to MCO bits to select the MCO source */
;;;1295     *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
000344  71c8              STRB     r0,[r1,#7]
;;;1296   }
000346  4770              BX       lr
;;;1297   
                          ENDP

                  RCC_ClearFlag PROC
;;;1377     */
;;;1378   void RCC_ClearFlag(void)
000348  4809              LDR      r0,|L1.880|
;;;1379   {
;;;1380     /* Set RMVF bit to clear the reset flags */
;;;1381     RCC->CSR |= CSR_RMVF_Set;
00034a  6a40              LDR      r0,[r0,#0x24]
00034c  f0407080          ORR      r0,r0,#0x1000000
000350  4907              LDR      r1,|L1.880|
000352  6248              STR      r0,[r1,#0x24]
;;;1382   }
000354  4770              BX       lr
;;;1383   
                          ENDP

                  RCC_GetITStatus PROC
;;;1408     */
;;;1409   ITStatus RCC_GetITStatus(uint8_t RCC_IT)
000356  4601              MOV      r1,r0
;;;1410   {
;;;1411     ITStatus bitstatus = RESET;
000358  2000              MOVS     r0,#0
;;;1412     /* Check the parameters */
;;;1413     assert_param(IS_RCC_GET_IT(RCC_IT));
;;;1414   
;;;1415     /* Check the status of the specified RCC interrupt */
;;;1416     if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
00035a  4a05              LDR      r2,|L1.880|
00035c  6892              LDR      r2,[r2,#8]
00035e  420a              TST      r2,r1
000360  d001              BEQ      |L1.870|
;;;1417     {
;;;1418       bitstatus = SET;
000362  2001              MOVS     r0,#1
000364  e000              B        |L1.872|
                  |L1.870|
;;;1419     }
;;;1420     else
;;;1421     {
;;;1422       bitstatus = RESET;
000366  2000              MOVS     r0,#0
                  |L1.872|
;;;1423     }
;;;1424   
;;;1425     /* Return the RCC_IT status */
;;;1426     return  bitstatus;
;;;1427   }
000368  4770              BX       lr
;;;1428   
                          ENDP

                  RCC_ClearITPendingBit PROC
;;;1454     */
;;;1455   void RCC_ClearITPendingBit(uint8_t RCC_IT)
00036a  4901              LDR      r1,|L1.880|
;;;1456   {
;;;1457     /* Check the parameters */
;;;1458     assert_param(IS_RCC_CLEAR_IT(RCC_IT));
;;;1459   
;;;1460     /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
;;;1461        pending bits */
;;;1462     *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
00036c  7288              STRB     r0,[r1,#0xa]
;;;1463   }
00036e  4770              BX       lr
;;;1464   
                          ENDP

                  |L1.880|
                          DCD      0x40021000
                  |L1.884|
                          DCD      0xf8ff0000
                  |L1.888|
                          DCD      0xfef6ffff
                  |L1.892|
                          DCD      0x42420000
                  |L1.896|
                          DCD      0x424200d8
                  |L1.900|
                          DCD      0x40021020
                  |L1.904|
                          DCD      0x42420480
                  |L1.908|
                          DCD      0x4242043c
                  |L1.912|
                          DCD      0x007a1200
                  |L1.916|
                          DCD      0x003d0900
                  |L1.920|
                          DCD      APBAHBPrescTable
                  |L1.924|
                          DCD      ADCPrescTable
                  |L1.928|
                          DCD      0x42420440

                          AREA ||.data||, DATA, ALIGN=0

                  APBAHBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  01020304          DCB      0x01,0x02,0x03,0x04
000008  01020304          DCB      0x01,0x02,0x03,0x04
00000c  06070809          DCB      0x06,0x07,0x08,0x09
                  ADCPrescTable
000010  02040608          DCB      0x02,0x04,0x06,0x08
