; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [-c --asm --interleave -o.\obj\misc.o --depend=.\obj\misc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL FWlib\SRC\misc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NVIC_PriorityGroupConfig PROC
;;;94       */
;;;95     void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
000000  4936              LDR      r1,|L1.220|
;;;96     {
;;;97       /* Check the parameters */
;;;98       assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
;;;99       
;;;100      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;101      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
000002  4301              ORRS     r1,r1,r0
000004  4a36              LDR      r2,|L1.224|
000006  6011              STR      r1,[r2,#0]
;;;102    }
000008  4770              BX       lr
;;;103    
                          ENDP

                  NVIC_Init PROC
;;;110      */
;;;111    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
00000a  b570              PUSH     {r4-r6,lr}
;;;112    {
;;;113      uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
00000c  2100              MOVS     r1,#0
00000e  2300              MOVS     r3,#0
000010  220f              MOVS     r2,#0xf
;;;114      
;;;115      /* Check the parameters */
;;;116      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;117      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
;;;118      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
;;;119        
;;;120      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
000012  78c4              LDRB     r4,[r0,#3]
000014  b34c              CBZ      r4,|L1.106|
;;;121      {
;;;122        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;123        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
000016  4c32              LDR      r4,|L1.224|
000018  6824              LDR      r4,[r4,#0]
00001a  f40464e0          AND      r4,r4,#0x700
00001e  f5c464e0          RSB      r4,r4,#0x700
000022  ea4f2114          LSR      r1,r4,#8
;;;124        tmppre = (0x4 - tmppriority);
000026  f1c10304          RSB      r3,r1,#4
;;;125        tmpsub = tmpsub >> tmppriority;
00002a  fa22f201          LSR      r2,r2,r1
;;;126    
;;;127        tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
00002e  7844              LDRB     r4,[r0,#1]
000030  fa04f103          LSL      r1,r4,r3
;;;128        tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
000034  7884              LDRB     r4,[r0,#2]
000036  ea040402          AND      r4,r4,r2
00003a  ea440101          ORR      r1,r4,r1
;;;129        tmppriority = tmppriority << 0x04;
00003e  ea4f1101          LSL      r1,r1,#4
;;;130            
;;;131        NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
000042  4c28              LDR      r4,|L1.228|
000044  7806              LDRB     r6,[r0,#0]
000046  55a1              STRB     r1,[r4,r6]
;;;132        
;;;133        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;134        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
000048  7804              LDRB     r4,[r0,#0]
00004a  f004051f          AND      r5,r4,#0x1f
00004e  f04f0401          MOV      r4,#1
000052  fa04f405          LSL      r4,r4,r5
000056  7805              LDRB     r5,[r0,#0]
000058  ea4f1565          ASR      r5,r5,#5
00005c  f04f26e0          MOV      r6,#0xe000e000
000060  eb060585          ADD      r5,r6,r5,LSL #2
000064  f8c54100          STR      r4,[r5,#0x100]
000068  e009              B        |L1.126|
                  |L1.106|
;;;135          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;136      }
;;;137      else
;;;138      {
;;;139        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;140        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
00006a  7804              LDRB     r4,[r0,#0]
00006c  f004051f          AND      r5,r4,#0x1f
000070  2401              MOVS     r4,#1
000072  40ac              LSLS     r4,r4,r5
000074  4d1c              LDR      r5,|L1.232|
000076  7806              LDRB     r6,[r0,#0]
000078  1176              ASRS     r6,r6,#5
00007a  f8454026          STR      r4,[r5,r6,LSL #2]
                  |L1.126|
;;;141          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;142      }
;;;143    }
00007e  bd70              POP      {r4-r6,pc}
;;;144    
                          ENDP

                  NVIC_SetVectorTable PROC
;;;153      */
;;;154    void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
000080  4a1a              LDR      r2,|L1.236|
;;;155    { 
;;;156      /* Check the parameters */
;;;157      assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
;;;158      assert_param(IS_NVIC_OFFSET(Offset));  
;;;159       
;;;160      SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
000082  400a              ANDS     r2,r2,r1
000084  4302              ORRS     r2,r2,r0
000086  4b1a              LDR      r3,|L1.240|
000088  601a              STR      r2,[r3,#0]
;;;161    }
00008a  4770              BX       lr
;;;162    
                          ENDP

                  NVIC_SystemLPConfig PROC
;;;172      */
;;;173    void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
00008c  b141              CBZ      r1,|L1.160|
;;;174    {
;;;175      /* Check the parameters */
;;;176      assert_param(IS_NVIC_LP(LowPowerMode));
;;;177      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;178      
;;;179      if (NewState != DISABLE)
;;;180      {
;;;181        SCB->SCR |= LowPowerMode;
00008e  4a19              LDR      r2,|L1.244|
000090  6812              LDR      r2,[r2,#0]
000092  ea420200          ORR      r2,r2,r0
000096  f04f23e0          MOV      r3,#0xe000e000
00009a  f8c32d10          STR      r2,[r3,#0xd10]
00009e  e007              B        |L1.176|
                  |L1.160|
;;;182      }
;;;183      else
;;;184      {
;;;185        SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
0000a0  4a14              LDR      r2,|L1.244|
0000a2  6812              LDR      r2,[r2,#0]
0000a4  ea220200          BIC      r2,r2,r0
0000a8  f04f23e0          MOV      r3,#0xe000e000
0000ac  f8c32d10          STR      r2,[r3,#0xd10]
                  |L1.176|
;;;186      }
;;;187    }
0000b0  4770              BX       lr
;;;188    
                          ENDP

                  SysTick_CLKSourceConfig PROC
;;;196      */
;;;197    void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
0000b2  2804              CMP      r0,#4
;;;198    {
;;;199      /* Check the parameters */
;;;200      assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
;;;201      if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
0000b4  d108              BNE      |L1.200|
;;;202      {
;;;203        SysTick->CTRL |= SysTick_CLKSource_HCLK;
0000b6  f04f21e0          MOV      r1,#0xe000e000
0000ba  6909              LDR      r1,[r1,#0x10]
0000bc  f0410104          ORR      r1,r1,#4
0000c0  f04f22e0          MOV      r2,#0xe000e000
0000c4  6111              STR      r1,[r2,#0x10]
0000c6  e007              B        |L1.216|
                  |L1.200|
;;;204      }
;;;205      else
;;;206      {
;;;207        SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
0000c8  f04f21e0          MOV      r1,#0xe000e000
0000cc  6909              LDR      r1,[r1,#0x10]
0000ce  f0210104          BIC      r1,r1,#4
0000d2  f04f22e0          MOV      r2,#0xe000e000
0000d6  6111              STR      r1,[r2,#0x10]
                  |L1.216|
;;;208      }
;;;209    }
0000d8  4770              BX       lr
;;;210    
                          ENDP

0000da  0000              DCW      0x0000
                  |L1.220|
                          DCD      0x05fa0000
                  |L1.224|
                          DCD      0xe000ed0c
                  |L1.228|
                          DCD      0xe000e400
                  |L1.232|
                          DCD      0xe000e180
                  |L1.236|
                          DCD      0x1fffff80
                  |L1.240|
                          DCD      0xe000ed08
                  |L1.244|
                          DCD      0xe000ed10
