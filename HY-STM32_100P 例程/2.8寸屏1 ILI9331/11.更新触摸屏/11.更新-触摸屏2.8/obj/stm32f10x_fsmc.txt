; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [-c --asm --interleave -o.\obj\stm32f10x_fsmc.o --depend=.\obj\stm32f10x_fsmc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL FWlib\SRC\stm32f10x_fsmc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  FSMC_NORSRAMDeInit PROC
;;;100      */
;;;101    void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
000000  b930              CBNZ     r0,|L1.16|
;;;102    {
;;;103      /* Check the parameter */
;;;104      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
;;;105      
;;;106      /* FSMC_Bank1_NORSRAM1 */
;;;107      if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
;;;108      {
;;;109        FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
000002  f24301db          MOV      r1,#0x30db
000006  f04f4220          MOV      r2,#0xa0000000
00000a  f8421020          STR      r1,[r2,r0,LSL #2]
00000e  e005              B        |L1.28|
                  |L1.16|
;;;110      }
;;;111      /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
;;;112      else
;;;113      {   
;;;114        FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
000010  f24301d2          MOV      r1,#0x30d2
000014  f04f4220          MOV      r2,#0xa0000000
000018  f8421020          STR      r1,[r2,r0,LSL #2]
                  |L1.28|
;;;115      }
;;;116      FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
00001c  f06f4270          MVN      r2,#0xf0000000
000020  1c41              ADDS     r1,r0,#1
000022  f04f4320          MOV      r3,#0xa0000000
000026  f8432021          STR      r2,[r3,r1,LSL #2]
;;;117      FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
00002a  4611              MOV      r1,r2
00002c  461a              MOV      r2,r3
00002e  eb020280          ADD      r2,r2,r0,LSL #2
000032  f8c21104          STR      r1,[r2,#0x104]
;;;118    }
000036  4770              BX       lr
;;;119    
                          ENDP

                  FSMC_NANDDeInit PROC
;;;127      */
;;;128    void FSMC_NANDDeInit(uint32_t FSMC_Bank)
000038  2810              CMP      r0,#0x10
;;;129    {
;;;130      /* Check the parameter */
;;;131      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;132      
;;;133      if(FSMC_Bank == FSMC_Bank2_NAND)
00003a  d10a              BNE      |L1.82|
;;;134      {
;;;135        /* Set the FSMC_Bank2 registers to their reset values */
;;;136        FSMC_Bank2->PCR2 = 0x00000018;
00003c  2118              MOVS     r1,#0x18
00003e  f04f4220          MOV      r2,#0xa0000000
000042  6611              STR      r1,[r2,#0x60]
;;;137        FSMC_Bank2->SR2 = 0x00000040;
000044  2140              MOVS     r1,#0x40
000046  6651              STR      r1,[r2,#0x64]
;;;138        FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
000048  f04f31fc          MOV      r1,#0xfcfcfcfc
00004c  6691              STR      r1,[r2,#0x68]
;;;139        FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
00004e  66d1              STR      r1,[r2,#0x6c]
000050  e010              B        |L1.116|
                  |L1.82|
;;;140      }
;;;141      /* FSMC_Bank3_NAND */  
;;;142      else
;;;143      {
;;;144        /* Set the FSMC_Bank3 registers to their reset values */
;;;145        FSMC_Bank3->PCR3 = 0x00000018;
000052  2118              MOVS     r1,#0x18
000054  4afc              LDR      r2,|L1.1096|
000056  6011              STR      r1,[r2,#0]
;;;146        FSMC_Bank3->SR3 = 0x00000040;
000058  f04f0140          MOV      r1,#0x40
00005c  f04f4220          MOV      r2,#0xa0000000
000060  f8c21084          STR      r1,[r2,#0x84]
;;;147        FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
000064  f04f31fc          MOV      r1,#0xfcfcfcfc
000068  4af8              LDR      r2,|L1.1100|
00006a  6011              STR      r1,[r2,#0]
;;;148        FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
00006c  f04f4220          MOV      r2,#0xa0000000
000070  f8c2108c          STR      r1,[r2,#0x8c]
                  |L1.116|
;;;149      }  
;;;150    }
000074  4770              BX       lr
;;;151    
                          ENDP

                  FSMC_PCCARDDeInit PROC
;;;156      */
;;;157    void FSMC_PCCARDDeInit(void)
000076  2018              MOVS     r0,#0x18
;;;158    {
;;;159      /* Set the FSMC_Bank4 registers to their reset values */
;;;160      FSMC_Bank4->PCR4 = 0x00000018; 
000078  49f5              LDR      r1,|L1.1104|
00007a  6008              STR      r0,[r1,#0]
;;;161      FSMC_Bank4->SR4 = 0x00000000;	
00007c  f04f0000          MOV      r0,#0
000080  f04f4120          MOV      r1,#0xa0000000
000084  f8c100a4          STR      r0,[r1,#0xa4]
;;;162      FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
000088  f04f30fc          MOV      r0,#0xfcfcfcfc
00008c  49f1              LDR      r1,|L1.1108|
00008e  6008              STR      r0,[r1,#0]
;;;163      FSMC_Bank4->PATT4 = 0xFCFCFCFC;
000090  f1010104          ADD      r1,r1,#4
000094  6008              STR      r0,[r1,#0]
;;;164      FSMC_Bank4->PIO4 = 0xFCFCFCFC;
000096  f1010104          ADD      r1,r1,#4
00009a  6008              STR      r0,[r1,#0]
;;;165    }
00009c  4770              BX       lr
;;;166    
                          ENDP

                  FSMC_NORSRAMInit PROC
;;;174      */
;;;175    void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
00009e  e9d01201          LDRD     r1,r2,[r0,#4]
;;;176    { 
;;;177      /* Check the parameters */
;;;178      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_NORSRAMInitStruct->FSMC_Bank));
;;;179      assert_param(IS_FSMC_MUX(FSMC_NORSRAMInitStruct->FSMC_DataAddressMux));
;;;180      assert_param(IS_FSMC_MEMORY(FSMC_NORSRAMInitStruct->FSMC_MemoryType));
;;;181      assert_param(IS_FSMC_MEMORY_WIDTH(FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth));
;;;182      assert_param(IS_FSMC_BURSTMODE(FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode));
;;;183      assert_param(IS_FSMC_WAIT_POLARITY(FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity));
;;;184      assert_param(IS_FSMC_WRAP_MODE(FSMC_NORSRAMInitStruct->FSMC_WrapMode));
;;;185      assert_param(IS_FSMC_WAIT_SIGNAL_ACTIVE(FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive));
;;;186      assert_param(IS_FSMC_WRITE_OPERATION(FSMC_NORSRAMInitStruct->FSMC_WriteOperation));
;;;187      assert_param(IS_FSMC_WAITE_SIGNAL(FSMC_NORSRAMInitStruct->FSMC_WaitSignal));
;;;188      assert_param(IS_FSMC_EXTENDED_MODE(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode));
;;;189      assert_param(IS_FSMC_WRITE_BURST(FSMC_NORSRAMInitStruct->FSMC_WriteBurst));  
;;;190      assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime));
;;;191      assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime));
;;;192      assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime));
;;;193      assert_param(IS_FSMC_TURNAROUND_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration));
;;;194      assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
;;;195      assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
;;;196      assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
;;;197      
;;;198      /* Bank1 NOR/SRAM control register configuration */ 
;;;199      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
0000a2  4311              ORRS     r1,r1,r2
0000a4  68c2              LDR      r2,[r0,#0xc]
0000a6  4311              ORRS     r1,r1,r2
0000a8  6902              LDR      r2,[r0,#0x10]
0000aa  4311              ORRS     r1,r1,r2
0000ac  6942              LDR      r2,[r0,#0x14]
0000ae  4311              ORRS     r1,r1,r2
0000b0  6982              LDR      r2,[r0,#0x18]
0000b2  4311              ORRS     r1,r1,r2
0000b4  69c2              LDR      r2,[r0,#0x1c]
0000b6  4311              ORRS     r1,r1,r2
0000b8  6a02              LDR      r2,[r0,#0x20]
0000ba  4311              ORRS     r1,r1,r2
0000bc  6a42              LDR      r2,[r0,#0x24]
0000be  4311              ORRS     r1,r1,r2
0000c0  6a82              LDR      r2,[r0,#0x28]
0000c2  4311              ORRS     r1,r1,r2
0000c4  6ac2              LDR      r2,[r0,#0x2c]
0000c6  4311              ORRS     r1,r1,r2
0000c8  f04f4320          MOV      r3,#0xa0000000
0000cc  6802              LDR      r2,[r0,#0]
0000ce  f8431022          STR      r1,[r3,r2,LSL #2]
;;;200                (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
;;;201                FSMC_NORSRAMInitStruct->FSMC_MemoryType |
;;;202                FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
;;;203                FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
;;;204                FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
;;;205                FSMC_NORSRAMInitStruct->FSMC_WrapMode |
;;;206                FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
;;;207                FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
;;;208                FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
;;;209                FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
;;;210                FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
;;;211      if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
0000d2  6881              LDR      r1,[r0,#8]
0000d4  2908              CMP      r1,#8
0000d6  d108              BNE      |L1.234|
;;;212      {
;;;213        FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_Set;
0000d8  461a              MOV      r2,r3
0000da  6801              LDR      r1,[r0,#0]
0000dc  f8521021          LDR      r1,[r2,r1,LSL #2]
0000e0  f0410140          ORR      r1,r1,#0x40
0000e4  6802              LDR      r2,[r0,#0]
0000e6  f8431022          STR      r1,[r3,r2,LSL #2]
                  |L1.234|
;;;214      }
;;;215      /* Bank1 NOR/SRAM timing register configuration */
;;;216      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
0000ea  6b01              LDR      r1,[r0,#0x30]
0000ec  6809              LDR      r1,[r1,#0]
0000ee  6b02              LDR      r2,[r0,#0x30]
0000f0  6852              LDR      r2,[r2,#4]
0000f2  ea411102          ORR      r1,r1,r2,LSL #4
0000f6  6b02              LDR      r2,[r0,#0x30]
0000f8  6892              LDR      r2,[r2,#8]
0000fa  ea412102          ORR      r1,r1,r2,LSL #8
0000fe  6b02              LDR      r2,[r0,#0x30]
000100  68d2              LDR      r2,[r2,#0xc]
000102  ea414102          ORR      r1,r1,r2,LSL #16
000106  6b02              LDR      r2,[r0,#0x30]
000108  6912              LDR      r2,[r2,#0x10]
00010a  ea415102          ORR      r1,r1,r2,LSL #20
00010e  6b02              LDR      r2,[r0,#0x30]
000110  6952              LDR      r2,[r2,#0x14]
000112  ea416102          ORR      r1,r1,r2,LSL #24
000116  6b02              LDR      r2,[r0,#0x30]
000118  6992              LDR      r2,[r2,#0x18]
00011a  4311              ORRS     r1,r1,r2
00011c  6802              LDR      r2,[r0,#0]
00011e  1c52              ADDS     r2,r2,#1
000120  f04f4320          MOV      r3,#0xa0000000
000124  f8431022          STR      r1,[r3,r2,LSL #2]
;;;217                (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
;;;218                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
;;;219                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;220                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
;;;221                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
;;;222                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
;;;223                 FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
;;;224                
;;;225        
;;;226      /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
;;;227      if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
000128  6a81              LDR      r1,[r0,#0x28]
00012a  f5b14f80          CMP      r1,#0x4000
00012e  d11a              BNE      |L1.358|
;;;228      {
;;;229        assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime));
;;;230        assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
;;;231        assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
;;;232        assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
;;;233        assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
;;;234        assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
;;;235        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
000130  6b41              LDR      r1,[r0,#0x34]
000132  6809              LDR      r1,[r1,#0]
000134  6b42              LDR      r2,[r0,#0x34]
000136  6852              LDR      r2,[r2,#4]
000138  ea411102          ORR      r1,r1,r2,LSL #4
00013c  6b42              LDR      r2,[r0,#0x34]
00013e  6892              LDR      r2,[r2,#8]
000140  ea412102          ORR      r1,r1,r2,LSL #8
000144  6b42              LDR      r2,[r0,#0x34]
000146  6912              LDR      r2,[r2,#0x10]
000148  ea415102          ORR      r1,r1,r2,LSL #20
00014c  6b42              LDR      r2,[r0,#0x34]
00014e  6952              LDR      r2,[r2,#0x14]
000150  ea416102          ORR      r1,r1,r2,LSL #24
000154  6b42              LDR      r2,[r0,#0x34]
000156  6992              LDR      r2,[r2,#0x18]
000158  4311              ORRS     r1,r1,r2
00015a  6802              LDR      r2,[r0,#0]
00015c  eb030282          ADD      r2,r3,r2,LSL #2
000160  f8c21104          STR      r1,[r2,#0x104]
000164  e008              B        |L1.376|
                  |L1.358|
;;;236                  (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
;;;237                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
;;;238                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;239                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
;;;240                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
;;;241                   FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
;;;242      }
;;;243      else
;;;244      {
;;;245        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
000166  f06f4170          MVN      r1,#0xf0000000
00016a  f04f4320          MOV      r3,#0xa0000000
00016e  6802              LDR      r2,[r0,#0]
000170  eb030282          ADD      r2,r3,r2,LSL #2
000174  f8c21104          STR      r1,[r2,#0x104]
                  |L1.376|
;;;246      }
;;;247    }
000178  4770              BX       lr
;;;248    
                          ENDP

                  FSMC_NANDInit PROC
;;;255      */
;;;256    void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
00017a  b530              PUSH     {r4,r5,lr}
;;;257    {
;;;258      uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
00017c  2100              MOVS     r1,#0
00017e  2200              MOVS     r2,#0
000180  2300              MOVS     r3,#0
;;;259        
;;;260      /* Check the parameters */
;;;261      assert_param( IS_FSMC_NAND_BANK(FSMC_NANDInitStruct->FSMC_Bank));
;;;262      assert_param( IS_FSMC_WAIT_FEATURE(FSMC_NANDInitStruct->FSMC_Waitfeature));
;;;263      assert_param( IS_FSMC_MEMORY_WIDTH(FSMC_NANDInitStruct->FSMC_MemoryDataWidth));
;;;264      assert_param( IS_FSMC_ECC_STATE(FSMC_NANDInitStruct->FSMC_ECC));
;;;265      assert_param( IS_FSMC_ECCPAGE_SIZE(FSMC_NANDInitStruct->FSMC_ECCPageSize));
;;;266      assert_param( IS_FSMC_TCLR_TIME(FSMC_NANDInitStruct->FSMC_TCLRSetupTime));
;;;267      assert_param( IS_FSMC_TAR_TIME(FSMC_NANDInitStruct->FSMC_TARSetupTime));
;;;268      assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime));
;;;269      assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime));
;;;270      assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime));
;;;271      assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime));
;;;272      assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime));
;;;273      assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
;;;274      assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
;;;275      assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
;;;276      
;;;277      /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
;;;278      tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
000182  6844              LDR      r4,[r0,#4]
000184  f0440408          ORR      r4,r4,#8
000188  6885              LDR      r5,[r0,#8]
00018a  432c              ORRS     r4,r4,r5
00018c  68c5              LDR      r5,[r0,#0xc]
00018e  432c              ORRS     r4,r4,r5
000190  6905              LDR      r5,[r0,#0x10]
000192  432c              ORRS     r4,r4,r5
000194  6945              LDR      r5,[r0,#0x14]
000196  ea442445          ORR      r4,r4,r5,LSL #9
00019a  6985              LDR      r5,[r0,#0x18]
00019c  ea443145          ORR      r1,r4,r5,LSL #13
;;;279                PCR_MemoryType_NAND |
;;;280                FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
;;;281                FSMC_NANDInitStruct->FSMC_ECC |
;;;282                FSMC_NANDInitStruct->FSMC_ECCPageSize |
;;;283                (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
;;;284                (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
;;;285                
;;;286      /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
;;;287      tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
0001a0  69c4              LDR      r4,[r0,#0x1c]
0001a2  6824              LDR      r4,[r4,#0]
0001a4  69c5              LDR      r5,[r0,#0x1c]
0001a6  686d              LDR      r5,[r5,#4]
0001a8  ea442405          ORR      r4,r4,r5,LSL #8
0001ac  69c5              LDR      r5,[r0,#0x1c]
0001ae  68ad              LDR      r5,[r5,#8]
0001b0  ea444405          ORR      r4,r4,r5,LSL #16
0001b4  69c5              LDR      r5,[r0,#0x1c]
0001b6  68ed              LDR      r5,[r5,#0xc]
0001b8  ea446205          ORR      r2,r4,r5,LSL #24
;;;288                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;289                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;290                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
;;;291                
;;;292      /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
;;;293      tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
0001bc  6a04              LDR      r4,[r0,#0x20]
0001be  6824              LDR      r4,[r4,#0]
0001c0  6a05              LDR      r5,[r0,#0x20]
0001c2  686d              LDR      r5,[r5,#4]
0001c4  ea442405          ORR      r4,r4,r5,LSL #8
0001c8  6a05              LDR      r5,[r0,#0x20]
0001ca  68ad              LDR      r5,[r5,#8]
0001cc  ea444405          ORR      r4,r4,r5,LSL #16
0001d0  6a05              LDR      r5,[r0,#0x20]
0001d2  68ed              LDR      r5,[r5,#0xc]
0001d4  ea446305          ORR      r3,r4,r5,LSL #24
;;;294                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;295                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;296                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
;;;297      
;;;298      if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
0001d8  6804              LDR      r4,[r0,#0]
0001da  2c10              CMP      r4,#0x10
0001dc  d105              BNE      |L1.490|
;;;299      {
;;;300        /* FSMC_Bank2_NAND registers configuration */
;;;301        FSMC_Bank2->PCR2 = tmppcr;
0001de  f04f4420          MOV      r4,#0xa0000000
0001e2  6621              STR      r1,[r4,#0x60]
;;;302        FSMC_Bank2->PMEM2 = tmppmem;
0001e4  66a2              STR      r2,[r4,#0x68]
;;;303        FSMC_Bank2->PATT2 = tmppatt;
0001e6  66e3              STR      r3,[r4,#0x6c]
0001e8  e007              B        |L1.506|
                  |L1.490|
;;;304      }
;;;305      else
;;;306      {
;;;307        /* FSMC_Bank3_NAND registers configuration */
;;;308        FSMC_Bank3->PCR3 = tmppcr;
0001ea  4c97              LDR      r4,|L1.1096|
0001ec  6021              STR      r1,[r4,#0]
;;;309        FSMC_Bank3->PMEM3 = tmppmem;
0001ee  f04f4420          MOV      r4,#0xa0000000
0001f2  f8c42088          STR      r2,[r4,#0x88]
;;;310        FSMC_Bank3->PATT3 = tmppatt;
0001f6  4c98              LDR      r4,|L1.1112|
0001f8  6023              STR      r3,[r4,#0]
                  |L1.506|
;;;311      }
;;;312    }
0001fa  bd30              POP      {r4,r5,pc}
;;;313    
                          ENDP

                  FSMC_PCCARDInit PROC
;;;320      */
;;;321    void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
0001fc  6801              LDR      r1,[r0,#0]
;;;322    {
;;;323      /* Check the parameters */
;;;324      assert_param(IS_FSMC_WAIT_FEATURE(FSMC_PCCARDInitStruct->FSMC_Waitfeature));
;;;325      assert_param(IS_FSMC_TCLR_TIME(FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime));
;;;326      assert_param(IS_FSMC_TAR_TIME(FSMC_PCCARDInitStruct->FSMC_TARSetupTime));
;;;327     
;;;328      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime));
;;;329      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime));
;;;330      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime));
;;;331      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime));
;;;332      
;;;333      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime));
;;;334      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
;;;335      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
;;;336      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
;;;337      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime));
;;;338      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
;;;339      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
;;;340      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
;;;341      
;;;342      /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
;;;343      FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
0001fe  f0410110          ORR      r1,r1,#0x10
000202  6842              LDR      r2,[r0,#4]
000204  ea412142          ORR      r1,r1,r2,LSL #9
000208  6882              LDR      r2,[r0,#8]
00020a  ea413142          ORR      r1,r1,r2,LSL #13
00020e  4a90              LDR      r2,|L1.1104|
000210  6011              STR      r1,[r2,#0]
;;;344                         FSMC_MemoryDataWidth_16b |  
;;;345                         (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
;;;346                         (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
;;;347                
;;;348      /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
;;;349      FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
000212  68c1              LDR      r1,[r0,#0xc]
000214  6809              LDR      r1,[r1,#0]
000216  68c2              LDR      r2,[r0,#0xc]
000218  6852              LDR      r2,[r2,#4]
00021a  ea412102          ORR      r1,r1,r2,LSL #8
00021e  68c2              LDR      r2,[r0,#0xc]
000220  6892              LDR      r2,[r2,#8]
000222  ea414102          ORR      r1,r1,r2,LSL #16
000226  68c2              LDR      r2,[r0,#0xc]
000228  68d2              LDR      r2,[r2,#0xc]
00022a  ea416102          ORR      r1,r1,r2,LSL #24
00022e  4a89              LDR      r2,|L1.1108|
000230  6011              STR      r1,[r2,#0]
;;;350                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;351                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;352                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
;;;353                
;;;354      /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
;;;355      FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
000232  6901              LDR      r1,[r0,#0x10]
000234  6809              LDR      r1,[r1,#0]
000236  6902              LDR      r2,[r0,#0x10]
000238  6852              LDR      r2,[r2,#4]
00023a  ea412102          ORR      r1,r1,r2,LSL #8
00023e  6902              LDR      r2,[r0,#0x10]
000240  6892              LDR      r2,[r2,#8]
000242  ea414102          ORR      r1,r1,r2,LSL #16
000246  6902              LDR      r2,[r0,#0x10]
000248  68d2              LDR      r2,[r2,#0xc]
00024a  ea416102          ORR      r1,r1,r2,LSL #24
00024e  4a83              LDR      r2,|L1.1116|
000250  6011              STR      r1,[r2,#0]
;;;356                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;357                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;358                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
;;;359                
;;;360      /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
;;;361      FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
000252  6941              LDR      r1,[r0,#0x14]
000254  6809              LDR      r1,[r1,#0]
000256  6942              LDR      r2,[r0,#0x14]
000258  6852              LDR      r2,[r2,#4]
00025a  ea412102          ORR      r1,r1,r2,LSL #8
00025e  6942              LDR      r2,[r0,#0x14]
000260  6892              LDR      r2,[r2,#8]
000262  ea414102          ORR      r1,r1,r2,LSL #16
000266  6942              LDR      r2,[r0,#0x14]
000268  68d2              LDR      r2,[r2,#0xc]
00026a  ea416102          ORR      r1,r1,r2,LSL #24
00026e  f04f4220          MOV      r2,#0xa0000000
000272  f8c210b0          STR      r1,[r2,#0xb0]
;;;362                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;363                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;364                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
;;;365    }
000276  4770              BX       lr
;;;366    
                          ENDP

                  FSMC_NORSRAMStructInit PROC
;;;372      */
;;;373    void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
000278  2100              MOVS     r1,#0
;;;374    {  
;;;375      /* Reset NOR/SRAM Init structure parameters values */
;;;376      FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
00027a  6001              STR      r1,[r0,#0]
;;;377      FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
00027c  2102              MOVS     r1,#2
00027e  6041              STR      r1,[r0,#4]
;;;378      FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
000280  2100              MOVS     r1,#0
000282  6081              STR      r1,[r0,#8]
;;;379      FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
000284  60c1              STR      r1,[r0,#0xc]
;;;380      FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
000286  6101              STR      r1,[r0,#0x10]
;;;381      FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
000288  6141              STR      r1,[r0,#0x14]
;;;382      FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
00028a  6181              STR      r1,[r0,#0x18]
;;;383      FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
00028c  61c1              STR      r1,[r0,#0x1c]
;;;384      FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
00028e  f44f5180          MOV      r1,#0x1000
000292  6201              STR      r1,[r0,#0x20]
;;;385      FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
000294  0049              LSLS     r1,r1,#1
000296  6241              STR      r1,[r0,#0x24]
;;;386      FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
000298  2100              MOVS     r1,#0
00029a  6281              STR      r1,[r0,#0x28]
;;;387      FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
00029c  62c1              STR      r1,[r0,#0x2c]
;;;388      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
00029e  210f              MOVS     r1,#0xf
0002a0  6b02              LDR      r2,[r0,#0x30]
0002a2  6011              STR      r1,[r2,#0]
;;;389      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
0002a4  6b02              LDR      r2,[r0,#0x30]
0002a6  6051              STR      r1,[r2,#4]
;;;390      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
0002a8  21ff              MOVS     r1,#0xff
0002aa  6b02              LDR      r2,[r0,#0x30]
0002ac  6091              STR      r1,[r2,#8]
;;;391      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
0002ae  210f              MOVS     r1,#0xf
0002b0  6b02              LDR      r2,[r0,#0x30]
0002b2  60d1              STR      r1,[r2,#0xc]
;;;392      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
0002b4  6b02              LDR      r2,[r0,#0x30]
0002b6  6111              STR      r1,[r2,#0x10]
;;;393      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
0002b8  6b02              LDR      r2,[r0,#0x30]
0002ba  6151              STR      r1,[r2,#0x14]
;;;394      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
0002bc  2100              MOVS     r1,#0
0002be  6b02              LDR      r2,[r0,#0x30]
0002c0  6191              STR      r1,[r2,#0x18]
;;;395      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
0002c2  210f              MOVS     r1,#0xf
0002c4  6b42              LDR      r2,[r0,#0x34]
0002c6  6011              STR      r1,[r2,#0]
;;;396      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
0002c8  6b42              LDR      r2,[r0,#0x34]
0002ca  6051              STR      r1,[r2,#4]
;;;397      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
0002cc  21ff              MOVS     r1,#0xff
0002ce  6b42              LDR      r2,[r0,#0x34]
0002d0  6091              STR      r1,[r2,#8]
;;;398      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
0002d2  210f              MOVS     r1,#0xf
0002d4  6b42              LDR      r2,[r0,#0x34]
0002d6  60d1              STR      r1,[r2,#0xc]
;;;399      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
0002d8  6b42              LDR      r2,[r0,#0x34]
0002da  6111              STR      r1,[r2,#0x10]
;;;400      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
0002dc  6b42              LDR      r2,[r0,#0x34]
0002de  6151              STR      r1,[r2,#0x14]
;;;401      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
0002e0  2100              MOVS     r1,#0
0002e2  6b42              LDR      r2,[r0,#0x34]
0002e4  6191              STR      r1,[r2,#0x18]
;;;402    }
0002e6  4770              BX       lr
;;;403    
                          ENDP

                  FSMC_NANDStructInit PROC
;;;409      */
;;;410    void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
0002e8  2110              MOVS     r1,#0x10
;;;411    { 
;;;412      /* Reset NAND Init structure parameters values */
;;;413      FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
0002ea  6001              STR      r1,[r0,#0]
;;;414      FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
0002ec  2100              MOVS     r1,#0
0002ee  6041              STR      r1,[r0,#4]
;;;415      FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
0002f0  6081              STR      r1,[r0,#8]
;;;416      FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
0002f2  60c1              STR      r1,[r0,#0xc]
;;;417      FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
0002f4  6101              STR      r1,[r0,#0x10]
;;;418      FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
0002f6  6141              STR      r1,[r0,#0x14]
;;;419      FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
0002f8  6181              STR      r1,[r0,#0x18]
;;;420      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
0002fa  21fc              MOVS     r1,#0xfc
0002fc  69c2              LDR      r2,[r0,#0x1c]
0002fe  6011              STR      r1,[r2,#0]
;;;421      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000300  69c2              LDR      r2,[r0,#0x1c]
000302  6051              STR      r1,[r2,#4]
;;;422      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000304  69c2              LDR      r2,[r0,#0x1c]
000306  6091              STR      r1,[r2,#8]
;;;423      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
000308  69c2              LDR      r2,[r0,#0x1c]
00030a  60d1              STR      r1,[r2,#0xc]
;;;424      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
00030c  6a02              LDR      r2,[r0,#0x20]
00030e  6011              STR      r1,[r2,#0]
;;;425      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000310  6a02              LDR      r2,[r0,#0x20]
000312  6051              STR      r1,[r2,#4]
;;;426      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000314  6a02              LDR      r2,[r0,#0x20]
000316  6091              STR      r1,[r2,#8]
;;;427      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
000318  6a02              LDR      r2,[r0,#0x20]
00031a  60d1              STR      r1,[r2,#0xc]
;;;428    }
00031c  4770              BX       lr
;;;429    
                          ENDP

                  FSMC_PCCARDStructInit PROC
;;;435      */
;;;436    void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
00031e  2100              MOVS     r1,#0
;;;437    {
;;;438      /* Reset PCCARD Init structure parameters values */
;;;439      FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
000320  6001              STR      r1,[r0,#0]
;;;440      FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
000322  6041              STR      r1,[r0,#4]
;;;441      FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
000324  6081              STR      r1,[r0,#8]
;;;442      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000326  21fc              MOVS     r1,#0xfc
000328  68c2              LDR      r2,[r0,#0xc]
00032a  6011              STR      r1,[r2,#0]
;;;443      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
00032c  68c2              LDR      r2,[r0,#0xc]
00032e  6051              STR      r1,[r2,#4]
;;;444      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000330  68c2              LDR      r2,[r0,#0xc]
000332  6091              STR      r1,[r2,#8]
;;;445      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
000334  68c2              LDR      r2,[r0,#0xc]
000336  60d1              STR      r1,[r2,#0xc]
;;;446      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000338  6902              LDR      r2,[r0,#0x10]
00033a  6011              STR      r1,[r2,#0]
;;;447      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
00033c  6902              LDR      r2,[r0,#0x10]
00033e  6051              STR      r1,[r2,#4]
;;;448      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000340  6902              LDR      r2,[r0,#0x10]
000342  6091              STR      r1,[r2,#8]
;;;449      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
000344  6902              LDR      r2,[r0,#0x10]
000346  60d1              STR      r1,[r2,#0xc]
;;;450      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000348  6942              LDR      r2,[r0,#0x14]
00034a  6011              STR      r1,[r2,#0]
;;;451      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
00034c  6942              LDR      r2,[r0,#0x14]
00034e  6051              STR      r1,[r2,#4]
;;;452      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000350  6942              LDR      r2,[r0,#0x14]
000352  6091              STR      r1,[r2,#8]
;;;453      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
000354  6942              LDR      r2,[r0,#0x14]
000356  60d1              STR      r1,[r2,#0xc]
;;;454    }
000358  4770              BX       lr
;;;455    
                          ENDP

                  FSMC_NORSRAMCmd PROC
;;;466      */
;;;467    void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
00035a  b151              CBZ      r1,|L1.882|
;;;468    {
;;;469      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
;;;470      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;471      
;;;472      if (NewState != DISABLE)
;;;473      {
;;;474        /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
;;;475        FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_Set;
00035c  f04f4220          MOV      r2,#0xa0000000
000360  f8522020          LDR      r2,[r2,r0,LSL #2]
000364  f0420201          ORR      r2,r2,#1
000368  f04f4320          MOV      r3,#0xa0000000
00036c  f8432020          STR      r2,[r3,r0,LSL #2]
000370  e009              B        |L1.902|
                  |L1.882|
;;;476      }
;;;477      else
;;;478      {
;;;479        /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
;;;480        FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_Reset;
000372  f04f4220          MOV      r2,#0xa0000000
000376  f8522020          LDR      r2,[r2,r0,LSL #2]
00037a  4b39              LDR      r3,|L1.1120|
00037c  401a              ANDS     r2,r2,r3
00037e  f04f4320          MOV      r3,#0xa0000000
000382  f8432020          STR      r2,[r3,r0,LSL #2]
                  |L1.902|
;;;481      }
;;;482    }
000386  4770              BX       lr
;;;483    
                          ENDP

                  FSMC_NANDCmd PROC
;;;492      */
;;;493    void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
000388  b199              CBZ      r1,|L1.946|
;;;494    {
;;;495      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;496      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;497      
;;;498      if (NewState != DISABLE)
;;;499      {
;;;500        /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
;;;501        if(FSMC_Bank == FSMC_Bank2_NAND)
00038a  2810              CMP      r0,#0x10
00038c  d108              BNE      |L1.928|
;;;502        {
;;;503          FSMC_Bank2->PCR2 |= PCR_PBKEN_Set;
00038e  f04f4220          MOV      r2,#0xa0000000
000392  6e12              LDR      r2,[r2,#0x60]
000394  f0420204          ORR      r2,r2,#4
000398  f04f4320          MOV      r3,#0xa0000000
00039c  661a              STR      r2,[r3,#0x60]
00039e  e01d              B        |L1.988|
                  |L1.928|
;;;504        }
;;;505        else
;;;506        {
;;;507          FSMC_Bank3->PCR3 |= PCR_PBKEN_Set;
0003a0  4a29              LDR      r2,|L1.1096|
0003a2  6812              LDR      r2,[r2,#0]
0003a4  f0420204          ORR      r2,r2,#4
0003a8  f04f4320          MOV      r3,#0xa0000000
0003ac  f8c32080          STR      r2,[r3,#0x80]
0003b0  e014              B        |L1.988|
                  |L1.946|
;;;508        }
;;;509      }
;;;510      else
;;;511      {
;;;512        /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
;;;513        if(FSMC_Bank == FSMC_Bank2_NAND)
0003b2  2810              CMP      r0,#0x10
0003b4  d109              BNE      |L1.970|
;;;514        {
;;;515          FSMC_Bank2->PCR2 &= PCR_PBKEN_Reset;
0003b6  f04f4220          MOV      r2,#0xa0000000
0003ba  6e12              LDR      r2,[r2,#0x60]
0003bc  4b28              LDR      r3,|L1.1120|
0003be  1edb              SUBS     r3,r3,#3
0003c0  401a              ANDS     r2,r2,r3
0003c2  f04f4320          MOV      r3,#0xa0000000
0003c6  661a              STR      r2,[r3,#0x60]
0003c8  e008              B        |L1.988|
                  |L1.970|
;;;516        }
;;;517        else
;;;518        {
;;;519          FSMC_Bank3->PCR3 &= PCR_PBKEN_Reset;
0003ca  4a1f              LDR      r2,|L1.1096|
0003cc  6812              LDR      r2,[r2,#0]
0003ce  4b25              LDR      r3,|L1.1124|
0003d0  ea020203          AND      r2,r2,r3
0003d4  f04f4320          MOV      r3,#0xa0000000
0003d8  f8c32080          STR      r2,[r3,#0x80]
                  |L1.988|
;;;520        }
;;;521      }
;;;522    }
0003dc  4770              BX       lr
;;;523    
                          ENDP

                  FSMC_PCCARDCmd PROC
;;;529      */
;;;530    void FSMC_PCCARDCmd(FunctionalState NewState)
0003de  b140              CBZ      r0,|L1.1010|
;;;531    {
;;;532      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;533      
;;;534      if (NewState != DISABLE)
;;;535      {
;;;536        /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
;;;537        FSMC_Bank4->PCR4 |= PCR_PBKEN_Set;
0003e0  491b              LDR      r1,|L1.1104|
0003e2  6809              LDR      r1,[r1,#0]
0003e4  f0410104          ORR      r1,r1,#4
0003e8  f04f4220          MOV      r2,#0xa0000000
0003ec  f8c210a0          STR      r1,[r2,#0xa0]
0003f0  e008              B        |L1.1028|
                  |L1.1010|
;;;538      }
;;;539      else
;;;540      {
;;;541        /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
;;;542        FSMC_Bank4->PCR4 &= PCR_PBKEN_Reset;
0003f2  4917              LDR      r1,|L1.1104|
0003f4  6809              LDR      r1,[r1,#0]
0003f6  4a1b              LDR      r2,|L1.1124|
0003f8  ea010102          AND      r1,r1,r2
0003fc  f04f4220          MOV      r2,#0xa0000000
000400  f8c210a0          STR      r1,[r2,#0xa0]
                  |L1.1028|
;;;543      }
;;;544    }
000404  4770              BX       lr
;;;545    
                          ENDP

                  FSMC_NANDECCCmd PROC
;;;555      */
;;;556    void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
000406  b199              CBZ      r1,|L1.1072|
;;;557    {
;;;558      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;559      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;560      
;;;561      if (NewState != DISABLE)
;;;562      {
;;;563        /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
;;;564        if(FSMC_Bank == FSMC_Bank2_NAND)
000408  2810              CMP      r0,#0x10
00040a  d108              BNE      |L1.1054|
;;;565        {
;;;566          FSMC_Bank2->PCR2 |= PCR_ECCEN_Set;
00040c  f04f4220          MOV      r2,#0xa0000000
000410  6e12              LDR      r2,[r2,#0x60]
000412  f0420240          ORR      r2,r2,#0x40
000416  f04f4320          MOV      r3,#0xa0000000
00041a  661a              STR      r2,[r3,#0x60]
00041c  e02d              B        |L1.1146|
                  |L1.1054|
;;;567        }
;;;568        else
;;;569        {
;;;570          FSMC_Bank3->PCR3 |= PCR_ECCEN_Set;
00041e  4a0a              LDR      r2,|L1.1096|
000420  6812              LDR      r2,[r2,#0]
000422  f0420240          ORR      r2,r2,#0x40
000426  f04f4320          MOV      r3,#0xa0000000
00042a  f8c32080          STR      r2,[r3,#0x80]
00042e  e024              B        |L1.1146|
                  |L1.1072|
;;;571        }
;;;572      }
;;;573      else
;;;574      {
;;;575        /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
;;;576        if(FSMC_Bank == FSMC_Bank2_NAND)
000430  2810              CMP      r0,#0x10
000432  d119              BNE      |L1.1128|
;;;577        {
;;;578          FSMC_Bank2->PCR2 &= PCR_ECCEN_Reset;
000434  f04f4220          MOV      r2,#0xa0000000
000438  6e12              LDR      r2,[r2,#0x60]
00043a  4b0a              LDR      r3,|L1.1124|
00043c  3b3c              SUBS     r3,r3,#0x3c
00043e  401a              ANDS     r2,r2,r3
000440  f04f4320          MOV      r3,#0xa0000000
000444  661a              STR      r2,[r3,#0x60]
000446  e018              B        |L1.1146|
                  |L1.1096|
                          DCD      0xa0000080
                  |L1.1100|
                          DCD      0xa0000088
                  |L1.1104|
                          DCD      0xa00000a0
                  |L1.1108|
                          DCD      0xa00000a8
                  |L1.1112|
                          DCD      0xa000008c
                  |L1.1116|
                          DCD      0xa00000ac
                  |L1.1120|
                          DCD      0x000ffffe
                  |L1.1124|
                          DCD      0x000ffffb
                  |L1.1128|
;;;579        }
;;;580        else
;;;581        {
;;;582          FSMC_Bank3->PCR3 &= PCR_ECCEN_Reset;
000468  4a64              LDR      r2,|L1.1532|
00046a  6812              LDR      r2,[r2,#0]
00046c  4b64              LDR      r3,|L1.1536|
00046e  ea020203          AND      r2,r2,r3
000472  f04f4320          MOV      r3,#0xa0000000
000476  f8c32080          STR      r2,[r3,#0x80]
                  |L1.1146|
;;;583        }
;;;584      }
;;;585    }
00047a  4770              BX       lr
;;;586    
                          ENDP

                  FSMC_GetECC PROC
;;;594      */
;;;595    uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
00047c  4601              MOV      r1,r0
;;;596    {
;;;597      uint32_t eccval = 0x00000000;
00047e  2000              MOVS     r0,#0
;;;598      
;;;599      if(FSMC_Bank == FSMC_Bank2_NAND)
000480  2910              CMP      r1,#0x10
000482  d103              BNE      |L1.1164|
;;;600      {
;;;601        /* Get the ECCR2 register value */
;;;602        eccval = FSMC_Bank2->ECCR2;
000484  f04f4220          MOV      r2,#0xa0000000
000488  6f50              LDR      r0,[r2,#0x74]
00048a  e001              B        |L1.1168|
                  |L1.1164|
;;;603      }
;;;604      else
;;;605      {
;;;606        /* Get the ECCR3 register value */
;;;607        eccval = FSMC_Bank3->ECCR3;
00048c  4a5d              LDR      r2,|L1.1540|
00048e  6810              LDR      r0,[r2,#0]
                  |L1.1168|
;;;608      }
;;;609      /* Return the error correction code value */
;;;610      return(eccval);
;;;611    }
000490  4770              BX       lr
;;;612    
                          ENDP

                  FSMC_ITConfig PROC
;;;628      */
;;;629    void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
000492  b510              PUSH     {r4,lr}
;;;630    {
;;;631      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;632      assert_param(IS_FSMC_IT(FSMC_IT));	
;;;633      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;634      
;;;635      if (NewState != DISABLE)
000494  b1f2              CBZ      r2,|L1.1236|
;;;636      {
;;;637        /* Enable the selected FSMC_Bank2 interrupts */
;;;638        if(FSMC_Bank == FSMC_Bank2_NAND)
000496  2810              CMP      r0,#0x10
000498  d107              BNE      |L1.1194|
;;;639        {
;;;640          FSMC_Bank2->SR2 |= FSMC_IT;
00049a  f04f4320          MOV      r3,#0xa0000000
00049e  6e5b              LDR      r3,[r3,#0x64]
0004a0  430b              ORRS     r3,r3,r1
0004a2  f04f4420          MOV      r4,#0xa0000000
0004a6  6663              STR      r3,[r4,#0x64]
0004a8  e032              B        |L1.1296|
                  |L1.1194|
;;;641        }
;;;642        /* Enable the selected FSMC_Bank3 interrupts */
;;;643        else if (FSMC_Bank == FSMC_Bank3_NAND)
0004aa  f5b07f80          CMP      r0,#0x100
0004ae  d108              BNE      |L1.1218|
;;;644        {
;;;645          FSMC_Bank3->SR3 |= FSMC_IT;
0004b0  4b55              LDR      r3,|L1.1544|
0004b2  681b              LDR      r3,[r3,#0]
0004b4  ea430301          ORR      r3,r3,r1
0004b8  f04f4420          MOV      r4,#0xa0000000
0004bc  f8c43084          STR      r3,[r4,#0x84]
0004c0  e026              B        |L1.1296|
                  |L1.1218|
;;;646        }
;;;647        /* Enable the selected FSMC_Bank4 interrupts */
;;;648        else
;;;649        {
;;;650          FSMC_Bank4->SR4 |= FSMC_IT;    
0004c2  4b52              LDR      r3,|L1.1548|
0004c4  681b              LDR      r3,[r3,#0]
0004c6  ea430301          ORR      r3,r3,r1
0004ca  f04f4420          MOV      r4,#0xa0000000
0004ce  f8c430a4          STR      r3,[r4,#0xa4]
0004d2  e01d              B        |L1.1296|
                  |L1.1236|
;;;651        }
;;;652      }
;;;653      else
;;;654      {
;;;655        /* Disable the selected FSMC_Bank2 interrupts */
;;;656        if(FSMC_Bank == FSMC_Bank2_NAND)
0004d4  2810              CMP      r0,#0x10
0004d6  d107              BNE      |L1.1256|
;;;657        {
;;;658          
;;;659          FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
0004d8  f04f4320          MOV      r3,#0xa0000000
0004dc  6e5b              LDR      r3,[r3,#0x64]
0004de  438b              BICS     r3,r3,r1
0004e0  f04f4420          MOV      r4,#0xa0000000
0004e4  6663              STR      r3,[r4,#0x64]
0004e6  e013              B        |L1.1296|
                  |L1.1256|
;;;660        }
;;;661        /* Disable the selected FSMC_Bank3 interrupts */
;;;662        else if (FSMC_Bank == FSMC_Bank3_NAND)
0004e8  f5b07f80          CMP      r0,#0x100
0004ec  d108              BNE      |L1.1280|
;;;663        {
;;;664          FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
0004ee  4b46              LDR      r3,|L1.1544|
0004f0  681b              LDR      r3,[r3,#0]
0004f2  ea230301          BIC      r3,r3,r1
0004f6  f04f4420          MOV      r4,#0xa0000000
0004fa  f8c43084          STR      r3,[r4,#0x84]
0004fe  e007              B        |L1.1296|
                  |L1.1280|
;;;665        }
;;;666        /* Disable the selected FSMC_Bank4 interrupts */
;;;667        else
;;;668        {
;;;669          FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
000500  4b42              LDR      r3,|L1.1548|
000502  681b              LDR      r3,[r3,#0]
000504  ea230301          BIC      r3,r3,r1
000508  f04f4420          MOV      r4,#0xa0000000
00050c  f8c430a4          STR      r3,[r4,#0xa4]
                  |L1.1296|
;;;670        }
;;;671      }
;;;672    }
000510  bd10              POP      {r4,pc}
;;;673    
                          ENDP

                  FSMC_GetFlagStatus PROC
;;;688      */
;;;689    FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
000512  b510              PUSH     {r4,lr}
;;;690    {
000514  4602              MOV      r2,r0
;;;691      FlagStatus bitstatus = RESET;
000516  2000              MOVS     r0,#0
;;;692      uint32_t tmpsr = 0x00000000;
000518  2300              MOVS     r3,#0
;;;693      
;;;694      /* Check the parameters */
;;;695      assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
;;;696      assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
;;;697      
;;;698      if(FSMC_Bank == FSMC_Bank2_NAND)
00051a  2a10              CMP      r2,#0x10
00051c  d103              BNE      |L1.1318|
;;;699      {
;;;700        tmpsr = FSMC_Bank2->SR2;
00051e  f04f4420          MOV      r4,#0xa0000000
000522  6e63              LDR      r3,[r4,#0x64]
000524  e007              B        |L1.1334|
                  |L1.1318|
;;;701      }  
;;;702      else if(FSMC_Bank == FSMC_Bank3_NAND)
000526  f5b27f80          CMP      r2,#0x100
00052a  d102              BNE      |L1.1330|
;;;703      {
;;;704        tmpsr = FSMC_Bank3->SR3;
00052c  4c36              LDR      r4,|L1.1544|
00052e  6823              LDR      r3,[r4,#0]
000530  e001              B        |L1.1334|
                  |L1.1330|
;;;705      }
;;;706      /* FSMC_Bank4_PCCARD*/
;;;707      else
;;;708      {
;;;709        tmpsr = FSMC_Bank4->SR4;
000532  4c36              LDR      r4,|L1.1548|
000534  6823              LDR      r3,[r4,#0]
                  |L1.1334|
;;;710      } 
;;;711      
;;;712      /* Get the flag status */
;;;713      if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
000536  420b              TST      r3,r1
000538  d001              BEQ      |L1.1342|
;;;714      {
;;;715        bitstatus = SET;
00053a  2001              MOVS     r0,#1
00053c  e000              B        |L1.1344|
                  |L1.1342|
;;;716      }
;;;717      else
;;;718      {
;;;719        bitstatus = RESET;
00053e  2000              MOVS     r0,#0
                  |L1.1344|
;;;720      }
;;;721      /* Return the flag status */
;;;722      return bitstatus;
;;;723    }
000540  bd10              POP      {r4,pc}
;;;724    
                          ENDP

                  FSMC_ClearFlag PROC
;;;738      */
;;;739    void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
000542  2810              CMP      r0,#0x10
;;;740    {
;;;741     /* Check the parameters */
;;;742      assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
;;;743      assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
;;;744        
;;;745      if(FSMC_Bank == FSMC_Bank2_NAND)
000544  d107              BNE      |L1.1366|
;;;746      {
;;;747        FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
000546  f04f4220          MOV      r2,#0xa0000000
00054a  6e52              LDR      r2,[r2,#0x64]
00054c  438a              BICS     r2,r2,r1
00054e  f04f4320          MOV      r3,#0xa0000000
000552  665a              STR      r2,[r3,#0x64]
000554  e013              B        |L1.1406|
                  |L1.1366|
;;;748      }  
;;;749      else if(FSMC_Bank == FSMC_Bank3_NAND)
000556  f5b07f80          CMP      r0,#0x100
00055a  d108              BNE      |L1.1390|
;;;750      {
;;;751        FSMC_Bank3->SR3 &= ~FSMC_FLAG;
00055c  4a2a              LDR      r2,|L1.1544|
00055e  6812              LDR      r2,[r2,#0]
000560  ea220201          BIC      r2,r2,r1
000564  f04f4320          MOV      r3,#0xa0000000
000568  f8c32084          STR      r2,[r3,#0x84]
00056c  e007              B        |L1.1406|
                  |L1.1390|
;;;752      }
;;;753      /* FSMC_Bank4_PCCARD*/
;;;754      else
;;;755      {
;;;756        FSMC_Bank4->SR4 &= ~FSMC_FLAG;
00056e  4a27              LDR      r2,|L1.1548|
000570  6812              LDR      r2,[r2,#0]
000572  ea220201          BIC      r2,r2,r1
000576  f04f4320          MOV      r3,#0xa0000000
00057a  f8c320a4          STR      r2,[r3,#0xa4]
                  |L1.1406|
;;;757      }
;;;758    }
00057e  4770              BX       lr
;;;759    
                          ENDP

                  FSMC_GetITStatus PROC
;;;773      */
;;;774    ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
000580  b570              PUSH     {r4-r6,lr}
;;;775    {
000582  4602              MOV      r2,r0
;;;776      ITStatus bitstatus = RESET;
000584  2000              MOVS     r0,#0
;;;777      uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
000586  2300              MOVS     r3,#0
000588  2400              MOVS     r4,#0
00058a  2500              MOVS     r5,#0
;;;778      
;;;779      /* Check the parameters */
;;;780      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;781      assert_param(IS_FSMC_GET_IT(FSMC_IT));
;;;782      
;;;783      if(FSMC_Bank == FSMC_Bank2_NAND)
00058c  2a10              CMP      r2,#0x10
00058e  d103              BNE      |L1.1432|
;;;784      {
;;;785        tmpsr = FSMC_Bank2->SR2;
000590  f04f4620          MOV      r6,#0xa0000000
000594  6e73              LDR      r3,[r6,#0x64]
000596  e007              B        |L1.1448|
                  |L1.1432|
;;;786      }  
;;;787      else if(FSMC_Bank == FSMC_Bank3_NAND)
000598  f5b27f80          CMP      r2,#0x100
00059c  d102              BNE      |L1.1444|
;;;788      {
;;;789        tmpsr = FSMC_Bank3->SR3;
00059e  4e1a              LDR      r6,|L1.1544|
0005a0  6833              LDR      r3,[r6,#0]
0005a2  e001              B        |L1.1448|
                  |L1.1444|
;;;790      }
;;;791      /* FSMC_Bank4_PCCARD*/
;;;792      else
;;;793      {
;;;794        tmpsr = FSMC_Bank4->SR4;
0005a4  4e19              LDR      r6,|L1.1548|
0005a6  6833              LDR      r3,[r6,#0]
                  |L1.1448|
;;;795      } 
;;;796      
;;;797      itstatus = tmpsr & FSMC_IT;
0005a8  ea030401          AND      r4,r3,r1
;;;798      
;;;799      itenable = tmpsr & (FSMC_IT >> 3);
0005ac  ea0305d1          AND      r5,r3,r1,LSR #3
;;;800      if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
0005b0  b114              CBZ      r4,|L1.1464|
0005b2  b10d              CBZ      r5,|L1.1464|
;;;801      {
;;;802        bitstatus = SET;
0005b4  2001              MOVS     r0,#1
0005b6  e000              B        |L1.1466|
                  |L1.1464|
;;;803      }
;;;804      else
;;;805      {
;;;806        bitstatus = RESET;
0005b8  2000              MOVS     r0,#0
                  |L1.1466|
;;;807      }
;;;808      return bitstatus; 
;;;809    }
0005ba  bd70              POP      {r4-r6,pc}
;;;810    
                          ENDP

                  FSMC_ClearITPendingBit PROC
;;;824      */
;;;825    void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
0005bc  2810              CMP      r0,#0x10
;;;826    {
;;;827      /* Check the parameters */
;;;828      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;829      assert_param(IS_FSMC_IT(FSMC_IT));
;;;830        
;;;831      if(FSMC_Bank == FSMC_Bank2_NAND)
0005be  d108              BNE      |L1.1490|
;;;832      {
;;;833        FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
0005c0  f04f4220          MOV      r2,#0xa0000000
0005c4  6e52              LDR      r2,[r2,#0x64]
0005c6  ea2202d1          BIC      r2,r2,r1,LSR #3
0005ca  f04f4320          MOV      r3,#0xa0000000
0005ce  665a              STR      r2,[r3,#0x64]
0005d0  e013              B        |L1.1530|
                  |L1.1490|
;;;834      }  
;;;835      else if(FSMC_Bank == FSMC_Bank3_NAND)
0005d2  f5b07f80          CMP      r0,#0x100
0005d6  d108              BNE      |L1.1514|
;;;836      {
;;;837        FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
0005d8  4a0b              LDR      r2,|L1.1544|
0005da  6812              LDR      r2,[r2,#0]
0005dc  ea2202d1          BIC      r2,r2,r1,LSR #3
0005e0  f04f4320          MOV      r3,#0xa0000000
0005e4  f8c32084          STR      r2,[r3,#0x84]
0005e8  e007              B        |L1.1530|
                  |L1.1514|
;;;838      }
;;;839      /* FSMC_Bank4_PCCARD*/
;;;840      else
;;;841      {
;;;842        FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
0005ea  4a08              LDR      r2,|L1.1548|
0005ec  6812              LDR      r2,[r2,#0]
0005ee  ea2202d1          BIC      r2,r2,r1,LSR #3
0005f2  f04f4320          MOV      r3,#0xa0000000
0005f6  f8c320a4          STR      r2,[r3,#0xa4]
                  |L1.1530|
;;;843      }
;;;844    }
0005fa  4770              BX       lr
;;;845    
                          ENDP

                  |L1.1532|
                          DCD      0xa0000080
                  |L1.1536|
                          DCD      0x000fffbf
                  |L1.1540|
                          DCD      0xa0000094
                  |L1.1544|
                          DCD      0xa0000084
                  |L1.1548|
                          DCD      0xa00000a4
