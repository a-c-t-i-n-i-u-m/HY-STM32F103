; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [-c --asm --interleave -o.\obj\stm32f10x_usart.o --depend=.\obj\stm32f10x_usart.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL FWlib\SRC\stm32f10x_usart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  USART_DeInit PROC
;;;127      */
;;;128    void USART_DeInit(USART_TypeDef* USARTx)
000000  b510              PUSH     {r4,lr}
;;;129    {
000002  4604              MOV      r4,r0
;;;130      /* Check the parameters */
;;;131      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;132    
;;;133      if (USARTx == USART1)
000004  48fc              LDR      r0,|L1.1016|
000006  4284              CMP      r4,r0
000008  d109              BNE      |L1.30|
;;;134      {
;;;135        RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  0388              LSLS     r0,r1,#14
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;136        RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
000012  2100              MOVS     r1,#0
000014  f44f4080          MOV      r0,#0x4000
000018  f7fffffe          BL       RCC_APB2PeriphResetCmd
00001c  e032              B        |L1.132|
                  |L1.30|
;;;137      }
;;;138      else if (USARTx == USART2)
00001e  48f7              LDR      r0,|L1.1020|
000020  4284              CMP      r4,r0
000022  d109              BNE      |L1.56|
;;;139      {
;;;140        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
000024  2101              MOVS     r1,#1
000026  0448              LSLS     r0,r1,#17
000028  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;141        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
00002c  2100              MOVS     r1,#0
00002e  f44f3000          MOV      r0,#0x20000
000032  f7fffffe          BL       RCC_APB1PeriphResetCmd
000036  e025              B        |L1.132|
                  |L1.56|
;;;142      }
;;;143      else if (USARTx == USART3)
000038  48f1              LDR      r0,|L1.1024|
00003a  4284              CMP      r4,r0
00003c  d109              BNE      |L1.82|
;;;144      {
;;;145        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
00003e  2101              MOVS     r1,#1
000040  0488              LSLS     r0,r1,#18
000042  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;146        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
000046  2100              MOVS     r1,#0
000048  f44f2080          MOV      r0,#0x40000
00004c  f7fffffe          BL       RCC_APB1PeriphResetCmd
000050  e018              B        |L1.132|
                  |L1.82|
;;;147      }    
;;;148      else if (USARTx == UART4)
000052  48ec              LDR      r0,|L1.1028|
000054  4284              CMP      r4,r0
000056  d109              BNE      |L1.108|
;;;149      {
;;;150        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
000058  2101              MOVS     r1,#1
00005a  04c8              LSLS     r0,r1,#19
00005c  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;151        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
000060  2100              MOVS     r1,#0
000062  f44f2000          MOV      r0,#0x80000
000066  f7fffffe          BL       RCC_APB1PeriphResetCmd
00006a  e00b              B        |L1.132|
                  |L1.108|
;;;152      }    
;;;153      else
;;;154      {
;;;155        if (USARTx == UART5)
00006c  48e6              LDR      r0,|L1.1032|
00006e  4284              CMP      r4,r0
000070  d108              BNE      |L1.132|
;;;156        { 
;;;157          RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
000072  2101              MOVS     r1,#1
000074  0508              LSLS     r0,r1,#20
000076  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;158          RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
00007a  2100              MOVS     r1,#0
00007c  f44f1080          MOV      r0,#0x100000
000080  f7fffffe          BL       RCC_APB1PeriphResetCmd
                  |L1.132|
;;;159        }
;;;160      }
;;;161    }
000084  bd10              POP      {r4,pc}
;;;162    
                          ENDP

                  USART_Init PROC
;;;172      */
;;;173    void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
000086  e92d47f0          PUSH     {r4-r10,lr}
;;;174    {
00008a  b086              SUB      sp,sp,#0x18
00008c  4605              MOV      r5,r0
00008e  460e              MOV      r6,r1
;;;175      uint32_t tmpreg = 0x00, apbclock = 0x00;
000090  2400              MOVS     r4,#0
000092  46a2              MOV      r10,r4
;;;176      uint32_t integerdivider = 0x00;
000094  bf00              NOP      
;;;177      uint32_t fractionaldivider = 0x00;
000096  46a1              MOV      r9,r4
;;;178      uint32_t usartxbase = 0;
000098  2700              MOVS     r7,#0
;;;179      RCC_ClocksTypeDef RCC_ClocksStatus;
;;;180      /* Check the parameters */
;;;181      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;182      assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
;;;183      assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
;;;184      assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
;;;185      assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
;;;186      assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
;;;187      assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
;;;188      /* The hardware flow control is available only for USART1, USART2 and USART3 */
;;;189      if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
00009a  89b0              LDRH     r0,[r6,#0xc]
00009c  b100              CBZ      r0,|L1.160|
;;;190      {
;;;191        assert_param(IS_USART_123_PERIPH(USARTx));
00009e  bf00              NOP      
                  |L1.160|
;;;192      }
;;;193    
;;;194      usartxbase = (uint32_t)USARTx;
0000a0  462f              MOV      r7,r5
;;;195    
;;;196    /*---------------------------- USART CR2 Configuration -----------------------*/
;;;197      tmpreg = USARTx->CR2;
0000a2  8a2c              LDRH     r4,[r5,#0x10]
;;;198      /* Clear STOP[13:12] bits */
;;;199      tmpreg &= CR2_STOP_CLEAR_Mask;
0000a4  f64c70ff          MOV      r0,#0xcfff
0000a8  4004              ANDS     r4,r4,r0
;;;200      /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
;;;201      /* Set STOP[13:12] bits according to USART_StopBits value */
;;;202      tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
0000aa  88f0              LDRH     r0,[r6,#6]
0000ac  4304              ORRS     r4,r4,r0
;;;203      
;;;204      /* Write to USART CR2 */
;;;205      USARTx->CR2 = (uint16_t)tmpreg;
0000ae  822c              STRH     r4,[r5,#0x10]
;;;206    
;;;207    /*---------------------------- USART CR1 Configuration -----------------------*/
;;;208      tmpreg = USARTx->CR1;
0000b0  89ac              LDRH     r4,[r5,#0xc]
;;;209      /* Clear M, PCE, PS, TE and RE bits */
;;;210      tmpreg &= CR1_CLEAR_Mask;
0000b2  f64e10f3          MOV      r0,#0xe9f3
0000b6  4004              ANDS     r4,r4,r0
;;;211      /* Configure the USART Word Length, Parity and mode ----------------------- */
;;;212      /* Set the M bits according to USART_WordLength value */
;;;213      /* Set PCE and PS bits according to USART_Parity value */
;;;214      /* Set TE and RE bits according to USART_Mode value */
;;;215      tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
0000b8  88b0              LDRH     r0,[r6,#4]
0000ba  8931              LDRH     r1,[r6,#8]
0000bc  4308              ORRS     r0,r0,r1
0000be  8971              LDRH     r1,[r6,#0xa]
0000c0  4308              ORRS     r0,r0,r1
0000c2  4304              ORRS     r4,r4,r0
;;;216                USART_InitStruct->USART_Mode;
;;;217      /* Write to USART CR1 */
;;;218      USARTx->CR1 = (uint16_t)tmpreg;
0000c4  81ac              STRH     r4,[r5,#0xc]
;;;219    
;;;220    /*---------------------------- USART CR3 Configuration -----------------------*/  
;;;221      tmpreg = USARTx->CR3;
0000c6  8aac              LDRH     r4,[r5,#0x14]
;;;222      /* Clear CTSE and RTSE bits */
;;;223      tmpreg &= CR3_CLEAR_Mask;
0000c8  f64f40ff          MOV      r0,#0xfcff
0000cc  4004              ANDS     r4,r4,r0
;;;224      /* Configure the USART HFC -------------------------------------------------*/
;;;225      /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
;;;226      tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
0000ce  89b0              LDRH     r0,[r6,#0xc]
0000d0  4304              ORRS     r4,r4,r0
;;;227      /* Write to USART CR3 */
;;;228      USARTx->CR3 = (uint16_t)tmpreg;
0000d2  82ac              STRH     r4,[r5,#0x14]
;;;229    
;;;230    /*---------------------------- USART BRR Configuration -----------------------*/
;;;231      /* Configure the USART Baud Rate -------------------------------------------*/
;;;232      RCC_GetClocksFreq(&RCC_ClocksStatus);
0000d4  a801              ADD      r0,sp,#4
0000d6  f7fffffe          BL       RCC_GetClocksFreq
;;;233      if (usartxbase == USART1_BASE)
0000da  48c7              LDR      r0,|L1.1016|
0000dc  4287              CMP      r7,r0
0000de  d102              BNE      |L1.230|
;;;234      {
;;;235        apbclock = RCC_ClocksStatus.PCLK2_Frequency;
0000e0  f8dda010          LDR      r10,[sp,#0x10]
0000e4  e001              B        |L1.234|
                  |L1.230|
;;;236      }
;;;237      else
;;;238      {
;;;239        apbclock = RCC_ClocksStatus.PCLK1_Frequency;
0000e6  f8dda00c          LDR      r10,[sp,#0xc]
                  |L1.234|
;;;240      }
;;;241      
;;;242      /* Determine the integer part */
;;;243      if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
0000ea  89a8              LDRH     r0,[r5,#0xc]
0000ec  f4104f00          TST      r0,#0x8000
0000f0  d008              BEQ      |L1.260|
;;;244      {
;;;245        /* Integer part computing in case Oversampling mode is 8 Samples */
;;;246        integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
0000f2  eb0a00ca          ADD      r0,r10,r10,LSL #3
0000f6  eb00100a          ADD      r0,r0,r10,LSL #4
0000fa  6831              LDR      r1,[r6,#0]
0000fc  0049              LSLS     r1,r1,#1
0000fe  fbb0f8f1          UDIV     r8,r0,r1
000102  e007              B        |L1.276|
                  |L1.260|
;;;247      }
;;;248      else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
;;;249      {
;;;250        /* Integer part computing in case Oversampling mode is 16 Samples */
;;;251        integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
000104  eb0a00ca          ADD      r0,r10,r10,LSL #3
000108  eb00100a          ADD      r0,r0,r10,LSL #4
00010c  6831              LDR      r1,[r6,#0]
00010e  0089              LSLS     r1,r1,#2
000110  fbb0f8f1          UDIV     r8,r0,r1
                  |L1.276|
;;;252      }
;;;253      tmpreg = (integerdivider / 100) << 4;
000114  2064              MOVS     r0,#0x64
000116  fbb8f0f0          UDIV     r0,r8,r0
00011a  0104              LSLS     r4,r0,#4
;;;254    
;;;255      /* Determine the fractional part */
;;;256      fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
00011c  0920              LSRS     r0,r4,#4
00011e  2164              MOVS     r1,#0x64
000120  fb018910          MLS      r9,r1,r0,r8
;;;257    
;;;258      /* Implement the fractional part in the register */
;;;259      if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
000124  89a8              LDRH     r0,[r5,#0xc]
000126  f4104f00          TST      r0,#0x8000
00012a  d008              BEQ      |L1.318|
;;;260      {
;;;261        tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
00012c  2032              MOVS     r0,#0x32
00012e  eb0000c9          ADD      r0,r0,r9,LSL #3
000132  fbb0f0f1          UDIV     r0,r0,r1
000136  f0000007          AND      r0,r0,#7
00013a  4304              ORRS     r4,r4,r0
00013c  e008              B        |L1.336|
                  |L1.318|
;;;262      }
;;;263      else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
;;;264      {
;;;265        tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
00013e  2032              MOVS     r0,#0x32
000140  eb001009          ADD      r0,r0,r9,LSL #4
000144  2164              MOVS     r1,#0x64
000146  fbb0f0f1          UDIV     r0,r0,r1
00014a  f000000f          AND      r0,r0,#0xf
00014e  4304              ORRS     r4,r4,r0
                  |L1.336|
;;;266      }
;;;267      
;;;268      /* Write to USART BRR */
;;;269      USARTx->BRR = (uint16_t)tmpreg;
000150  812c              STRH     r4,[r5,#8]
;;;270    }
000152  b006              ADD      sp,sp,#0x18
000154  e8bd87f0          POP      {r4-r10,pc}
;;;271    
                          ENDP

                  USART_StructInit PROC
;;;277      */
;;;278    void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
000158  f44f5116          MOV      r1,#0x2580
;;;279    {
;;;280      /* USART_InitStruct members default value */
;;;281      USART_InitStruct->USART_BaudRate = 9600;
00015c  6001              STR      r1,[r0,#0]
;;;282      USART_InitStruct->USART_WordLength = USART_WordLength_8b;
00015e  2100              MOVS     r1,#0
000160  8081              STRH     r1,[r0,#4]
;;;283      USART_InitStruct->USART_StopBits = USART_StopBits_1;
000162  80c1              STRH     r1,[r0,#6]
;;;284      USART_InitStruct->USART_Parity = USART_Parity_No ;
000164  8101              STRH     r1,[r0,#8]
;;;285      USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000166  210c              MOVS     r1,#0xc
000168  8141              STRH     r1,[r0,#0xa]
;;;286      USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
00016a  2100              MOVS     r1,#0
00016c  8181              STRH     r1,[r0,#0xc]
;;;287    }
00016e  4770              BX       lr
;;;288    
                          ENDP

                  USART_ClockInit PROC
;;;298      */
;;;299    void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
000170  b510              PUSH     {r4,lr}
;;;300    {
000172  4602              MOV      r2,r0
;;;301      uint32_t tmpreg = 0x00;
000174  2000              MOVS     r0,#0
;;;302      /* Check the parameters */
;;;303      assert_param(IS_USART_123_PERIPH(USARTx));
;;;304      assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
;;;305      assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
;;;306      assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
;;;307      assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
;;;308      
;;;309    /*---------------------------- USART CR2 Configuration -----------------------*/
;;;310      tmpreg = USARTx->CR2;
000176  8a10              LDRH     r0,[r2,#0x10]
;;;311      /* Clear CLKEN, CPOL, CPHA and LBCL bits */
;;;312      tmpreg &= CR2_CLOCK_CLEAR_Mask;
000178  f24f03ff          MOV      r3,#0xf0ff
00017c  4018              ANDS     r0,r0,r3
;;;313      /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
;;;314      /* Set CLKEN bit according to USART_Clock value */
;;;315      /* Set CPOL bit according to USART_CPOL value */
;;;316      /* Set CPHA bit according to USART_CPHA value */
;;;317      /* Set LBCL bit according to USART_LastBit value */
;;;318      tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
00017e  880b              LDRH     r3,[r1,#0]
000180  884c              LDRH     r4,[r1,#2]
000182  4323              ORRS     r3,r3,r4
000184  888c              LDRH     r4,[r1,#4]
000186  4323              ORRS     r3,r3,r4
000188  88cc              LDRH     r4,[r1,#6]
00018a  4323              ORRS     r3,r3,r4
00018c  4318              ORRS     r0,r0,r3
;;;319                     USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
;;;320      /* Write to USART CR2 */
;;;321      USARTx->CR2 = (uint16_t)tmpreg;
00018e  8210              STRH     r0,[r2,#0x10]
;;;322    }
000190  bd10              POP      {r4,pc}
;;;323    
                          ENDP

                  USART_ClockStructInit PROC
;;;329      */
;;;330    void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
000192  2100              MOVS     r1,#0
;;;331    {
;;;332      /* USART_ClockInitStruct members default value */
;;;333      USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
000194  8001              STRH     r1,[r0,#0]
;;;334      USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
000196  8041              STRH     r1,[r0,#2]
;;;335      USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
000198  8081              STRH     r1,[r0,#4]
;;;336      USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
00019a  80c1              STRH     r1,[r0,#6]
;;;337    }
00019c  4770              BX       lr
;;;338    
                          ENDP

                  USART_Cmd PROC
;;;347      */
;;;348    void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
00019e  b121              CBZ      r1,|L1.426|
;;;349    {
;;;350      /* Check the parameters */
;;;351      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;352      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;353      
;;;354      if (NewState != DISABLE)
;;;355      {
;;;356        /* Enable the selected USART by setting the UE bit in the CR1 register */
;;;357        USARTx->CR1 |= CR1_UE_Set;
0001a0  8982              LDRH     r2,[r0,#0xc]
0001a2  f4425200          ORR      r2,r2,#0x2000
0001a6  8182              STRH     r2,[r0,#0xc]
0001a8  e004              B        |L1.436|
                  |L1.426|
;;;358      }
;;;359      else
;;;360      {
;;;361        /* Disable the selected USART by clearing the UE bit in the CR1 register */
;;;362        USARTx->CR1 &= CR1_UE_Reset;
0001aa  8982              LDRH     r2,[r0,#0xc]
0001ac  f64d73ff          MOV      r3,#0xdfff
0001b0  401a              ANDS     r2,r2,r3
0001b2  8182              STRH     r2,[r0,#0xc]
                  |L1.436|
;;;363      }
;;;364    }
0001b4  4770              BX       lr
;;;365    
                          ENDP

                  USART_ITConfig PROC
;;;384      */
;;;385    void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
0001b6  b5f0              PUSH     {r4-r7,lr}
;;;386    {
0001b8  4603              MOV      r3,r0
;;;387      uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
0001ba  2400              MOVS     r4,#0
0001bc  2600              MOVS     r6,#0
0001be  2500              MOVS     r5,#0
;;;388      uint32_t usartxbase = 0x00;
0001c0  2000              MOVS     r0,#0
;;;389      /* Check the parameters */
;;;390      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;391      assert_param(IS_USART_CONFIG_IT(USART_IT));
;;;392      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;393      /* The CTS interrupt is not available for UART4 and UART5 */
;;;394      if (USART_IT == USART_IT_CTS)
0001c2  f5a16710          SUB      r7,r1,#0x900
0001c6  3f6a              SUBS     r7,r7,#0x6a
0001c8  d100              BNE      |L1.460|
;;;395      {
;;;396        assert_param(IS_USART_123_PERIPH(USARTx));
0001ca  bf00              NOP      
                  |L1.460|
;;;397      }   
;;;398      
;;;399      usartxbase = (uint32_t)USARTx;
0001cc  4618              MOV      r0,r3
;;;400    
;;;401      /* Get the USART register index */
;;;402      usartreg = (((uint8_t)USART_IT) >> 0x05);
0001ce  f3c11442          UBFX     r4,r1,#5,#3
;;;403    
;;;404      /* Get the interrupt position */
;;;405      itpos = USART_IT & IT_Mask;
0001d2  f001061f          AND      r6,r1,#0x1f
;;;406      itmask = (((uint32_t)0x01) << itpos);
0001d6  2701              MOVS     r7,#1
0001d8  fa07f506          LSL      r5,r7,r6
;;;407        
;;;408      if (usartreg == 0x01) /* The IT is in CR1 register */
0001dc  2c01              CMP      r4,#1
0001de  d101              BNE      |L1.484|
;;;409      {
;;;410        usartxbase += 0x0C;
0001e0  300c              ADDS     r0,r0,#0xc
0001e2  e004              B        |L1.494|
                  |L1.484|
;;;411      }
;;;412      else if (usartreg == 0x02) /* The IT is in CR2 register */
0001e4  2c02              CMP      r4,#2
0001e6  d101              BNE      |L1.492|
;;;413      {
;;;414        usartxbase += 0x10;
0001e8  3010              ADDS     r0,r0,#0x10
0001ea  e000              B        |L1.494|
                  |L1.492|
;;;415      }
;;;416      else /* The IT is in CR3 register */
;;;417      {
;;;418        usartxbase += 0x14; 
0001ec  3014              ADDS     r0,r0,#0x14
                  |L1.494|
;;;419      }
;;;420      if (NewState != DISABLE)
0001ee  b11a              CBZ      r2,|L1.504|
;;;421      {
;;;422        *(__IO uint32_t*)usartxbase  |= itmask;
0001f0  6807              LDR      r7,[r0,#0]
0001f2  432f              ORRS     r7,r7,r5
0001f4  6007              STR      r7,[r0,#0]
0001f6  e002              B        |L1.510|
                  |L1.504|
;;;423      }
;;;424      else
;;;425      {
;;;426        *(__IO uint32_t*)usartxbase &= ~itmask;
0001f8  6807              LDR      r7,[r0,#0]
0001fa  43af              BICS     r7,r7,r5
0001fc  6007              STR      r7,[r0,#0]
                  |L1.510|
;;;427      }
;;;428    }
0001fe  bdf0              POP      {r4-r7,pc}
;;;429    
                          ENDP

                  USART_DMACmd PROC
;;;443      */
;;;444    void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
000200  b510              PUSH     {r4,lr}
;;;445    {
;;;446      /* Check the parameters */
;;;447      assert_param(IS_USART_1234_PERIPH(USARTx));
;;;448      assert_param(IS_USART_DMAREQ(USART_DMAReq));  
;;;449      assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;450      if (NewState != DISABLE)
000202  b11a              CBZ      r2,|L1.524|
;;;451      {
;;;452        /* Enable the DMA transfer for selected requests by setting the DMAT and/or
;;;453           DMAR bits in the USART CR3 register */
;;;454        USARTx->CR3 |= USART_DMAReq;
000204  8a83              LDRH     r3,[r0,#0x14]
000206  430b              ORRS     r3,r3,r1
000208  8283              STRH     r3,[r0,#0x14]
00020a  e004              B        |L1.534|
                  |L1.524|
;;;455      }
;;;456      else
;;;457      {
;;;458        /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
;;;459           DMAR bits in the USART CR3 register */
;;;460        USARTx->CR3 &= (uint16_t)~USART_DMAReq;
00020c  8a83              LDRH     r3,[r0,#0x14]
00020e  43cc              MVNS     r4,r1
000210  b2a4              UXTH     r4,r4
000212  4023              ANDS     r3,r3,r4
000214  8283              STRH     r3,[r0,#0x14]
                  |L1.534|
;;;461      }
;;;462    }
000216  bd10              POP      {r4,pc}
;;;463    
                          ENDP

                  USART_SetAddress PROC
;;;471      */
;;;472    void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
000218  8a02              LDRH     r2,[r0,#0x10]
;;;473    {
;;;474      /* Check the parameters */
;;;475      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;476      assert_param(IS_USART_ADDRESS(USART_Address)); 
;;;477        
;;;478      /* Clear the USART address */
;;;479      USARTx->CR2 &= CR2_Address_Mask;
00021a  f64f73f0          MOV      r3,#0xfff0
00021e  401a              ANDS     r2,r2,r3
000220  8202              STRH     r2,[r0,#0x10]
;;;480      /* Set the USART address node */
;;;481      USARTx->CR2 |= USART_Address;
000222  8a02              LDRH     r2,[r0,#0x10]
000224  430a              ORRS     r2,r2,r1
000226  8202              STRH     r2,[r0,#0x10]
;;;482    }
000228  4770              BX       lr
;;;483    
                          ENDP

                  USART_WakeUpConfig PROC
;;;494      */
;;;495    void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
00022a  8982              LDRH     r2,[r0,#0xc]
;;;496    {
;;;497      /* Check the parameters */
;;;498      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;499      assert_param(IS_USART_WAKEUP(USART_WakeUp));
;;;500      
;;;501      USARTx->CR1 &= CR1_WAKE_Mask;
00022c  f24f73ff          MOV      r3,#0xf7ff
000230  401a              ANDS     r2,r2,r3
000232  8182              STRH     r2,[r0,#0xc]
;;;502      USARTx->CR1 |= USART_WakeUp;
000234  8982              LDRH     r2,[r0,#0xc]
000236  430a              ORRS     r2,r2,r1
000238  8182              STRH     r2,[r0,#0xc]
;;;503    }
00023a  4770              BX       lr
;;;504    
                          ENDP

                  USART_ReceiverWakeUpCmd PROC
;;;513      */
;;;514    void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
00023c  b121              CBZ      r1,|L1.584|
;;;515    {
;;;516      /* Check the parameters */
;;;517      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;518      assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;519      
;;;520      if (NewState != DISABLE)
;;;521      {
;;;522        /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
;;;523        USARTx->CR1 |= CR1_RWU_Set;
00023e  8982              LDRH     r2,[r0,#0xc]
000240  f0420202          ORR      r2,r2,#2
000244  8182              STRH     r2,[r0,#0xc]
000246  e004              B        |L1.594|
                  |L1.584|
;;;524      }
;;;525      else
;;;526      {
;;;527        /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
;;;528        USARTx->CR1 &= CR1_RWU_Reset;
000248  8982              LDRH     r2,[r0,#0xc]
00024a  f64f73fd          MOV      r3,#0xfffd
00024e  401a              ANDS     r2,r2,r3
000250  8182              STRH     r2,[r0,#0xc]
                  |L1.594|
;;;529      }
;;;530    }
000252  4770              BX       lr
;;;531    
                          ENDP

                  USART_LINBreakDetectLengthConfig PROC
;;;542      */
;;;543    void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
000254  8a02              LDRH     r2,[r0,#0x10]
;;;544    {
;;;545      /* Check the parameters */
;;;546      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;547      assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
;;;548      
;;;549      USARTx->CR2 &= CR2_LBDL_Mask;
000256  f64f73df          MOV      r3,#0xffdf
00025a  401a              ANDS     r2,r2,r3
00025c  8202              STRH     r2,[r0,#0x10]
;;;550      USARTx->CR2 |= USART_LINBreakDetectLength;  
00025e  8a02              LDRH     r2,[r0,#0x10]
000260  430a              ORRS     r2,r2,r1
000262  8202              STRH     r2,[r0,#0x10]
;;;551    }
000264  4770              BX       lr
;;;552    
                          ENDP

                  USART_LINCmd PROC
;;;561      */
;;;562    void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000266  b121              CBZ      r1,|L1.626|
;;;563    {
;;;564      /* Check the parameters */
;;;565      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;566      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;567      
;;;568      if (NewState != DISABLE)
;;;569      {
;;;570        /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
;;;571        USARTx->CR2 |= CR2_LINEN_Set;
000268  8a02              LDRH     r2,[r0,#0x10]
00026a  f4424280          ORR      r2,r2,#0x4000
00026e  8202              STRH     r2,[r0,#0x10]
000270  e004              B        |L1.636|
                  |L1.626|
;;;572      }
;;;573      else
;;;574      {
;;;575        /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
;;;576        USARTx->CR2 &= CR2_LINEN_Reset;
000272  8a02              LDRH     r2,[r0,#0x10]
000274  f64b73ff          MOV      r3,#0xbfff
000278  401a              ANDS     r2,r2,r3
00027a  8202              STRH     r2,[r0,#0x10]
                  |L1.636|
;;;577      }
;;;578    }
00027c  4770              BX       lr
;;;579    
                          ENDP

                  USART_SendData PROC
;;;587      */
;;;588    void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
00027e  f3c10208          UBFX     r2,r1,#0,#9
;;;589    {
;;;590      /* Check the parameters */
;;;591      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;592      assert_param(IS_USART_DATA(Data)); 
;;;593        
;;;594      /* Transmit Data */
;;;595      USARTx->DR = (Data & (uint16_t)0x01FF);
000282  8082              STRH     r2,[r0,#4]
;;;596    }
000284  4770              BX       lr
;;;597    
                          ENDP

                  USART_ReceiveData PROC
;;;604      */
;;;605    uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
000286  4601              MOV      r1,r0
;;;606    {
;;;607      /* Check the parameters */
;;;608      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;609      
;;;610      /* Receive Data */
;;;611      return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
000288  8888              LDRH     r0,[r1,#4]
00028a  f3c00008          UBFX     r0,r0,#0,#9
;;;612    }
00028e  4770              BX       lr
;;;613    
                          ENDP

                  USART_SendBreak PROC
;;;620      */
;;;621    void USART_SendBreak(USART_TypeDef* USARTx)
000290  8981              LDRH     r1,[r0,#0xc]
;;;622    {
;;;623      /* Check the parameters */
;;;624      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;625      
;;;626      /* Send break characters */
;;;627      USARTx->CR1 |= CR1_SBK_Set;
000292  f0410101          ORR      r1,r1,#1
000296  8181              STRH     r1,[r0,#0xc]
;;;628    }
000298  4770              BX       lr
;;;629    
                          ENDP

                  USART_SetGuardTime PROC
;;;636      */
;;;637    void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
00029a  8b02              LDRH     r2,[r0,#0x18]
;;;638    {    
;;;639      /* Check the parameters */
;;;640      assert_param(IS_USART_123_PERIPH(USARTx));
;;;641      
;;;642      /* Clear the USART Guard time */
;;;643      USARTx->GTPR &= GTPR_LSB_Mask;
00029c  b2d2              UXTB     r2,r2
00029e  8302              STRH     r2,[r0,#0x18]
;;;644      /* Set the USART guard time */
;;;645      USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
0002a0  8b02              LDRH     r2,[r0,#0x18]
0002a2  ea422201          ORR      r2,r2,r1,LSL #8
0002a6  8302              STRH     r2,[r0,#0x18]
;;;646    }
0002a8  4770              BX       lr
;;;647    
                          ENDP

                  USART_SetPrescaler PROC
;;;656      */
;;;657    void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
0002aa  8b02              LDRH     r2,[r0,#0x18]
;;;658    { 
;;;659      /* Check the parameters */
;;;660      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;661      
;;;662      /* Clear the USART prescaler */
;;;663      USARTx->GTPR &= GTPR_MSB_Mask;
0002ac  f402427f          AND      r2,r2,#0xff00
0002b0  8302              STRH     r2,[r0,#0x18]
;;;664      /* Set the USART prescaler */
;;;665      USARTx->GTPR |= USART_Prescaler;
0002b2  8b02              LDRH     r2,[r0,#0x18]
0002b4  430a              ORRS     r2,r2,r1
0002b6  8302              STRH     r2,[r0,#0x18]
;;;666    }
0002b8  4770              BX       lr
;;;667    
                          ENDP

                  USART_SmartCardCmd PROC
;;;675      */
;;;676    void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
0002ba  b121              CBZ      r1,|L1.710|
;;;677    {
;;;678      /* Check the parameters */
;;;679      assert_param(IS_USART_123_PERIPH(USARTx));
;;;680      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;681      if (NewState != DISABLE)
;;;682      {
;;;683        /* Enable the SC mode by setting the SCEN bit in the CR3 register */
;;;684        USARTx->CR3 |= CR3_SCEN_Set;
0002bc  8a82              LDRH     r2,[r0,#0x14]
0002be  f0420220          ORR      r2,r2,#0x20
0002c2  8282              STRH     r2,[r0,#0x14]
0002c4  e004              B        |L1.720|
                  |L1.710|
;;;685      }
;;;686      else
;;;687      {
;;;688        /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
;;;689        USARTx->CR3 &= CR3_SCEN_Reset;
0002c6  8a82              LDRH     r2,[r0,#0x14]
0002c8  f64f73df          MOV      r3,#0xffdf
0002cc  401a              ANDS     r2,r2,r3
0002ce  8282              STRH     r2,[r0,#0x14]
                  |L1.720|
;;;690      }
;;;691    }
0002d0  4770              BX       lr
;;;692    
                          ENDP

                  USART_SmartCardNACKCmd PROC
;;;700      */
;;;701    void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
0002d2  b121              CBZ      r1,|L1.734|
;;;702    {
;;;703      /* Check the parameters */
;;;704      assert_param(IS_USART_123_PERIPH(USARTx));  
;;;705      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;706      if (NewState != DISABLE)
;;;707      {
;;;708        /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
;;;709        USARTx->CR3 |= CR3_NACK_Set;
0002d4  8a82              LDRH     r2,[r0,#0x14]
0002d6  f0420210          ORR      r2,r2,#0x10
0002da  8282              STRH     r2,[r0,#0x14]
0002dc  e004              B        |L1.744|
                  |L1.734|
;;;710      }
;;;711      else
;;;712      {
;;;713        /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
;;;714        USARTx->CR3 &= CR3_NACK_Reset;
0002de  8a82              LDRH     r2,[r0,#0x14]
0002e0  f64f73ef          MOV      r3,#0xffef
0002e4  401a              ANDS     r2,r2,r3
0002e6  8282              STRH     r2,[r0,#0x14]
                  |L1.744|
;;;715      }
;;;716    }
0002e8  4770              BX       lr
;;;717    
                          ENDP

                  USART_HalfDuplexCmd PROC
;;;726      */
;;;727    void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
0002ea  b121              CBZ      r1,|L1.758|
;;;728    {
;;;729      /* Check the parameters */
;;;730      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;731      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;732      
;;;733      if (NewState != DISABLE)
;;;734      {
;;;735        /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
;;;736        USARTx->CR3 |= CR3_HDSEL_Set;
0002ec  8a82              LDRH     r2,[r0,#0x14]
0002ee  f0420208          ORR      r2,r2,#8
0002f2  8282              STRH     r2,[r0,#0x14]
0002f4  e004              B        |L1.768|
                  |L1.758|
;;;737      }
;;;738      else
;;;739      {
;;;740        /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
;;;741        USARTx->CR3 &= CR3_HDSEL_Reset;
0002f6  8a82              LDRH     r2,[r0,#0x14]
0002f8  f64f73f7          MOV      r3,#0xfff7
0002fc  401a              ANDS     r2,r2,r3
0002fe  8282              STRH     r2,[r0,#0x14]
                  |L1.768|
;;;742      }
;;;743    }
000300  4770              BX       lr
;;;744    
                          ENDP

                  USART_OverSampling8Cmd PROC
;;;757      */
;;;758    void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
000302  b121              CBZ      r1,|L1.782|
;;;759    {
;;;760      /* Check the parameters */
;;;761      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;762      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;763      
;;;764      if (NewState != DISABLE)
;;;765      {
;;;766        /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
;;;767        USARTx->CR1 |= CR1_OVER8_Set;
000304  8982              LDRH     r2,[r0,#0xc]
000306  f4424200          ORR      r2,r2,#0x8000
00030a  8182              STRH     r2,[r0,#0xc]
00030c  e003              B        |L1.790|
                  |L1.782|
;;;768      }
;;;769      else
;;;770      {
;;;771        /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
;;;772        USARTx->CR1 &= CR1_OVER8_Reset;
00030e  8982              LDRH     r2,[r0,#0xc]
000310  f3c2020e          UBFX     r2,r2,#0,#15
000314  8182              STRH     r2,[r0,#0xc]
                  |L1.790|
;;;773      }
;;;774    }
000316  4770              BX       lr
;;;775    
                          ENDP

                  USART_OneBitMethodCmd PROC
;;;784      */
;;;785    void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000318  b121              CBZ      r1,|L1.804|
;;;786    {
;;;787      /* Check the parameters */
;;;788      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;789      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;790      
;;;791      if (NewState != DISABLE)
;;;792      {
;;;793        /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
;;;794        USARTx->CR3 |= CR3_ONEBITE_Set;
00031a  8a82              LDRH     r2,[r0,#0x14]
00031c  f4426200          ORR      r2,r2,#0x800
000320  8282              STRH     r2,[r0,#0x14]
000322  e004              B        |L1.814|
                  |L1.804|
;;;795      }
;;;796      else
;;;797      {
;;;798        /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
;;;799        USARTx->CR3 &= CR3_ONEBITE_Reset;
000324  8a82              LDRH     r2,[r0,#0x14]
000326  f24f73ff          MOV      r3,#0xf7ff
00032a  401a              ANDS     r2,r2,r3
00032c  8282              STRH     r2,[r0,#0x14]
                  |L1.814|
;;;800      }
;;;801    }
00032e  4770              BX       lr
;;;802    
                          ENDP

                  USART_IrDAConfig PROC
;;;813      */
;;;814    void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
000330  8a82              LDRH     r2,[r0,#0x14]
;;;815    {
;;;816      /* Check the parameters */
;;;817      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;818      assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
;;;819        
;;;820      USARTx->CR3 &= CR3_IRLP_Mask;
000332  f64f73fb          MOV      r3,#0xfffb
000336  401a              ANDS     r2,r2,r3
000338  8282              STRH     r2,[r0,#0x14]
;;;821      USARTx->CR3 |= USART_IrDAMode;
00033a  8a82              LDRH     r2,[r0,#0x14]
00033c  430a              ORRS     r2,r2,r1
00033e  8282              STRH     r2,[r0,#0x14]
;;;822    }
000340  4770              BX       lr
;;;823    
                          ENDP

                  USART_IrDACmd PROC
;;;832      */
;;;833    void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
000342  b121              CBZ      r1,|L1.846|
;;;834    {
;;;835      /* Check the parameters */
;;;836      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;837      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;838        
;;;839      if (NewState != DISABLE)
;;;840      {
;;;841        /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
;;;842        USARTx->CR3 |= CR3_IREN_Set;
000344  8a82              LDRH     r2,[r0,#0x14]
000346  f0420202          ORR      r2,r2,#2
00034a  8282              STRH     r2,[r0,#0x14]
00034c  e004              B        |L1.856|
                  |L1.846|
;;;843      }
;;;844      else
;;;845      {
;;;846        /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
;;;847        USARTx->CR3 &= CR3_IREN_Reset;
00034e  8a82              LDRH     r2,[r0,#0x14]
000350  f64f73fd          MOV      r3,#0xfffd
000354  401a              ANDS     r2,r2,r3
000356  8282              STRH     r2,[r0,#0x14]
                  |L1.856|
;;;848      }
;;;849    }
000358  4770              BX       lr
;;;850    
                          ENDP

                  USART_GetFlagStatus PROC
;;;869      */
;;;870    FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
00035a  4602              MOV      r2,r0
;;;871    {
;;;872      FlagStatus bitstatus = RESET;
00035c  2000              MOVS     r0,#0
;;;873      /* Check the parameters */
;;;874      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;875      assert_param(IS_USART_FLAG(USART_FLAG));
;;;876      /* The CTS flag is not available for UART4 and UART5 */
;;;877      if (USART_FLAG == USART_FLAG_CTS)
00035e  f5b17f00          CMP      r1,#0x200
000362  d100              BNE      |L1.870|
;;;878      {
;;;879        assert_param(IS_USART_123_PERIPH(USARTx));
000364  bf00              NOP      
                  |L1.870|
;;;880      }  
;;;881      
;;;882      if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
000366  8813              LDRH     r3,[r2,#0]
000368  420b              TST      r3,r1
00036a  d001              BEQ      |L1.880|
;;;883      {
;;;884        bitstatus = SET;
00036c  2001              MOVS     r0,#1
00036e  e000              B        |L1.882|
                  |L1.880|
;;;885      }
;;;886      else
;;;887      {
;;;888        bitstatus = RESET;
000370  2000              MOVS     r0,#0
                  |L1.882|
;;;889      }
;;;890      return bitstatus;
;;;891    }
000372  4770              BX       lr
;;;892    
                          ENDP

                  USART_ClearFlag PROC
;;;918      */
;;;919    void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
000374  f4017200          AND      r2,r1,#0x200
;;;920    {
;;;921      /* Check the parameters */
;;;922      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;923      assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
;;;924      /* The CTS flag is not available for UART4 and UART5 */
;;;925      if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
000378  f5b27f00          CMP      r2,#0x200
00037c  d100              BNE      |L1.896|
;;;926      {
;;;927        assert_param(IS_USART_123_PERIPH(USARTx));
00037e  bf00              NOP      
                  |L1.896|
;;;928      } 
;;;929       
;;;930      USARTx->SR = (uint16_t)~USART_FLAG;
000380  43ca              MVNS     r2,r1
000382  8002              STRH     r2,[r0,#0]
;;;931    }
000384  4770              BX       lr
;;;932    
                          ENDP

                  USART_GetITStatus PROC
;;;951      */
;;;952    ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
000386  b570              PUSH     {r4-r6,lr}
;;;953    {
000388  4602              MOV      r2,r0
;;;954      uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
00038a  2400              MOVS     r4,#0
00038c  2300              MOVS     r3,#0
00038e  2500              MOVS     r5,#0
;;;955      ITStatus bitstatus = RESET;
000390  2000              MOVS     r0,#0
;;;956      /* Check the parameters */
;;;957      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;958      assert_param(IS_USART_GET_IT(USART_IT));
;;;959      /* The CTS interrupt is not available for UART4 and UART5 */ 
;;;960      if (USART_IT == USART_IT_CTS)
000392  f5a16610          SUB      r6,r1,#0x900
000396  3e6a              SUBS     r6,r6,#0x6a
000398  d100              BNE      |L1.924|
;;;961      {
;;;962        assert_param(IS_USART_123_PERIPH(USARTx));
00039a  bf00              NOP      
                  |L1.924|
;;;963      }   
;;;964      
;;;965      /* Get the USART register index */
;;;966      usartreg = (((uint8_t)USART_IT) >> 0x05);
00039c  f3c11542          UBFX     r5,r1,#5,#3
;;;967      /* Get the interrupt position */
;;;968      itmask = USART_IT & IT_Mask;
0003a0  f001031f          AND      r3,r1,#0x1f
;;;969      itmask = (uint32_t)0x01 << itmask;
0003a4  2601              MOVS     r6,#1
0003a6  fa06f303          LSL      r3,r6,r3
;;;970      
;;;971      if (usartreg == 0x01) /* The IT  is in CR1 register */
0003aa  2d01              CMP      r5,#1
0003ac  d102              BNE      |L1.948|
;;;972      {
;;;973        itmask &= USARTx->CR1;
0003ae  8996              LDRH     r6,[r2,#0xc]
0003b0  4033              ANDS     r3,r3,r6
0003b2  e006              B        |L1.962|
                  |L1.948|
;;;974      }
;;;975      else if (usartreg == 0x02) /* The IT  is in CR2 register */
0003b4  2d02              CMP      r5,#2
0003b6  d102              BNE      |L1.958|
;;;976      {
;;;977        itmask &= USARTx->CR2;
0003b8  8a16              LDRH     r6,[r2,#0x10]
0003ba  4033              ANDS     r3,r3,r6
0003bc  e001              B        |L1.962|
                  |L1.958|
;;;978      }
;;;979      else /* The IT  is in CR3 register */
;;;980      {
;;;981        itmask &= USARTx->CR3;
0003be  8a96              LDRH     r6,[r2,#0x14]
0003c0  4033              ANDS     r3,r3,r6
                  |L1.962|
;;;982      }
;;;983      
;;;984      bitpos = USART_IT >> 0x08;
0003c2  120c              ASRS     r4,r1,#8
;;;985      bitpos = (uint32_t)0x01 << bitpos;
0003c4  2601              MOVS     r6,#1
0003c6  fa06f404          LSL      r4,r6,r4
;;;986      bitpos &= USARTx->SR;
0003ca  8816              LDRH     r6,[r2,#0]
0003cc  4034              ANDS     r4,r4,r6
;;;987      if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
0003ce  b113              CBZ      r3,|L1.982|
0003d0  b10c              CBZ      r4,|L1.982|
;;;988      {
;;;989        bitstatus = SET;
0003d2  2001              MOVS     r0,#1
0003d4  e000              B        |L1.984|
                  |L1.982|
;;;990      }
;;;991      else
;;;992      {
;;;993        bitstatus = RESET;
0003d6  2000              MOVS     r0,#0
                  |L1.984|
;;;994      }
;;;995      
;;;996      return bitstatus;  
;;;997    }
0003d8  bd70              POP      {r4-r6,pc}
;;;998    
                          ENDP

                  USART_ClearITPendingBit PROC
;;;1025     */
;;;1026   void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
0003da  b510              PUSH     {r4,lr}
;;;1027   {
;;;1028     uint16_t bitpos = 0x00, itmask = 0x00;
0003dc  2200              MOVS     r2,#0
0003de  2300              MOVS     r3,#0
;;;1029     /* Check the parameters */
;;;1030     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1031     assert_param(IS_USART_CLEAR_IT(USART_IT));
;;;1032     /* The CTS interrupt is not available for UART4 and UART5 */
;;;1033     if (USART_IT == USART_IT_CTS)
0003e0  f5a16410          SUB      r4,r1,#0x900
0003e4  3c6a              SUBS     r4,r4,#0x6a
0003e6  d100              BNE      |L1.1002|
;;;1034     {
;;;1035       assert_param(IS_USART_123_PERIPH(USARTx));
0003e8  bf00              NOP      
                  |L1.1002|
;;;1036     }   
;;;1037     
;;;1038     bitpos = USART_IT >> 0x08;
0003ea  120a              ASRS     r2,r1,#8
;;;1039     itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
0003ec  2401              MOVS     r4,#1
0003ee  4094              LSLS     r4,r4,r2
0003f0  b2a3              UXTH     r3,r4
;;;1040     USARTx->SR = (uint16_t)~itmask;
0003f2  43dc              MVNS     r4,r3
0003f4  8004              STRH     r4,[r0,#0]
;;;1041   }
0003f6  bd10              POP      {r4,pc}
                  |L1.1016|
                          DCD      0x40013800
                  |L1.1020|
                          DCD      0x40004400
                  |L1.1024|
                          DCD      0x40004800
                  |L1.1028|
                          DCD      0x40004c00
                  |L1.1032|
                          DCD      0x40005000
                          ENDP

