; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\obj\lcd_dis24.o --depend=.\obj\lcd_dis24.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I.\CM3 -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\ST\STM32F10x -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\lcd_dis24.crf user\lcd_dis24.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  LCD_WR_REG PROC
;;;67     //写寄存器地址函数
;;;68     void LCD_WR_REG(unsigned int index)
000000  f04f42c0          MOV      r2,#0x60000000
;;;69     {
;;;70     	*(__IO uint16_t *) (Bank1_LCD_C)= index;
000004  8010              STRH     r0,[r2,#0]
;;;71     
;;;72     }
000006  4770              BX       lr
;;;73     
                          ENDP

                  LCD_WR_CMD PROC
;;;77     //输入：dbw 数据位数，1为16位，0为8位。
;;;78     void LCD_WR_CMD(unsigned int index,unsigned int val)
000008  f04f43c0          MOV      r3,#0x60000000
;;;79     {	
;;;80     	*(__IO uint16_t *) (Bank1_LCD_C)= index;	
00000c  8018              STRH     r0,[r3,#0]
;;;81     	*(__IO uint16_t *) (Bank1_LCD_D)= val;
00000e  4bff              LDR      r3,|L1.1036|
000010  8019              STRH     r1,[r3,#0]
;;;82     }
000012  4770              BX       lr
;;;83     
                          ENDP

                  LCD_RD_data PROC
;;;84     unsigned int LCD_RD_data(void){
000014  2000              MOVS     r0,#0
;;;85     	unsigned int a=0;
;;;86     	a=(*(__IO uint16_t *) (Bank1_LCD_D)); 	//Dummy
000016  49fd              LDR      r1,|L1.1036|
000018  8808              LDRH     r0,[r1,#0]
;;;87     //	a= *(__IO uint16_t *) (Bank1_LCD_D);  	//H
;;;88     //	a=a<<8;
;;;89     	a=*(__IO uint16_t *) (Bank1_LCD_D); //L
00001a  8808              LDRH     r0,[r1,#0]
;;;90     
;;;91     	return(a);	
;;;92     }
00001c  4770              BX       lr
;;;93     
                          ENDP

                  LCD_WR_Data PROC
;;;96     //写16位数据函数
;;;97     void    LCD_WR_Data(unsigned int val)
00001e  4afb              LDR      r2,|L1.1036|
;;;98     {   
;;;99     	*(__IO uint16_t *) (Bank1_LCD_D)= val; 	
000020  8010              STRH     r0,[r2,#0]
;;;100    }
000022  4770              BX       lr
;;;101    
                          ENDP

                  LCD_WR_Data_8 PROC
;;;102    void LCD_WR_Data_8(unsigned int val)
000024  4af9              LDR      r2,|L1.1036|
;;;103    {
;;;104    	*(__IO uint16_t *) (Bank1_LCD_D)= val;
000026  8010              STRH     r0,[r2,#0]
;;;105    }
000028  4770              BX       lr
;;;106    /****************************************************************************
                          ENDP

                  ili9320_ReadRegister PROC
;;;113    ****************************************************************************/
;;;114    u16 ili9320_ReadRegister(u16 index)
00002a  4601              MOV      r1,r0
;;;115    {
;;;116      u16 tmp;
;;;117      tmp= *(volatile unsigned int *)(0x60000000);
00002c  f04f42c0          MOV      r2,#0x60000000
000030  6812              LDR      r2,[r2,#0]
000032  b290              UXTH     r0,r2
;;;118      
;;;119      return tmp;
;;;120    }
000034  4770              BX       lr
;;;121    
                          ENDP

                  ili9320_WriteIndex PROC
;;;130    
;;;131    void ili9320_WriteIndex(u16 idx)
000036  b500              PUSH     {lr}
;;;132    {
000038  4603              MOV      r3,r0
;;;133      LCD_WR_REG(idx);
00003a  4618              MOV      r0,r3
00003c  f7fffffe          BL       LCD_WR_REG
;;;134    }
000040  bd00              POP      {pc}
;;;135    
                          ENDP

                  LCD_Init PROC
;;;138    //初始化函数
;;;139    void LCD_Init(void)
000042  b510              PUSH     {r4,lr}
;;;140    {
;;;141    	Delay(200);
000044  20c8              MOVS     r0,#0xc8
000046  f7fffffe          BL       Delay
;;;142    	LCD_WR_CMD(0x0000,0x0001);    Delay(200);  //打开晶振
00004a  2101              MOVS     r1,#1
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       LCD_WR_CMD
000052  20c8              MOVS     r0,#0xc8
000054  f7fffffe          BL       Delay
;;;143    	Delay(200);
000058  20c8              MOVS     r0,#0xc8
00005a  f7fffffe          BL       Delay
;;;144    	LCD_IDP=ili9320_ReadRegister(0X0000);
00005e  2000              MOVS     r0,#0
000060  f7fffffe          BL       ili9320_ReadRegister
000064  49ea              LDR      r1,|L1.1040|
000066  6008              STR      r0,[r1,#0]  ; LCD_IDP
;;;145    
;;;146    	LCD_IDP=0X9325;
000068  f2493025          MOV      r0,#0x9325
00006c  6008              STR      r0,[r1,#0]  ; LCD_IDP
;;;147    
;;;148    	lcd_rst();	 	//  TFT 复位操作
00006e  f7fffffe          BL       lcd_rst
;;;149    	Delay(200);
000072  20c8              MOVS     r0,#0xc8
000074  f7fffffe          BL       Delay
;;;150    	if((LCD_IDP==0X9325)||(LCD_IDP==0X9328))
000078  48e5              LDR      r0,|L1.1040|
00007a  6800              LDR      r0,[r0,#0]  ; LCD_IDP
00007c  f5a04113          SUB      r1,r0,#0x9300
000080  3925              SUBS     r1,r1,#0x25
000082  d005              BEQ      |L1.144|
000084  48e2              LDR      r0,|L1.1040|
000086  6800              LDR      r0,[r0,#0]  ; LCD_IDP
000088  f5a04113          SUB      r1,r0,#0x9300
00008c  3928              SUBS     r1,r1,#0x28
00008e  d17e              BNE      |L1.398|
                  |L1.144|
;;;151    	{
;;;152    	    Delay(200);
000090  20c8              MOVS     r0,#0xc8
000092  f7fffffe          BL       Delay
;;;153    //############# void Power_Set(void) ################//
;;;154    		LCD_WR_CMD(0x00E7, 0x1014);
000096  f2410114          MOV      r1,#0x1014
00009a  20e7              MOVS     r0,#0xe7
00009c  f7fffffe          BL       LCD_WR_CMD
;;;155    LCD_WR_CMD (0x0001, 0x0100); // set SS and SM bit
0000a0  f44f7180          MOV      r1,#0x100
0000a4  2001              MOVS     r0,#1
0000a6  f7fffffe          BL       LCD_WR_CMD
;;;156    LCD_WR_CMD (0x0002, 0x0200); // set 1 line inversion
0000aa  f44f7100          MOV      r1,#0x200
0000ae  2002              MOVS     r0,#2
0000b0  f7fffffe          BL       LCD_WR_CMD
;;;157    LCD_WR_CMD (0x0003, 0x1030); // set GRAM write direction and BGR=1.
0000b4  f2410130          MOV      r1,#0x1030
0000b8  2003              MOVS     r0,#3
0000ba  f7fffffe          BL       LCD_WR_CMD
;;;158    LCD_WR_CMD (0x0008, 0x0202); // set the back porch and front porch
0000be  f2402102          MOV      r1,#0x202
0000c2  2008              MOVS     r0,#8
0000c4  f7fffffe          BL       LCD_WR_CMD
;;;159    LCD_WR_CMD (0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
0000c8  2100              MOVS     r1,#0
0000ca  2009              MOVS     r0,#9
0000cc  f7fffffe          BL       LCD_WR_CMD
;;;160    LCD_WR_CMD (0x000A, 0x0000); // FMARK function
0000d0  2100              MOVS     r1,#0
0000d2  200a              MOVS     r0,#0xa
0000d4  f7fffffe          BL       LCD_WR_CMD
;;;161    LCD_WR_CMD (0x000C, 0x0000); // RGB interface setting
0000d8  2100              MOVS     r1,#0
0000da  200c              MOVS     r0,#0xc
0000dc  f7fffffe          BL       LCD_WR_CMD
;;;162    LCD_WR_CMD (0x000D, 0x0000); // Frame marker Position
0000e0  2100              MOVS     r1,#0
0000e2  200d              MOVS     r0,#0xd
0000e4  f7fffffe          BL       LCD_WR_CMD
;;;163    LCD_WR_CMD (0x000F, 0x0000); // RGB interface polarity
0000e8  2100              MOVS     r1,#0
0000ea  200f              MOVS     r0,#0xf
0000ec  f7fffffe          BL       LCD_WR_CMD
;;;164    //*************Power On sequence ****************//
;;;165    LCD_WR_CMD (0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
0000f0  2100              MOVS     r1,#0
0000f2  2010              MOVS     r0,#0x10
0000f4  f7fffffe          BL       LCD_WR_CMD
;;;166    LCD_WR_CMD (0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
0000f8  2107              MOVS     r1,#7
0000fa  2011              MOVS     r0,#0x11
0000fc  f7fffffe          BL       LCD_WR_CMD
;;;167    LCD_WR_CMD (0x0012, 0x0000); // VREG1OUT voltage
000100  2100              MOVS     r1,#0
000102  2012              MOVS     r0,#0x12
000104  f7fffffe          BL       LCD_WR_CMD
;;;168    LCD_WR_CMD (0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
000108  2100              MOVS     r1,#0
00010a  2013              MOVS     r0,#0x13
00010c  f7fffffe          BL       LCD_WR_CMD
;;;169    	    Delay(200);
000110  20c8              MOVS     r0,#0xc8
000112  f7fffffe          BL       Delay
;;;170    LCD_WR_CMD (0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
000116  f2416190          MOV      r1,#0x1690
00011a  2010              MOVS     r0,#0x10
00011c  f7fffffe          BL       LCD_WR_CMD
;;;171    LCD_WR_CMD (0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
000120  f2402127          MOV      r1,#0x227
000124  2011              MOVS     r0,#0x11
000126  f7fffffe          BL       LCD_WR_CMD
;;;172    	    Delay(200);
00012a  20c8              MOVS     r0,#0xc8
00012c  f7fffffe          BL       Delay
;;;173    LCD_WR_CMD (0x0012, 0x000C); // Internal reference voltage= Vci;
000130  210c              MOVS     r1,#0xc
000132  2012              MOVS     r0,#0x12
000134  f7fffffe          BL       LCD_WR_CMD
;;;174    	    Delay(200);
000138  20c8              MOVS     r0,#0xc8
00013a  f7fffffe          BL       Delay
;;;175    LCD_WR_CMD (0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
00013e  f44f6100          MOV      r1,#0x800
000142  2013              MOVS     r0,#0x13
000144  f7fffffe          BL       LCD_WR_CMD
;;;176    LCD_WR_CMD (0x0029, 0x0011); // Set VCM[5:0] for VCOMH
000148  2111              MOVS     r1,#0x11
00014a  2029              MOVS     r0,#0x29
00014c  f7fffffe          BL       LCD_WR_CMD
;;;177    LCD_WR_CMD (0x002B, 0x000B); // Set Frame Rate
000150  210b              MOVS     r1,#0xb
000152  202b              MOVS     r0,#0x2b
000154  f7fffffe          BL       LCD_WR_CMD
;;;178    	    Delay(200);
000158  20c8              MOVS     r0,#0xc8
00015a  f7fffffe          BL       Delay
;;;179    LCD_WR_CMD (0x0020, 0x0000); // GRAM horizontal Address
00015e  2100              MOVS     r1,#0
000160  2020              MOVS     r0,#0x20
000162  f7fffffe          BL       LCD_WR_CMD
;;;180    LCD_WR_CMD (0x0021, 0x0000); // GRAM Vertical Address
000166  2100              MOVS     r1,#0
000168  2021              MOVS     r0,#0x21
00016a  f7fffffe          BL       LCD_WR_CMD
;;;181    // ----------- Adjust the Gamma Curve ----------//
;;;182    LCD_WR_CMD (0x0030, 0x0000);
00016e  2100              MOVS     r1,#0
000170  2030              MOVS     r0,#0x30
000172  f7fffffe          BL       LCD_WR_CMD
;;;183    LCD_WR_CMD (0x0031, 0x0106);
000176  f44f7183          MOV      r1,#0x106
00017a  2031              MOVS     r0,#0x31
00017c  f7fffffe          BL       LCD_WR_CMD
;;;184    LCD_WR_CMD (0x0032, 0x0000);
000180  2100              MOVS     r1,#0
000182  2032              MOVS     r0,#0x32
000184  f7fffffe          BL       LCD_WR_CMD
;;;185    LCD_WR_CMD (0x0035, 0x0204);
000188  f44f7101          MOV      r1,#0x204
00018c  e000              B        |L1.400|
                  |L1.398|
00018e  e087              B        |L1.672|
                  |L1.400|
000190  2035              MOVS     r0,#0x35
000192  f7fffffe          BL       LCD_WR_CMD
;;;186    LCD_WR_CMD (0x0036, 0x160A);
000196  f241610a          MOV      r1,#0x160a
00019a  2036              MOVS     r0,#0x36
00019c  f7fffffe          BL       LCD_WR_CMD
;;;187    LCD_WR_CMD (0x0037, 0x0707);
0001a0  f2407107          MOV      r1,#0x707
0001a4  2037              MOVS     r0,#0x37
0001a6  f7fffffe          BL       LCD_WR_CMD
;;;188    LCD_WR_CMD (0x0038, 0x0106);
0001aa  f44f7183          MOV      r1,#0x106
0001ae  2038              MOVS     r0,#0x38
0001b0  f7fffffe          BL       LCD_WR_CMD
;;;189    LCD_WR_CMD (0x0039, 0x0707);
0001b4  f2407107          MOV      r1,#0x707
0001b8  2039              MOVS     r0,#0x39
0001ba  f7fffffe          BL       LCD_WR_CMD
;;;190    LCD_WR_CMD (0x003C, 0x0402);
0001be  f2404102          MOV      r1,#0x402
0001c2  203c              MOVS     r0,#0x3c
0001c4  f7fffffe          BL       LCD_WR_CMD
;;;191    LCD_WR_CMD (0x003D, 0x0C0F);
0001c8  f640410f          MOV      r1,#0xc0f
0001cc  203d              MOVS     r0,#0x3d
0001ce  f7fffffe          BL       LCD_WR_CMD
;;;192    //------------------ Set GRAM area ---------------//
;;;193    LCD_WR_CMD (0x0050, 0x0000); // Horizontal GRAM Start Address
0001d2  2100              MOVS     r1,#0
0001d4  2050              MOVS     r0,#0x50
0001d6  f7fffffe          BL       LCD_WR_CMD
;;;194    LCD_WR_CMD (0x0051, 0x00EF); // Horizontal GRAM End Address
0001da  21ef              MOVS     r1,#0xef
0001dc  2051              MOVS     r0,#0x51
0001de  f7fffffe          BL       LCD_WR_CMD
;;;195    LCD_WR_CMD (0x0052, 0x0000); // Vertical GRAM Start Address
0001e2  2100              MOVS     r1,#0
0001e4  2052              MOVS     r0,#0x52
0001e6  f7fffffe          BL       LCD_WR_CMD
;;;196    LCD_WR_CMD (0x0053, 0x013F); // Vertical GRAM Start Address
0001ea  f240113f          MOV      r1,#0x13f
0001ee  2053              MOVS     r0,#0x53
0001f0  f7fffffe          BL       LCD_WR_CMD
;;;197    LCD_WR_CMD (0x0060, 0x2700); // Gate Scan Line
0001f4  f44f511c          MOV      r1,#0x2700
0001f8  2060              MOVS     r0,#0x60
0001fa  f7fffffe          BL       LCD_WR_CMD
;;;198    LCD_WR_CMD (0x0061, 0x0001); // NDL,VLE, REV
0001fe  2101              MOVS     r1,#1
000200  2061              MOVS     r0,#0x61
000202  f7fffffe          BL       LCD_WR_CMD
;;;199    LCD_WR_CMD (0x006A, 0x0000); // set scrolling line
000206  2100              MOVS     r1,#0
000208  206a              MOVS     r0,#0x6a
00020a  f7fffffe          BL       LCD_WR_CMD
;;;200    //-------------- Partial Display Control ---------//
;;;201    LCD_WR_CMD (0x0080, 0x0000);
00020e  2100              MOVS     r1,#0
000210  2080              MOVS     r0,#0x80
000212  f7fffffe          BL       LCD_WR_CMD
;;;202    LCD_WR_CMD (0x0081, 0x0000);
000216  2100              MOVS     r1,#0
000218  2081              MOVS     r0,#0x81
00021a  f7fffffe          BL       LCD_WR_CMD
;;;203    LCD_WR_CMD (0x0082, 0x0000);
00021e  2100              MOVS     r1,#0
000220  2082              MOVS     r0,#0x82
000222  f7fffffe          BL       LCD_WR_CMD
;;;204    LCD_WR_CMD (0x0083, 0x0000);
000226  2100              MOVS     r1,#0
000228  2083              MOVS     r0,#0x83
00022a  f7fffffe          BL       LCD_WR_CMD
;;;205    LCD_WR_CMD (0x0084, 0x0000);
00022e  2100              MOVS     r1,#0
000230  2084              MOVS     r0,#0x84
000232  f7fffffe          BL       LCD_WR_CMD
;;;206    LCD_WR_CMD (0x0085, 0x0000);
000236  2100              MOVS     r1,#0
000238  2085              MOVS     r0,#0x85
00023a  f7fffffe          BL       LCD_WR_CMD
;;;207    //-------------- Panel Control -------------------//
;;;208    LCD_WR_CMD (0x0090, 0x0010);
00023e  2110              MOVS     r1,#0x10
000240  2090              MOVS     r0,#0x90
000242  f7fffffe          BL       LCD_WR_CMD
;;;209    LCD_WR_CMD (0x0092, 0x0600);
000246  f44f61c0          MOV      r1,#0x600
00024a  2092              MOVS     r0,#0x92
00024c  f7fffffe          BL       LCD_WR_CMD
;;;210    LCD_WR_CMD (0x0007, 0x0133); // 262K color and display ON
000250  f2401133          MOV      r1,#0x133
000254  2007              MOVS     r0,#7
000256  f7fffffe          BL       LCD_WR_CMD
;;;211     /*
;;;212     Delay(950);                     //根据不同晶振速度可以调整延时，保障稳定显示
;;;213     LCD_WR_CMD(0x0001,0x0100); 
;;;214     LCD_WR_CMD(0x0002,0x0700); 
;;;215     LCD_WR_CMD(0x0003,0x1030); 
;;;216     LCD_WR_CMD(0x0004,0x0000); 
;;;217     LCD_WR_CMD(0x0008,0x0207);  
;;;218     LCD_WR_CMD(0x0009,0x0000);
;;;219     LCD_WR_CMD(0x000A,0x0000); 
;;;220     LCD_WR_CMD(0x000C,0x0000); 
;;;221     LCD_WR_CMD(0x000D,0x0000);
;;;222     LCD_WR_CMD(0x000F,0x0000);
;;;223    //power on sequence VGHVGL
;;;224     LCD_WR_CMD(0x0010,0x0000);   
;;;225     LCD_WR_CMD(0x0011,0x0007);  
;;;226     LCD_WR_CMD(0x0012,0x0000);  
;;;227     LCD_WR_CMD(0x0013,0x0000); 
;;;228    //vgh 
;;;229     LCD_WR_CMD(0x0010,0x1290);   
;;;230     LCD_WR_CMD(0x0011,0x0227);
;;;231     Delay(100);
;;;232     //vregiout 
;;;233     LCD_WR_CMD(0x0012,0x001d); //0x001b
;;;234     Delay(100); 
;;;235     //vom amplitude
;;;236     LCD_WR_CMD(0x0013,0x1500);
;;;237     Delay(100); 
;;;238     //vom H
;;;239     LCD_WR_CMD(0x0029,0x0018); 
;;;240     LCD_WR_CMD(0x002B,0x000D); 
;;;241    
;;;242    //gamma
;;;243     LCD_WR_CMD(0x0030,0x0004);
;;;244     LCD_WR_CMD(0x0031,0x0307);
;;;245     LCD_WR_CMD(0x0032,0x0002);// 0006
;;;246     LCD_WR_CMD(0x0035,0x0206);
;;;247     LCD_WR_CMD(0x0036,0x0408);
;;;248     LCD_WR_CMD(0x0037,0x0507); 
;;;249     LCD_WR_CMD(0x0038,0x0204);//0200
;;;250     LCD_WR_CMD(0x0039,0x0707); 
;;;251     LCD_WR_CMD(0x003C,0x0405);// 0504
;;;252     LCD_WR_CMD(0x003D,0x0F02); 
;;;253     //ram
;;;254     LCD_WR_CMD(0x0050,0x0000); 
;;;255     LCD_WR_CMD(0x0051,0x00EF);
;;;256     LCD_WR_CMD(0x0052,0x0000); 
;;;257     LCD_WR_CMD(0x0053,0x013F);  
;;;258     LCD_WR_CMD(0x0060,0xA700); 
;;;259     LCD_WR_CMD(0x0061,0x0001); 
;;;260     LCD_WR_CMD(0x006A,0x0000); 
;;;261     //
;;;262     LCD_WR_CMD(0x0080,0x0000); 
;;;263     LCD_WR_CMD(0x0081,0x0000); 
;;;264     LCD_WR_CMD(0x0082,0x0000); 
;;;265     LCD_WR_CMD(0x0083,0x0000); 
;;;266     LCD_WR_CMD(0x0084,0x0000); 
;;;267     LCD_WR_CMD(0x0085,0x0000); 
;;;268     //
;;;269     LCD_WR_CMD(0x0090,0x0010); 
;;;270     LCD_WR_CMD(0x0092,0x0600); 
;;;271     LCD_WR_CMD(0x0093,0x0003); 
;;;272     LCD_WR_CMD(0x0095,0x0110); 
;;;273     LCD_WR_CMD(0x0097,0x0000); 
;;;274     LCD_WR_CMD(0x0098,0x0000);
;;;275     LCD_WR_CMD(0x0007,0x0133);
;;;276    
;;;277    */	
;;;278    	
;;;279    //	Write_Cmd_Data(0x0022);//		
;;;280     	
;;;281     
;;;282      
;;;283    	//ini();
;;;284    
;;;285        LCD_WR_CMD(32, 0);
00025a  2100              MOVS     r1,#0
00025c  2020              MOVS     r0,#0x20
00025e  f7fffffe          BL       LCD_WR_CMD
;;;286        LCD_WR_CMD(33, 0x013F);
000262  f240113f          MOV      r1,#0x13f
000266  2021              MOVS     r0,#0x21
000268  f7fffffe          BL       LCD_WR_CMD
;;;287    	*(__IO uint16_t *) (Bank1_LCD_C)= 34;
00026c  2022              MOVS     r0,#0x22
00026e  f04f41c0          MOV      r1,#0x60000000
000272  8008              STRH     r0,[r1,#0]
;;;288    	for(color1=0;color1<76800;color1++)
000274  2000              MOVS     r0,#0
000276  4967              LDR      r1,|L1.1044|
000278  6008              STR      r0,[r1,#0]  ; color1
00027a  e008              B        |L1.654|
                  |L1.636|
;;;289    	{
;;;290    	  LCD_WR_Data(0xffff);
00027c  f64f70ff          MOV      r0,#0xffff
000280  f7fffffe          BL       LCD_WR_Data
000284  4863              LDR      r0,|L1.1044|
000286  6800              LDR      r0,[r0,#0]            ;288  ; color1
000288  1c40              ADDS     r0,r0,#1              ;288
00028a  4962              LDR      r1,|L1.1044|
00028c  6008              STR      r0,[r1,#0]            ;288  ; color1
                  |L1.654|
00028e  4861              LDR      r0,|L1.1044|
000290  6800              LDR      r0,[r0,#0]            ;288  ; color1
000292  f5b03f96          CMP      r0,#0x12c00           ;288
000296  d3f1              BCC      |L1.636|
;;;291    	}
;;;292    	color1=0;
000298  2000              MOVS     r0,#0
00029a  495e              LDR      r1,|L1.1044|
00029c  6008              STR      r0,[r1,#0]  ; color1
00029e  e255              B        |L1.1868|
                  |L1.672|
;;;293    	//while(1);					
;;;294    			   
;;;295    	}
;;;296    	else if(LCD_IDP==0x9320||LCD_IDP==0x9300)
0002a0  485b              LDR      r0,|L1.1040|
0002a2  6800              LDR      r0,[r0,#0]  ; LCD_IDP
0002a4  f5a04113          SUB      r1,r0,#0x9300
0002a8  3920              SUBS     r1,r1,#0x20
0002aa  d004              BEQ      |L1.694|
0002ac  4858              LDR      r0,|L1.1040|
0002ae  6800              LDR      r0,[r0,#0]  ; LCD_IDP
0002b0  f5b04f13          CMP      r0,#0x9300
0002b4  d17e              BNE      |L1.948|
                  |L1.694|
;;;297    	{
;;;298    	    Delay(200);
0002b6  20c8              MOVS     r0,#0xc8
0002b8  f7fffffe          BL       Delay
;;;299    		LCD_WR_CMD(0x00,0x0000);
0002bc  2100              MOVS     r1,#0
0002be  4608              MOV      r0,r1
0002c0  f7fffffe          BL       LCD_WR_CMD
;;;300    		LCD_WR_CMD(0x01,0x0100);	//Driver Output Contral.
0002c4  f44f7180          MOV      r1,#0x100
0002c8  2001              MOVS     r0,#1
0002ca  f7fffffe          BL       LCD_WR_CMD
;;;301    		LCD_WR_CMD(0x02,0x0700);	//LCD Driver Waveform Contral.
0002ce  f44f61e0          MOV      r1,#0x700
0002d2  2002              MOVS     r0,#2
0002d4  f7fffffe          BL       LCD_WR_CMD
;;;302    //		LCD_WR_REG(0x03,0x1030);	//Entry Mode Set.
;;;303    		LCD_WR_CMD(0x03,0x1018);	//Entry Mode Set.
0002d8  f2410118          MOV      r1,#0x1018
0002dc  2003              MOVS     r0,#3
0002de  f7fffffe          BL       LCD_WR_CMD
;;;304    	
;;;305    		LCD_WR_CMD(0x04,0x0000);	//Scalling Contral.
0002e2  2100              MOVS     r1,#0
0002e4  2004              MOVS     r0,#4
0002e6  f7fffffe          BL       LCD_WR_CMD
;;;306    		LCD_WR_CMD(0x08,0x0202);	//Display Contral 2.(0x0207)
0002ea  f2402102          MOV      r1,#0x202
0002ee  2008              MOVS     r0,#8
0002f0  f7fffffe          BL       LCD_WR_CMD
;;;307    		LCD_WR_CMD(0x09,0x0000);	//Display Contral 3.(0x0000)
0002f4  2100              MOVS     r1,#0
0002f6  2009              MOVS     r0,#9
0002f8  f7fffffe          BL       LCD_WR_CMD
;;;308    		LCD_WR_CMD(0x0a,0x0000);	//Frame Cycle Contal.(0x0000)
0002fc  2100              MOVS     r1,#0
0002fe  200a              MOVS     r0,#0xa
000300  f7fffffe          BL       LCD_WR_CMD
;;;309    		LCD_WR_CMD(0x0c,(1<<0));	//Extern Display Interface Contral 1.(0x0000)
000304  2101              MOVS     r1,#1
000306  200c              MOVS     r0,#0xc
000308  f7fffffe          BL       LCD_WR_CMD
;;;310    		LCD_WR_CMD(0x0d,0x0000);	//Frame Maker Position.
00030c  2100              MOVS     r1,#0
00030e  200d              MOVS     r0,#0xd
000310  f7fffffe          BL       LCD_WR_CMD
;;;311    		LCD_WR_CMD(0x0f,0x0000);	//Extern Display Interface Contral 2.
000314  2100              MOVS     r1,#0
000316  200f              MOVS     r0,#0xf
000318  f7fffffe          BL       LCD_WR_CMD
;;;312    	
;;;313    	    Delay(200);
00031c  20c8              MOVS     r0,#0xc8
00031e  f7fffffe          BL       Delay
;;;314    		LCD_WR_CMD(0x07,0x0101);	//Display Contral.
000322  f2401101          MOV      r1,#0x101
000326  2007              MOVS     r0,#7
000328  f7fffffe          BL       LCD_WR_CMD
;;;315    	    Delay(200);
00032c  20c8              MOVS     r0,#0xc8
00032e  f7fffffe          BL       Delay
;;;316    	
;;;317    		LCD_WR_CMD(0x10,(1<<12)|(0<<8)|(1<<7)|(1<<6)|(0<<4));	//Power Control 1.(0x16b0)
000332  f44f5186          MOV      r1,#0x10c0
000336  2010              MOVS     r0,#0x10
000338  f7fffffe          BL       LCD_WR_CMD
;;;318    		LCD_WR_CMD(0x11,0x0007);								//Power Control 2.(0x0001)
00033c  2107              MOVS     r1,#7
00033e  2011              MOVS     r0,#0x11
000340  f7fffffe          BL       LCD_WR_CMD
;;;319    		LCD_WR_CMD(0x12,(1<<8)|(1<<4)|(0<<0));					//Power Control 3.(0x0138)
000344  f44f7188          MOV      r1,#0x110
000348  2012              MOVS     r0,#0x12
00034a  f7fffffe          BL       LCD_WR_CMD
;;;320    		LCD_WR_CMD(0x13,0x0b00);								//Power Control 4.
00034e  f44f6130          MOV      r1,#0xb00
000352  2013              MOVS     r0,#0x13
000354  f7fffffe          BL       LCD_WR_CMD
;;;321    		LCD_WR_CMD(0x29,0x0000);								//Power Control 7.
000358  2100              MOVS     r1,#0
00035a  2029              MOVS     r0,#0x29
00035c  f7fffffe          BL       LCD_WR_CMD
;;;322    	
;;;323    		LCD_WR_CMD(0x2b,(1<<14)|(1<<4));
000360  f2440110          MOV      r1,#0x4010
000364  202b              MOVS     r0,#0x2b
000366  f7fffffe          BL       LCD_WR_CMD
;;;324    		
;;;325    		LCD_WR_CMD(0x50,0);		//Set X Start.
00036a  2100              MOVS     r1,#0
00036c  2050              MOVS     r0,#0x50
00036e  f7fffffe          BL       LCD_WR_CMD
;;;326    		LCD_WR_CMD(0x51,239);	//Set X End.
000372  21ef              MOVS     r1,#0xef
000374  2051              MOVS     r0,#0x51
000376  f7fffffe          BL       LCD_WR_CMD
;;;327    		LCD_WR_CMD(0x52,0);		//Set Y Start.
00037a  2100              MOVS     r1,#0
00037c  2052              MOVS     r0,#0x52
00037e  f7fffffe          BL       LCD_WR_CMD
;;;328    		LCD_WR_CMD(0x53,319);	//Set Y End.
000382  f240113f          MOV      r1,#0x13f
000386  2053              MOVS     r0,#0x53
000388  f7fffffe          BL       LCD_WR_CMD
;;;329    	
;;;330    		LCD_WR_CMD(0x60,0x2700);	//Driver Output Control.
00038c  f44f511c          MOV      r1,#0x2700
000390  2060              MOVS     r0,#0x60
000392  f7fffffe          BL       LCD_WR_CMD
;;;331    		LCD_WR_CMD(0x61,0x0001);	//Driver Output Control.
000396  2101              MOVS     r1,#1
000398  2061              MOVS     r0,#0x61
00039a  f7fffffe          BL       LCD_WR_CMD
;;;332    		LCD_WR_CMD(0x6a,0x0000);	//Vertical Srcoll Control.
00039e  2100              MOVS     r1,#0
0003a0  206a              MOVS     r0,#0x6a
0003a2  f7fffffe          BL       LCD_WR_CMD
;;;333    	
;;;334    		LCD_WR_CMD(0x80,0x0000);	//Display Position? Partial Display 1.
0003a6  2100              MOVS     r1,#0
0003a8  2080              MOVS     r0,#0x80
0003aa  f7fffffe          BL       LCD_WR_CMD
;;;335    		LCD_WR_CMD(0x81,0x0000);	//RAM Address Start? Partial Display 1.
0003ae  2100              MOVS     r1,#0
0003b0  2081              MOVS     r0,#0x81
0003b2  e000              B        |L1.950|
                  |L1.948|
0003b4  e038              B        |L1.1064|
                  |L1.950|
0003b6  f7fffffe          BL       LCD_WR_CMD
;;;336    		LCD_WR_CMD(0x82,0x0000);	//RAM Address End-Partial Display 1.
0003ba  2100              MOVS     r1,#0
0003bc  2082              MOVS     r0,#0x82
0003be  f7fffffe          BL       LCD_WR_CMD
;;;337    		LCD_WR_CMD(0x83,0x0000);	//Displsy Position? Partial Display 2.
0003c2  2100              MOVS     r1,#0
0003c4  2083              MOVS     r0,#0x83
0003c6  f7fffffe          BL       LCD_WR_CMD
;;;338    		LCD_WR_CMD(0x84,0x0000);	//RAM Address Start? Partial Display 2.
0003ca  2100              MOVS     r1,#0
0003cc  2084              MOVS     r0,#0x84
0003ce  f7fffffe          BL       LCD_WR_CMD
;;;339    		LCD_WR_CMD(0x85,0x0000);	//RAM Address End? Partial Display 2.
0003d2  2100              MOVS     r1,#0
0003d4  2085              MOVS     r0,#0x85
0003d6  f7fffffe          BL       LCD_WR_CMD
;;;340    	
;;;341    		LCD_WR_CMD(0x90,(0<<7)|(16<<0));	//Frame Cycle Contral.(0x0013)
0003da  2110              MOVS     r1,#0x10
0003dc  2090              MOVS     r0,#0x90
0003de  f7fffffe          BL       LCD_WR_CMD
;;;342    		LCD_WR_CMD(0x92,0x0000);	//Panel Interface Contral 2.(0x0000)
0003e2  2100              MOVS     r1,#0
0003e4  2092              MOVS     r0,#0x92
0003e6  f7fffffe          BL       LCD_WR_CMD
;;;343    		LCD_WR_CMD(0x93,0x0001);	//Panel Interface Contral 3.
0003ea  2101              MOVS     r1,#1
0003ec  2093              MOVS     r0,#0x93
0003ee  f7fffffe          BL       LCD_WR_CMD
;;;344    		LCD_WR_CMD(0x95,0x0110);	//Frame Cycle Contral.(0x0110)
0003f2  f44f7188          MOV      r1,#0x110
0003f6  2095              MOVS     r0,#0x95
0003f8  f7fffffe          BL       LCD_WR_CMD
;;;345    		LCD_WR_CMD(0x97,(0<<8));	//
0003fc  2100              MOVS     r1,#0
0003fe  2097              MOVS     r0,#0x97
000400  f7fffffe          BL       LCD_WR_CMD
;;;346    		LCD_WR_CMD(0x98,0x0000);	//Frame Cycle Contral.
000404  2100              MOVS     r1,#0
000406  2098              MOVS     r0,#0x98
000408  e006              B        |L1.1048|
00040a  0000              DCW      0x0000
                  |L1.1036|
                          DCD      0x60020000
                  |L1.1040|
                          DCD      LCD_IDP
                  |L1.1044|
                          DCD      color1
                  |L1.1048|
000418  f7fffffe          BL       LCD_WR_CMD
;;;347    
;;;348    	
;;;349    		LCD_WR_CMD(0x07,0x0173);	//(0x0173)
00041c  f2401173          MOV      r1,#0x173
000420  2007              MOVS     r0,#7
000422  f7fffffe          BL       LCD_WR_CMD
000426  e3e9              B        |L1.3068|
                  |L1.1064|
;;;350    	}
;;;351    	else if(LCD_IDP==0x9331)
000428  48ff              LDR      r0,|L1.2088|
00042a  6800              LDR      r0,[r0,#0]  ; LCD_IDP
00042c  f5a04113          SUB      r1,r0,#0x9300
000430  3931              SUBS     r1,r1,#0x31
000432  d17e              BNE      |L1.1330|
;;;352    	{
;;;353    	    Delay(200);
000434  20c8              MOVS     r0,#0xc8
000436  f7fffffe          BL       Delay
;;;354    		LCD_WR_CMD(0x00E7, 0x1014);
00043a  f2410114          MOV      r1,#0x1014
00043e  20e7              MOVS     r0,#0xe7
000440  f7fffffe          BL       LCD_WR_CMD
;;;355    		LCD_WR_CMD(0x0001, 0x0100); // set SS and SM bit   0x0100
000444  f44f7180          MOV      r1,#0x100
000448  2001              MOVS     r0,#1
00044a  f7fffffe          BL       LCD_WR_CMD
;;;356    		LCD_WR_CMD(0x0002, 0x0200); // set 1 line inversion
00044e  f44f7100          MOV      r1,#0x200
000452  2002              MOVS     r0,#2
000454  f7fffffe          BL       LCD_WR_CMD
;;;357    		LCD_WR_CMD(0x0003, 0x1030); // set GRAM write direction and BGR=1.     0x1030
000458  f2410130          MOV      r1,#0x1030
00045c  2003              MOVS     r0,#3
00045e  f7fffffe          BL       LCD_WR_CMD
;;;358    		LCD_WR_CMD(0x0008, 0x0202); // set the back porch and front porch
000462  f2402102          MOV      r1,#0x202
000466  2008              MOVS     r0,#8
000468  f7fffffe          BL       LCD_WR_CMD
;;;359    		LCD_WR_CMD(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
00046c  2100              MOVS     r1,#0
00046e  2009              MOVS     r0,#9
000470  f7fffffe          BL       LCD_WR_CMD
;;;360    		LCD_WR_CMD(0x000A, 0x0000); // FMARK function
000474  2100              MOVS     r1,#0
000476  200a              MOVS     r0,#0xa
000478  f7fffffe          BL       LCD_WR_CMD
;;;361    		LCD_WR_CMD(0x000C, 0x0000); // RGB interface setting
00047c  2100              MOVS     r1,#0
00047e  200c              MOVS     r0,#0xc
000480  f7fffffe          BL       LCD_WR_CMD
;;;362    		LCD_WR_CMD(0x000D, 0x0000); // Frame marker Position
000484  2100              MOVS     r1,#0
000486  200d              MOVS     r0,#0xd
000488  f7fffffe          BL       LCD_WR_CMD
;;;363    		LCD_WR_CMD(0x000F, 0x0000); // RGB interface polarity
00048c  2100              MOVS     r1,#0
00048e  200f              MOVS     r0,#0xf
000490  f7fffffe          BL       LCD_WR_CMD
;;;364    		//*************Power On sequence ****************//
;;;365    		LCD_WR_CMD(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
000494  2100              MOVS     r1,#0
000496  2010              MOVS     r0,#0x10
000498  f7fffffe          BL       LCD_WR_CMD
;;;366    		LCD_WR_CMD(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
00049c  2107              MOVS     r1,#7
00049e  2011              MOVS     r0,#0x11
0004a0  f7fffffe          BL       LCD_WR_CMD
;;;367    		LCD_WR_CMD(0x0012, 0x0000); // VREG1OUT voltage
0004a4  2100              MOVS     r1,#0
0004a6  2012              MOVS     r0,#0x12
0004a8  f7fffffe          BL       LCD_WR_CMD
;;;368    		LCD_WR_CMD(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
0004ac  2100              MOVS     r1,#0
0004ae  2013              MOVS     r0,#0x13
0004b0  f7fffffe          BL       LCD_WR_CMD
;;;369    	    Delay(200);
0004b4  20c8              MOVS     r0,#0xc8
0004b6  f7fffffe          BL       Delay
;;;370    		LCD_WR_CMD(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
0004ba  f2416190          MOV      r1,#0x1690
0004be  2010              MOVS     r0,#0x10
0004c0  f7fffffe          BL       LCD_WR_CMD
;;;371    		LCD_WR_CMD(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
0004c4  f2402127          MOV      r1,#0x227
0004c8  2011              MOVS     r0,#0x11
0004ca  f7fffffe          BL       LCD_WR_CMD
;;;372    	    Delay(200);
0004ce  20c8              MOVS     r0,#0xc8
0004d0  f7fffffe          BL       Delay
;;;373    		LCD_WR_CMD(0x0012, 0x000C); // Internal reference voltage= Vci;
0004d4  210c              MOVS     r1,#0xc
0004d6  2012              MOVS     r0,#0x12
0004d8  f7fffffe          BL       LCD_WR_CMD
;;;374    	    Delay(200);
0004dc  20c8              MOVS     r0,#0xc8
0004de  f7fffffe          BL       Delay
;;;375    		LCD_WR_CMD(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
0004e2  f44f6100          MOV      r1,#0x800
0004e6  2013              MOVS     r0,#0x13
0004e8  f7fffffe          BL       LCD_WR_CMD
;;;376    		LCD_WR_CMD(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
0004ec  2111              MOVS     r1,#0x11
0004ee  2029              MOVS     r0,#0x29
0004f0  f7fffffe          BL       LCD_WR_CMD
;;;377    		LCD_WR_CMD(0x002B, 0x000B); // Set Frame Rate
0004f4  210b              MOVS     r1,#0xb
0004f6  202b              MOVS     r0,#0x2b
0004f8  f7fffffe          BL       LCD_WR_CMD
;;;378    	    Delay(200);
0004fc  20c8              MOVS     r0,#0xc8
0004fe  f7fffffe          BL       Delay
;;;379    		LCD_WR_CMD(0x0020, 0x0000); // GRAM horizontal Address
000502  2100              MOVS     r1,#0
000504  2020              MOVS     r0,#0x20
000506  f7fffffe          BL       LCD_WR_CMD
;;;380    		LCD_WR_CMD(0x0021, 0x0000); // GRAM Vertical Address
00050a  2100              MOVS     r1,#0
00050c  2021              MOVS     r0,#0x21
00050e  f7fffffe          BL       LCD_WR_CMD
;;;381    		// ----------- Adjust the Gamma Curve ----------//
;;;382    		LCD_WR_CMD(0x0030, 0x0000);
000512  2100              MOVS     r1,#0
000514  2030              MOVS     r0,#0x30
000516  f7fffffe          BL       LCD_WR_CMD
;;;383    		LCD_WR_CMD(0x0031, 0x0106);
00051a  f44f7183          MOV      r1,#0x106
00051e  2031              MOVS     r0,#0x31
000520  f7fffffe          BL       LCD_WR_CMD
;;;384    		LCD_WR_CMD(0x0032, 0x0000);
000524  2100              MOVS     r1,#0
000526  2032              MOVS     r0,#0x32
000528  f7fffffe          BL       LCD_WR_CMD
;;;385    		LCD_WR_CMD(0x0035, 0x0204);
00052c  f44f7101          MOV      r1,#0x204
000530  e000              B        |L1.1332|
                  |L1.1330|
000532  e076              B        |L1.1570|
                  |L1.1332|
000534  2035              MOVS     r0,#0x35
000536  f7fffffe          BL       LCD_WR_CMD
;;;386    		LCD_WR_CMD(0x0036, 0x160A);
00053a  f241610a          MOV      r1,#0x160a
00053e  2036              MOVS     r0,#0x36
000540  f7fffffe          BL       LCD_WR_CMD
;;;387    		LCD_WR_CMD(0x0037, 0x0707);
000544  f2407107          MOV      r1,#0x707
000548  2037              MOVS     r0,#0x37
00054a  f7fffffe          BL       LCD_WR_CMD
;;;388    		LCD_WR_CMD(0x0038, 0x0106);
00054e  f44f7183          MOV      r1,#0x106
000552  2038              MOVS     r0,#0x38
000554  f7fffffe          BL       LCD_WR_CMD
;;;389    		LCD_WR_CMD(0x0039, 0x0707);
000558  f2407107          MOV      r1,#0x707
00055c  2039              MOVS     r0,#0x39
00055e  f7fffffe          BL       LCD_WR_CMD
;;;390    		LCD_WR_CMD(0x003C, 0x0402);
000562  f2404102          MOV      r1,#0x402
000566  203c              MOVS     r0,#0x3c
000568  f7fffffe          BL       LCD_WR_CMD
;;;391    		LCD_WR_CMD(0x003D, 0x0C0F);
00056c  f640410f          MOV      r1,#0xc0f
000570  203d              MOVS     r0,#0x3d
000572  f7fffffe          BL       LCD_WR_CMD
;;;392    		//------------------ Set GRAM area ---------------//
;;;393    		LCD_WR_CMD(0x0050, 0x0000); // Horizontal GRAM Start Address
000576  2100              MOVS     r1,#0
000578  2050              MOVS     r0,#0x50
00057a  f7fffffe          BL       LCD_WR_CMD
;;;394    		LCD_WR_CMD(0x0051, 0x00EF); // Horizontal GRAM End Address
00057e  21ef              MOVS     r1,#0xef
000580  2051              MOVS     r0,#0x51
000582  f7fffffe          BL       LCD_WR_CMD
;;;395    		LCD_WR_CMD(0x0052, 0x0000); // Vertical GRAM Start Address
000586  2100              MOVS     r1,#0
000588  2052              MOVS     r0,#0x52
00058a  f7fffffe          BL       LCD_WR_CMD
;;;396    		LCD_WR_CMD(0x0053, 0x013F); // Vertical GRAM Start Address
00058e  f240113f          MOV      r1,#0x13f
000592  2053              MOVS     r0,#0x53
000594  f7fffffe          BL       LCD_WR_CMD
;;;397    		LCD_WR_CMD(0x0060, 0x2700); // Gate Scan Line
000598  f44f511c          MOV      r1,#0x2700
00059c  2060              MOVS     r0,#0x60
00059e  f7fffffe          BL       LCD_WR_CMD
;;;398    		LCD_WR_CMD(0x0061, 0x0001); // NDL,VLE, REV
0005a2  2101              MOVS     r1,#1
0005a4  2061              MOVS     r0,#0x61
0005a6  f7fffffe          BL       LCD_WR_CMD
;;;399    		LCD_WR_CMD(0x006A, 0x0000); // set scrolling line
0005aa  2100              MOVS     r1,#0
0005ac  206a              MOVS     r0,#0x6a
0005ae  f7fffffe          BL       LCD_WR_CMD
;;;400    		//-------------- Partial Display Control ---------//
;;;401    		LCD_WR_CMD(0x0080, 0x0000);
0005b2  2100              MOVS     r1,#0
0005b4  2080              MOVS     r0,#0x80
0005b6  f7fffffe          BL       LCD_WR_CMD
;;;402    		LCD_WR_CMD(0x0081, 0x0000);
0005ba  2100              MOVS     r1,#0
0005bc  2081              MOVS     r0,#0x81
0005be  f7fffffe          BL       LCD_WR_CMD
;;;403    		LCD_WR_CMD(0x0082, 0x0000);
0005c2  2100              MOVS     r1,#0
0005c4  2082              MOVS     r0,#0x82
0005c6  f7fffffe          BL       LCD_WR_CMD
;;;404    		LCD_WR_CMD(0x0083, 0x0000);
0005ca  2100              MOVS     r1,#0
0005cc  2083              MOVS     r0,#0x83
0005ce  f7fffffe          BL       LCD_WR_CMD
;;;405    		LCD_WR_CMD(0x0084, 0x0000);
0005d2  2100              MOVS     r1,#0
0005d4  2084              MOVS     r0,#0x84
0005d6  f7fffffe          BL       LCD_WR_CMD
;;;406    		LCD_WR_CMD(0x0085, 0x0000);
0005da  2100              MOVS     r1,#0
0005dc  2085              MOVS     r0,#0x85
0005de  f7fffffe          BL       LCD_WR_CMD
;;;407    		//-------------- Panel Control -------------------//
;;;408    		LCD_WR_CMD(0x0090, 0x0010);
0005e2  2110              MOVS     r1,#0x10
0005e4  2090              MOVS     r0,#0x90
0005e6  f7fffffe          BL       LCD_WR_CMD
;;;409    		LCD_WR_CMD(0x0092, 0x0600);
0005ea  f44f61c0          MOV      r1,#0x600
0005ee  2092              MOVS     r0,#0x92
0005f0  f7fffffe          BL       LCD_WR_CMD
;;;410    		LCD_WR_CMD(0x0007,0x0021);		
0005f4  2121              MOVS     r1,#0x21
0005f6  2007              MOVS     r0,#7
0005f8  f7fffffe          BL       LCD_WR_CMD
;;;411    	    Delay(200);
0005fc  20c8              MOVS     r0,#0xc8
0005fe  f7fffffe          BL       Delay
;;;412    		LCD_WR_CMD(0x0007,0x0061);
000602  2161              MOVS     r1,#0x61
000604  2007              MOVS     r0,#7
000606  f7fffffe          BL       LCD_WR_CMD
;;;413    	    Delay(200);
00060a  20c8              MOVS     r0,#0xc8
00060c  f7fffffe          BL       Delay
;;;414    		LCD_WR_CMD(0x0007,0x0133);  // 262K color and display ON
000610  f2401133          MOV      r1,#0x133
000614  2007              MOVS     r0,#7
000616  f7fffffe          BL       LCD_WR_CMD
;;;415    	    Delay(200);
00061a  20c8              MOVS     r0,#0xc8
00061c  f7fffffe          BL       Delay
000620  e2ec              B        |L1.3068|
                  |L1.1570|
;;;416    	}
;;;417    	else if(LCD_IDP==0x9919)
000622  4881              LDR      r0,|L1.2088|
000624  6800              LDR      r0,[r0,#0]  ; LCD_IDP
000626  f5a04119          SUB      r1,r0,#0x9900
00062a  3919              SUBS     r1,r1,#0x19
00062c  d17d              BNE      |L1.1834|
;;;418    	{
;;;419    		//*********POWER ON &RESET DISPLAY OFF
;;;420    	    Delay(200);
00062e  20c8              MOVS     r0,#0xc8
000630  f7fffffe          BL       Delay
;;;421    		
;;;422    		 LCD_WR_CMD(0x28,0x0006);
000634  2106              MOVS     r1,#6
000636  2028              MOVS     r0,#0x28
000638  f7fffffe          BL       LCD_WR_CMD
;;;423    		
;;;424    		 LCD_WR_CMD(0x00,0x0001);
00063c  2101              MOVS     r1,#1
00063e  2000              MOVS     r0,#0
000640  f7fffffe          BL       LCD_WR_CMD
;;;425    		
;;;426    		 LCD_WR_CMD(0x10,0x0000);
000644  2100              MOVS     r1,#0
000646  2010              MOVS     r0,#0x10
000648  f7fffffe          BL       LCD_WR_CMD
;;;427    		
;;;428    		 LCD_WR_CMD(0x01,0x72ef);
00064c  f24721ef          MOV      r1,#0x72ef
000650  2001              MOVS     r0,#1
000652  f7fffffe          BL       LCD_WR_CMD
;;;429    
;;;430    		 LCD_WR_CMD(0x02,0x0600);
000656  f44f61c0          MOV      r1,#0x600
00065a  2002              MOVS     r0,#2
00065c  f7fffffe          BL       LCD_WR_CMD
;;;431    
;;;432    		 LCD_WR_CMD(0x03,0x6a38);
000660  f6462138          MOV      r1,#0x6a38
000664  2003              MOVS     r0,#3
000666  f7fffffe          BL       LCD_WR_CMD
;;;433    		
;;;434    		 LCD_WR_CMD(0x11,0x6874);//70
00066a  f6460174          MOV      r1,#0x6874
00066e  2011              MOVS     r0,#0x11
000670  f7fffffe          BL       LCD_WR_CMD
;;;435    		
;;;436    		 
;;;437    		     //  RAM WRITE DATA MASK
;;;438    		 LCD_WR_CMD(0x0f,0x0000); 
000674  2100              MOVS     r1,#0
000676  200f              MOVS     r0,#0xf
000678  f7fffffe          BL       LCD_WR_CMD
;;;439    		    //  RAM WRITE DATA MASK
;;;440    		 LCD_WR_CMD(0x0b,0x5308); 
00067c  f2453108          MOV      r1,#0x5308
000680  200b              MOVS     r0,#0xb
000682  f7fffffe          BL       LCD_WR_CMD
;;;441    		
;;;442    		 LCD_WR_CMD(0x0c,0x0003);
000686  2103              MOVS     r1,#3
000688  200c              MOVS     r0,#0xc
00068a  f7fffffe          BL       LCD_WR_CMD
;;;443    		
;;;444    		 LCD_WR_CMD(0x0d,0x000a);
00068e  210a              MOVS     r1,#0xa
000690  200d              MOVS     r0,#0xd
000692  f7fffffe          BL       LCD_WR_CMD
;;;445    		
;;;446    		 LCD_WR_CMD(0x0e,0x2e00);  //0030
000696  f44f5138          MOV      r1,#0x2e00
00069a  200e              MOVS     r0,#0xe
00069c  f7fffffe          BL       LCD_WR_CMD
;;;447    		
;;;448    		 LCD_WR_CMD(0x1e,0x00be);
0006a0  21be              MOVS     r1,#0xbe
0006a2  201e              MOVS     r0,#0x1e
0006a4  f7fffffe          BL       LCD_WR_CMD
;;;449    		
;;;450    		 LCD_WR_CMD(0x25,0x8000);
0006a8  f44f4100          MOV      r1,#0x8000
0006ac  2025              MOVS     r0,#0x25
0006ae  f7fffffe          BL       LCD_WR_CMD
;;;451    		
;;;452    		 LCD_WR_CMD(0x26,0x7800);
0006b2  f44f41f0          MOV      r1,#0x7800
0006b6  2026              MOVS     r0,#0x26
0006b8  f7fffffe          BL       LCD_WR_CMD
;;;453    		
;;;454    		 LCD_WR_CMD(0x27,0x0078);
0006bc  2178              MOVS     r1,#0x78
0006be  2027              MOVS     r0,#0x27
0006c0  f7fffffe          BL       LCD_WR_CMD
;;;455    		
;;;456    		 LCD_WR_CMD(0x4e,0x0000);
0006c4  2100              MOVS     r1,#0
0006c6  204e              MOVS     r0,#0x4e
0006c8  f7fffffe          BL       LCD_WR_CMD
;;;457    		
;;;458    		 LCD_WR_CMD(0x4f,0x0000);
0006cc  2100              MOVS     r1,#0
0006ce  204f              MOVS     r0,#0x4f
0006d0  f7fffffe          BL       LCD_WR_CMD
;;;459    		
;;;460    		 LCD_WR_CMD(0x12,0x08d9);
0006d4  f64001d9          MOV      r1,#0x8d9
0006d8  2012              MOVS     r0,#0x12
0006da  f7fffffe          BL       LCD_WR_CMD
;;;461    		
;;;462    		 // -----------------Adjust the Gamma Curve----//
;;;463    		 LCD_WR_CMD(0x30,0x0000);	 //0007
0006de  2100              MOVS     r1,#0
0006e0  2030              MOVS     r0,#0x30
0006e2  f7fffffe          BL       LCD_WR_CMD
;;;464    		
;;;465    		 LCD_WR_CMD(0x31,0x0104);	   //0203
0006e6  f44f7182          MOV      r1,#0x104
0006ea  2031              MOVS     r0,#0x31
0006ec  f7fffffe          BL       LCD_WR_CMD
;;;466    		
;;;467    		 LCD_WR_CMD(0x32,0x0100);		//0001
0006f0  f44f7180          MOV      r1,#0x100
0006f4  2032              MOVS     r0,#0x32
0006f6  f7fffffe          BL       LCD_WR_CMD
;;;468    
;;;469    		 LCD_WR_CMD(0x33,0x0305);	  //0007
0006fa  f2403105          MOV      r1,#0x305
0006fe  2033              MOVS     r0,#0x33
000700  f7fffffe          BL       LCD_WR_CMD
;;;470    
;;;471    		 LCD_WR_CMD(0x34,0x0505);	  //0007
000704  f2405105          MOV      r1,#0x505
000708  2034              MOVS     r0,#0x34
00070a  f7fffffe          BL       LCD_WR_CMD
;;;472    		
;;;473    		 LCD_WR_CMD(0x35,0x0305);		 //0407
00070e  f2403105          MOV      r1,#0x305
000712  2035              MOVS     r0,#0x35
000714  f7fffffe          BL       LCD_WR_CMD
;;;474    		
;;;475    		 LCD_WR_CMD(0x36,0x0707);		 //0407
000718  f2407107          MOV      r1,#0x707
00071c  2036              MOVS     r0,#0x36
00071e  f7fffffe          BL       LCD_WR_CMD
;;;476    		
;;;477    		 LCD_WR_CMD(0x37,0x0300);		  //0607
000722  f44f7140          MOV      r1,#0x300
000726  2037              MOVS     r0,#0x37
000728  e000              B        |L1.1836|
                  |L1.1834|
00072a  e010              B        |L1.1870|
                  |L1.1836|
00072c  f7fffffe          BL       LCD_WR_CMD
;;;478    		
;;;479    		 LCD_WR_CMD(0x3a,0x1200);		 //0106
000730  f44f5190          MOV      r1,#0x1200
000734  203a              MOVS     r0,#0x3a
000736  f7fffffe          BL       LCD_WR_CMD
;;;480    		
;;;481    		 LCD_WR_CMD(0x3b,0x0800);		 
00073a  f44f6100          MOV      r1,#0x800
00073e  203b              MOVS     r0,#0x3b
000740  f7fffffe          BL       LCD_WR_CMD
;;;482    
;;;483    		 LCD_WR_CMD(0x07,0x0033);
000744  2133              MOVS     r1,#0x33
000746  2007              MOVS     r0,#7
000748  f7fffffe          BL       LCD_WR_CMD
                  |L1.1868|
00074c  e256              B        |L1.3068|
                  |L1.1870|
;;;484    	}
;;;485    	else if(LCD_IDP==0x1505)
00074e  4836              LDR      r0,|L1.2088|
000750  6800              LDR      r0,[r0,#0]  ; LCD_IDP
000752  f5a051a8          SUB      r1,r0,#0x1500
000756  3905              SUBS     r1,#5
000758  d168              BNE      |L1.2092|
;;;486    	{
;;;487    // second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
;;;488    	    Delay(200);
00075a  20c8              MOVS     r0,#0xc8
00075c  f7fffffe          BL       Delay
;;;489    		LCD_WR_CMD(0x0007,0x0000);
000760  2100              MOVS     r1,#0
000762  2007              MOVS     r0,#7
000764  f7fffffe          BL       LCD_WR_CMD
;;;490    	    Delay(200);
000768  20c8              MOVS     r0,#0xc8
00076a  f7fffffe          BL       Delay
;;;491            LCD_WR_CMD(0x0012,0x011C);//0x011A   why need to set several times?
00076e  f44f718e          MOV      r1,#0x11c
000772  2012              MOVS     r0,#0x12
000774  f7fffffe          BL       LCD_WR_CMD
;;;492            LCD_WR_CMD(0x00A4,0x0001);//NVM
000778  2101              MOVS     r1,#1
00077a  20a4              MOVS     r0,#0xa4
00077c  f7fffffe          BL       LCD_WR_CMD
;;;493        //
;;;494            LCD_WR_CMD(0x0008,0x000F);
000780  210f              MOVS     r1,#0xf
000782  2008              MOVS     r0,#8
000784  f7fffffe          BL       LCD_WR_CMD
;;;495            LCD_WR_CMD(0x000A,0x0008);
000788  2108              MOVS     r1,#8
00078a  200a              MOVS     r0,#0xa
00078c  f7fffffe          BL       LCD_WR_CMD
;;;496            LCD_WR_CMD(0x000D,0x0008);
000790  2108              MOVS     r1,#8
000792  200d              MOVS     r0,#0xd
000794  f7fffffe          BL       LCD_WR_CMD
;;;497           
;;;498      //GAMMA CONTROL/
;;;499            LCD_WR_CMD(0x0030,0x0707);
000798  f2407107          MOV      r1,#0x707
00079c  2030              MOVS     r0,#0x30
00079e  f7fffffe          BL       LCD_WR_CMD
;;;500            LCD_WR_CMD(0x0031,0x0007); //0x0707
0007a2  2107              MOVS     r1,#7
0007a4  2031              MOVS     r0,#0x31
0007a6  f7fffffe          BL       LCD_WR_CMD
;;;501            LCD_WR_CMD(0x0032,0x0603); 
0007aa  f2406103          MOV      r1,#0x603
0007ae  2032              MOVS     r0,#0x32
0007b0  f7fffffe          BL       LCD_WR_CMD
;;;502            LCD_WR_CMD(0x0033,0x0700); 
0007b4  f44f61e0          MOV      r1,#0x700
0007b8  2033              MOVS     r0,#0x33
0007ba  f7fffffe          BL       LCD_WR_CMD
;;;503            LCD_WR_CMD(0x0034,0x0202); 
0007be  f2402102          MOV      r1,#0x202
0007c2  2034              MOVS     r0,#0x34
0007c4  f7fffffe          BL       LCD_WR_CMD
;;;504            LCD_WR_CMD(0x0035,0x0002); //?0x0606
0007c8  2102              MOVS     r1,#2
0007ca  2035              MOVS     r0,#0x35
0007cc  f7fffffe          BL       LCD_WR_CMD
;;;505            LCD_WR_CMD(0x0036,0x1F0F);
0007d0  f641710f          MOV      r1,#0x1f0f
0007d4  2036              MOVS     r0,#0x36
0007d6  f7fffffe          BL       LCD_WR_CMD
;;;506            LCD_WR_CMD(0x0037,0x0707); //0x0f0f  0x0105
0007da  f2407107          MOV      r1,#0x707
0007de  2037              MOVS     r0,#0x37
0007e0  f7fffffe          BL       LCD_WR_CMD
;;;507            LCD_WR_CMD(0x0038,0x0000); 
0007e4  2100              MOVS     r1,#0
0007e6  2038              MOVS     r0,#0x38
0007e8  f7fffffe          BL       LCD_WR_CMD
;;;508            LCD_WR_CMD(0x0039,0x0000); 
0007ec  2100              MOVS     r1,#0
0007ee  2039              MOVS     r0,#0x39
0007f0  f7fffffe          BL       LCD_WR_CMD
;;;509            LCD_WR_CMD(0x003A,0x0707); 
0007f4  f2407107          MOV      r1,#0x707
0007f8  203a              MOVS     r0,#0x3a
0007fa  f7fffffe          BL       LCD_WR_CMD
;;;510            LCD_WR_CMD(0x003B,0x0000); //0x0303
0007fe  2100              MOVS     r1,#0
000800  203b              MOVS     r0,#0x3b
000802  f7fffffe          BL       LCD_WR_CMD
;;;511            LCD_WR_CMD(0x003C,0x0007); //?0x0707
000806  2107              MOVS     r1,#7
000808  203c              MOVS     r0,#0x3c
00080a  f7fffffe          BL       LCD_WR_CMD
;;;512            LCD_WR_CMD(0x003D,0x0000); //0x1313//0x1f08
00080e  2100              MOVS     r1,#0
000810  203d              MOVS     r0,#0x3d
000812  f7fffffe          BL       LCD_WR_CMD
;;;513    	    Delay(200);
000816  20c8              MOVS     r0,#0xc8
000818  f7fffffe          BL       Delay
;;;514            LCD_WR_CMD(0x0007,0x0001);
00081c  2101              MOVS     r1,#1
00081e  2007              MOVS     r0,#7
000820  f7fffffe          BL       LCD_WR_CMD
;;;515            LCD_WR_CMD(0x0017,0x0001);   //Power supply startup enable
000824  2101              MOVS     r1,#1
000826  e002              B        |L1.2094|
                  |L1.2088|
                          DCD      LCD_IDP
                  |L1.2092|
00082c  e0af              B        |L1.2446|
                  |L1.2094|
00082e  2017              MOVS     r0,#0x17
000830  f7fffffe          BL       LCD_WR_CMD
;;;516    	    Delay(200);
000834  20c8              MOVS     r0,#0xc8
000836  f7fffffe          BL       Delay
;;;517      
;;;518      //power control//
;;;519            LCD_WR_CMD(0x0010,0x17A0); 
00083a  f44f51bd          MOV      r1,#0x17a0
00083e  2010              MOVS     r0,#0x10
000840  f7fffffe          BL       LCD_WR_CMD
;;;520            LCD_WR_CMD(0x0011,0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
000844  f2402117          MOV      r1,#0x217
000848  2011              MOVS     r0,#0x11
00084a  f7fffffe          BL       LCD_WR_CMD
;;;521            LCD_WR_CMD(0x0012,0x011E);//0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
00084e  f44f718f          MOV      r1,#0x11e
000852  2012              MOVS     r0,#0x12
000854  f7fffffe          BL       LCD_WR_CMD
;;;522            LCD_WR_CMD(0x0013,0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
000858  f44f6170          MOV      r1,#0xf00
00085c  2013              MOVS     r0,#0x13
00085e  f7fffffe          BL       LCD_WR_CMD
;;;523            LCD_WR_CMD(0x002A,0x0000);  
000862  2100              MOVS     r1,#0
000864  202a              MOVS     r0,#0x2a
000866  f7fffffe          BL       LCD_WR_CMD
;;;524            LCD_WR_CMD(0x0029,0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
00086a  210a              MOVS     r1,#0xa
00086c  2029              MOVS     r0,#0x29
00086e  f7fffffe          BL       LCD_WR_CMD
;;;525            LCD_WR_CMD(0x0012,0x013E); // 0x013C  power supply on
000872  f44f719f          MOV      r1,#0x13e
000876  2012              MOVS     r0,#0x12
000878  f7fffffe          BL       LCD_WR_CMD
;;;526               //Coordinates Control//
;;;527            LCD_WR_CMD(0x0050,0x0000);//0x0e00
00087c  2100              MOVS     r1,#0
00087e  2050              MOVS     r0,#0x50
000880  f7fffffe          BL       LCD_WR_CMD
;;;528            LCD_WR_CMD(0x0051,0x00EF); 
000884  21ef              MOVS     r1,#0xef
000886  2051              MOVS     r0,#0x51
000888  f7fffffe          BL       LCD_WR_CMD
;;;529            LCD_WR_CMD(0x0052,0x0000); 
00088c  2100              MOVS     r1,#0
00088e  2052              MOVS     r0,#0x52
000890  f7fffffe          BL       LCD_WR_CMD
;;;530            LCD_WR_CMD(0x0053,0x013F); 
000894  f240113f          MOV      r1,#0x13f
000898  2053              MOVS     r0,#0x53
00089a  f7fffffe          BL       LCD_WR_CMD
;;;531        //Pannel Image Control//
;;;532            LCD_WR_CMD(0x0060,0x2700); 
00089e  f44f511c          MOV      r1,#0x2700
0008a2  2060              MOVS     r0,#0x60
0008a4  f7fffffe          BL       LCD_WR_CMD
;;;533            LCD_WR_CMD(0x0061,0x0001); 
0008a8  2101              MOVS     r1,#1
0008aa  2061              MOVS     r0,#0x61
0008ac  f7fffffe          BL       LCD_WR_CMD
;;;534            LCD_WR_CMD(0x006A,0x0000); 
0008b0  2100              MOVS     r1,#0
0008b2  206a              MOVS     r0,#0x6a
0008b4  f7fffffe          BL       LCD_WR_CMD
;;;535            LCD_WR_CMD(0x0080,0x0000); 
0008b8  2100              MOVS     r1,#0
0008ba  2080              MOVS     r0,#0x80
0008bc  f7fffffe          BL       LCD_WR_CMD
;;;536        //Partial Image Control//
;;;537            LCD_WR_CMD(0x0081,0x0000); 
0008c0  2100              MOVS     r1,#0
0008c2  2081              MOVS     r0,#0x81
0008c4  f7fffffe          BL       LCD_WR_CMD
;;;538            LCD_WR_CMD(0x0082,0x0000); 
0008c8  2100              MOVS     r1,#0
0008ca  2082              MOVS     r0,#0x82
0008cc  f7fffffe          BL       LCD_WR_CMD
;;;539            LCD_WR_CMD(0x0083,0x0000); 
0008d0  2100              MOVS     r1,#0
0008d2  2083              MOVS     r0,#0x83
0008d4  f7fffffe          BL       LCD_WR_CMD
;;;540            LCD_WR_CMD(0x0084,0x0000); 
0008d8  2100              MOVS     r1,#0
0008da  2084              MOVS     r0,#0x84
0008dc  f7fffffe          BL       LCD_WR_CMD
;;;541            LCD_WR_CMD(0x0085,0x0000); 
0008e0  2100              MOVS     r1,#0
0008e2  2085              MOVS     r0,#0x85
0008e4  f7fffffe          BL       LCD_WR_CMD
;;;542      //Panel Interface Control//
;;;543            LCD_WR_CMD(0x0090,0x0013); //0x0010 frenqucy
0008e8  2113              MOVS     r1,#0x13
0008ea  2090              MOVS     r0,#0x90
0008ec  f7fffffe          BL       LCD_WR_CMD
;;;544            LCD_WR_CMD(0x0092,0x0300); 
0008f0  f44f7140          MOV      r1,#0x300
0008f4  2092              MOVS     r0,#0x92
0008f6  f7fffffe          BL       LCD_WR_CMD
;;;545            LCD_WR_CMD(0x0093,0x0005); 
0008fa  2105              MOVS     r1,#5
0008fc  2093              MOVS     r0,#0x93
0008fe  f7fffffe          BL       LCD_WR_CMD
;;;546            LCD_WR_CMD(0x0095,0x0000); 
000902  2100              MOVS     r1,#0
000904  2095              MOVS     r0,#0x95
000906  f7fffffe          BL       LCD_WR_CMD
;;;547            LCD_WR_CMD(0x0097,0x0000); 
00090a  2100              MOVS     r1,#0
00090c  2097              MOVS     r0,#0x97
00090e  f7fffffe          BL       LCD_WR_CMD
;;;548            LCD_WR_CMD(0x0098,0x0000); 
000912  2100              MOVS     r1,#0
000914  2098              MOVS     r0,#0x98
000916  f7fffffe          BL       LCD_WR_CMD
;;;549      
;;;550            LCD_WR_CMD(0x0001,0x0100); 
00091a  f44f7180          MOV      r1,#0x100
00091e  2001              MOVS     r0,#1
000920  f7fffffe          BL       LCD_WR_CMD
;;;551            LCD_WR_CMD(0x0002,0x0700); 
000924  f44f61e0          MOV      r1,#0x700
000928  2002              MOVS     r0,#2
00092a  f7fffffe          BL       LCD_WR_CMD
;;;552            LCD_WR_CMD(0x0003,0x1030); 
00092e  f2410130          MOV      r1,#0x1030
000932  2003              MOVS     r0,#3
000934  f7fffffe          BL       LCD_WR_CMD
;;;553            LCD_WR_CMD(0x0004,0x0000); 
000938  2100              MOVS     r1,#0
00093a  2004              MOVS     r0,#4
00093c  f7fffffe          BL       LCD_WR_CMD
;;;554            LCD_WR_CMD(0x000C,0x0000); 
000940  2100              MOVS     r1,#0
000942  200c              MOVS     r0,#0xc
000944  f7fffffe          BL       LCD_WR_CMD
;;;555            LCD_WR_CMD(0x000F,0x0000); 
000948  2100              MOVS     r1,#0
00094a  200f              MOVS     r0,#0xf
00094c  f7fffffe          BL       LCD_WR_CMD
;;;556            LCD_WR_CMD(0x0020,0x0000); 
000950  2100              MOVS     r1,#0
000952  2020              MOVS     r0,#0x20
000954  f7fffffe          BL       LCD_WR_CMD
;;;557            LCD_WR_CMD(0x0021,0x0000); 
000958  2100              MOVS     r1,#0
00095a  2021              MOVS     r0,#0x21
00095c  f7fffffe          BL       LCD_WR_CMD
;;;558            LCD_WR_CMD(0x0007,0x0021); 
000960  2121              MOVS     r1,#0x21
000962  2007              MOVS     r0,#7
000964  f7fffffe          BL       LCD_WR_CMD
;;;559    	    Delay(200);
000968  20c8              MOVS     r0,#0xc8
00096a  f7fffffe          BL       Delay
;;;560            LCD_WR_CMD(0x0007,0x0061); 
00096e  2161              MOVS     r1,#0x61
000970  2007              MOVS     r0,#7
000972  f7fffffe          BL       LCD_WR_CMD
;;;561    	    Delay(200);
000976  20c8              MOVS     r0,#0xc8
000978  f7fffffe          BL       Delay
;;;562            LCD_WR_CMD(0x0007,0x0173); 
00097c  f2401173          MOV      r1,#0x173
000980  2007              MOVS     r0,#7
000982  f7fffffe          BL       LCD_WR_CMD
;;;563    	    Delay(200);
000986  20c8              MOVS     r0,#0xc8
000988  f7fffffe          BL       Delay
00098c  e136              B        |L1.3068|
                  |L1.2446|
;;;564    	}							 
;;;565    	else if(LCD_IDP==0x8989)
00098e  48ff              LDR      r0,|L1.3468|
000990  6800              LDR      r0,[r0,#0]  ; LCD_IDP
000992  f5a04109          SUB      r1,r0,#0x8900
000996  3989              SUBS     r1,r1,#0x89
000998  d17d              BNE      |L1.2710|
;;;566    	{
;;;567    	LCD_WR_CMD(0x0000,0x0001);    Delay(200);  //打开晶振
00099a  2101              MOVS     r1,#1
00099c  2000              MOVS     r0,#0
00099e  f7fffffe          BL       LCD_WR_CMD
0009a2  20c8              MOVS     r0,#0xc8
0009a4  f7fffffe          BL       Delay
;;;568        LCD_WR_CMD(0x0003,0xA8A4);    Delay(200);   //0xA8A4
0009a8  f64a01a4          MOV      r1,#0xa8a4
0009ac  2003              MOVS     r0,#3
0009ae  f7fffffe          BL       LCD_WR_CMD
0009b2  20c8              MOVS     r0,#0xc8
0009b4  f7fffffe          BL       Delay
;;;569        LCD_WR_CMD(0x000C,0x0000);    Delay(200);   
0009b8  2100              MOVS     r1,#0
0009ba  200c              MOVS     r0,#0xc
0009bc  f7fffffe          BL       LCD_WR_CMD
0009c0  20c8              MOVS     r0,#0xc8
0009c2  f7fffffe          BL       Delay
;;;570        LCD_WR_CMD(0x000D,0x080C);    Delay(200);   
0009c6  f640010c          MOV      r1,#0x80c
0009ca  200d              MOVS     r0,#0xd
0009cc  f7fffffe          BL       LCD_WR_CMD
0009d0  20c8              MOVS     r0,#0xc8
0009d2  f7fffffe          BL       Delay
;;;571        LCD_WR_CMD(0x000E,0x2B00);    Delay(200);   
0009d6  f44f512c          MOV      r1,#0x2b00
0009da  200e              MOVS     r0,#0xe
0009dc  f7fffffe          BL       LCD_WR_CMD
0009e0  20c8              MOVS     r0,#0xc8
0009e2  f7fffffe          BL       Delay
;;;572        LCD_WR_CMD(0x001E,0x00B0);    Delay(200);  
0009e6  21b0              MOVS     r1,#0xb0
0009e8  201e              MOVS     r0,#0x1e
0009ea  f7fffffe          BL       LCD_WR_CMD
0009ee  20c8              MOVS     r0,#0xc8
0009f0  f7fffffe          BL       Delay
;;;573        LCD_WR_CMD(0x0001,0x2B3F);    Delay(200);   //驱动输出控制320*240  0x6B3F
0009f4  f642313f          MOV      r1,#0x2b3f
0009f8  2001              MOVS     r0,#1
0009fa  f7fffffe          BL       LCD_WR_CMD
0009fe  20c8              MOVS     r0,#0xc8
000a00  f7fffffe          BL       Delay
;;;574        LCD_WR_CMD(0x0002,0x0600);    Delay(200);
000a04  f44f61c0          MOV      r1,#0x600
000a08  2002              MOVS     r0,#2
000a0a  f7fffffe          BL       LCD_WR_CMD
000a0e  20c8              MOVS     r0,#0xc8
000a10  f7fffffe          BL       Delay
;;;575        LCD_WR_CMD(0x0010,0x0000);    Delay(200);
000a14  2100              MOVS     r1,#0
000a16  2010              MOVS     r0,#0x10
000a18  f7fffffe          BL       LCD_WR_CMD
000a1c  20c8              MOVS     r0,#0xc8
000a1e  f7fffffe          BL       Delay
;;;576        LCD_WR_CMD(0x0011,0x6070);    Delay(200);        //0x4030           //定义数据格式  16位色 
000a22  f2460170          MOV      r1,#0x6070
000a26  2011              MOVS     r0,#0x11
000a28  f7fffffe          BL       LCD_WR_CMD
000a2c  20c8              MOVS     r0,#0xc8
000a2e  f7fffffe          BL       Delay
;;;577        LCD_WR_CMD(0x0005,0x0000);    Delay(200);
000a32  2100              MOVS     r1,#0
000a34  2005              MOVS     r0,#5
000a36  f7fffffe          BL       LCD_WR_CMD
000a3a  20c8              MOVS     r0,#0xc8
000a3c  f7fffffe          BL       Delay
;;;578        LCD_WR_CMD(0x0006,0x0000);    Delay(200);
000a40  2100              MOVS     r1,#0
000a42  2006              MOVS     r0,#6
000a44  f7fffffe          BL       LCD_WR_CMD
000a48  20c8              MOVS     r0,#0xc8
000a4a  f7fffffe          BL       Delay
;;;579        LCD_WR_CMD(0x0016,0xEF1C);    Delay(200);
000a4e  f64e711c          MOV      r1,#0xef1c
000a52  2016              MOVS     r0,#0x16
000a54  f7fffffe          BL       LCD_WR_CMD
000a58  20c8              MOVS     r0,#0xc8
000a5a  f7fffffe          BL       Delay
;;;580        LCD_WR_CMD(0x0017,0x0003);    Delay(200);
000a5e  2103              MOVS     r1,#3
000a60  2017              MOVS     r0,#0x17
000a62  f7fffffe          BL       LCD_WR_CMD
000a66  20c8              MOVS     r0,#0xc8
000a68  f7fffffe          BL       Delay
;;;581        LCD_WR_CMD(0x0007,0x0233);    Delay(200);        //0x0233       
000a6c  f2402133          MOV      r1,#0x233
000a70  2007              MOVS     r0,#7
000a72  f7fffffe          BL       LCD_WR_CMD
000a76  20c8              MOVS     r0,#0xc8
000a78  f7fffffe          BL       Delay
;;;582        LCD_WR_CMD(0x000B,0x0000);    Delay(200);
000a7c  2100              MOVS     r1,#0
000a7e  200b              MOVS     r0,#0xb
000a80  f7fffffe          BL       LCD_WR_CMD
000a84  20c8              MOVS     r0,#0xc8
000a86  f7fffffe          BL       Delay
;;;583        LCD_WR_CMD(0x000F,0x0000);    Delay(200);        //扫描开始地址
000a8a  2100              MOVS     r1,#0
000a8c  200f              MOVS     r0,#0xf
000a8e  f7fffffe          BL       LCD_WR_CMD
000a92  20c8              MOVS     r0,#0xc8
000a94  e000              B        |L1.2712|
                  |L1.2710|
000a96  e0b1              B        |L1.3068|
                  |L1.2712|
000a98  f7fffffe          BL       Delay
;;;584        LCD_WR_CMD(0x0041,0x0000);    Delay(200);
000a9c  2100              MOVS     r1,#0
000a9e  2041              MOVS     r0,#0x41
000aa0  f7fffffe          BL       LCD_WR_CMD
000aa4  20c8              MOVS     r0,#0xc8
000aa6  f7fffffe          BL       Delay
;;;585        LCD_WR_CMD(0x0042,0x0000);    Delay(200);
000aaa  2100              MOVS     r1,#0
000aac  2042              MOVS     r0,#0x42
000aae  f7fffffe          BL       LCD_WR_CMD
000ab2  20c8              MOVS     r0,#0xc8
000ab4  f7fffffe          BL       Delay
;;;586        LCD_WR_CMD(0x0048,0x0000);    Delay(200);
000ab8  2100              MOVS     r1,#0
000aba  2048              MOVS     r0,#0x48
000abc  f7fffffe          BL       LCD_WR_CMD
000ac0  20c8              MOVS     r0,#0xc8
000ac2  f7fffffe          BL       Delay
;;;587        LCD_WR_CMD(0x0049,0x013F);    Delay(200);
000ac6  f240113f          MOV      r1,#0x13f
000aca  2049              MOVS     r0,#0x49
000acc  f7fffffe          BL       LCD_WR_CMD
000ad0  20c8              MOVS     r0,#0xc8
000ad2  f7fffffe          BL       Delay
;;;588        LCD_WR_CMD(0x004A,0x0000);    Delay(200);
000ad6  2100              MOVS     r1,#0
000ad8  204a              MOVS     r0,#0x4a
000ada  f7fffffe          BL       LCD_WR_CMD
000ade  20c8              MOVS     r0,#0xc8
000ae0  f7fffffe          BL       Delay
;;;589        LCD_WR_CMD(0x004B,0x0000);    Delay(200);
000ae4  2100              MOVS     r1,#0
000ae6  204b              MOVS     r0,#0x4b
000ae8  f7fffffe          BL       LCD_WR_CMD
000aec  20c8              MOVS     r0,#0xc8
000aee  f7fffffe          BL       Delay
;;;590        LCD_WR_CMD(0x0044,0xEF00);   Delay(200);
000af2  f44f416f          MOV      r1,#0xef00
000af6  2044              MOVS     r0,#0x44
000af8  f7fffffe          BL       LCD_WR_CMD
000afc  20c8              MOVS     r0,#0xc8
000afe  f7fffffe          BL       Delay
;;;591        LCD_WR_CMD(0x0045,0x0000);    Delay(200);
000b02  2100              MOVS     r1,#0
000b04  2045              MOVS     r0,#0x45
000b06  f7fffffe          BL       LCD_WR_CMD
000b0a  20c8              MOVS     r0,#0xc8
000b0c  f7fffffe          BL       Delay
;;;592        LCD_WR_CMD(0x0046,0x013F);    Delay(200);
000b10  f240113f          MOV      r1,#0x13f
000b14  2046              MOVS     r0,#0x46
000b16  f7fffffe          BL       LCD_WR_CMD
000b1a  20c8              MOVS     r0,#0xc8
000b1c  f7fffffe          BL       Delay
;;;593        LCD_WR_CMD(0x0030,0x0707);    Delay(200);
000b20  f2407107          MOV      r1,#0x707
000b24  2030              MOVS     r0,#0x30
000b26  f7fffffe          BL       LCD_WR_CMD
000b2a  20c8              MOVS     r0,#0xc8
000b2c  f7fffffe          BL       Delay
;;;594        LCD_WR_CMD(0x0031,0x0204);    Delay(200);
000b30  f44f7101          MOV      r1,#0x204
000b34  2031              MOVS     r0,#0x31
000b36  f7fffffe          BL       LCD_WR_CMD
000b3a  20c8              MOVS     r0,#0xc8
000b3c  f7fffffe          BL       Delay
;;;595        LCD_WR_CMD(0x0032,0x0204);    Delay(200);
000b40  f44f7101          MOV      r1,#0x204
000b44  2032              MOVS     r0,#0x32
000b46  f7fffffe          BL       LCD_WR_CMD
000b4a  20c8              MOVS     r0,#0xc8
000b4c  f7fffffe          BL       Delay
;;;596        LCD_WR_CMD(0x0033,0x0502);    Delay(200);
000b50  f2405102          MOV      r1,#0x502
000b54  2033              MOVS     r0,#0x33
000b56  f7fffffe          BL       LCD_WR_CMD
000b5a  20c8              MOVS     r0,#0xc8
000b5c  f7fffffe          BL       Delay
;;;597        LCD_WR_CMD(0x0034,0x0507);    Delay(200);
000b60  f2405107          MOV      r1,#0x507
000b64  2034              MOVS     r0,#0x34
000b66  f7fffffe          BL       LCD_WR_CMD
000b6a  20c8              MOVS     r0,#0xc8
000b6c  f7fffffe          BL       Delay
;;;598        LCD_WR_CMD(0x0035,0x0204);    Delay(200);
000b70  f44f7101          MOV      r1,#0x204
000b74  2035              MOVS     r0,#0x35
000b76  f7fffffe          BL       LCD_WR_CMD
000b7a  20c8              MOVS     r0,#0xc8
000b7c  f7fffffe          BL       Delay
;;;599        LCD_WR_CMD(0x0036,0x0204);    Delay(200);
000b80  f44f7101          MOV      r1,#0x204
000b84  2036              MOVS     r0,#0x36
000b86  f7fffffe          BL       LCD_WR_CMD
000b8a  20c8              MOVS     r0,#0xc8
000b8c  f7fffffe          BL       Delay
;;;600        LCD_WR_CMD(0x0037,0x0502);   Delay(200);
000b90  f2405102          MOV      r1,#0x502
000b94  2037              MOVS     r0,#0x37
000b96  f7fffffe          BL       LCD_WR_CMD
000b9a  20c8              MOVS     r0,#0xc8
000b9c  f7fffffe          BL       Delay
;;;601        LCD_WR_CMD(0x003A,0x0302);    Delay(200);
000ba0  f2403102          MOV      r1,#0x302
000ba4  203a              MOVS     r0,#0x3a
000ba6  f7fffffe          BL       LCD_WR_CMD
000baa  20c8              MOVS     r0,#0xc8
000bac  f7fffffe          BL       Delay
;;;602        LCD_WR_CMD(0x003B,0x0302);    Delay(200);
000bb0  f2403102          MOV      r1,#0x302
000bb4  203b              MOVS     r0,#0x3b
000bb6  f7fffffe          BL       LCD_WR_CMD
000bba  20c8              MOVS     r0,#0xc8
000bbc  f7fffffe          BL       Delay
;;;603        LCD_WR_CMD(0x0023,0x0000);    Delay(200);
000bc0  2100              MOVS     r1,#0
000bc2  2023              MOVS     r0,#0x23
000bc4  f7fffffe          BL       LCD_WR_CMD
000bc8  20c8              MOVS     r0,#0xc8
000bca  f7fffffe          BL       Delay
;;;604        LCD_WR_CMD(0x0024,0x0000);    Delay(200);
000bce  2100              MOVS     r1,#0
000bd0  2024              MOVS     r0,#0x24
000bd2  f7fffffe          BL       LCD_WR_CMD
000bd6  20c8              MOVS     r0,#0xc8
000bd8  f7fffffe          BL       Delay
;;;605        LCD_WR_CMD(0x0025,0x8000);    Delay(200);
000bdc  f44f4100          MOV      r1,#0x8000
000be0  2025              MOVS     r0,#0x25
000be2  f7fffffe          BL       LCD_WR_CMD
000be6  20c8              MOVS     r0,#0xc8
000be8  f7fffffe          BL       Delay
;;;606        LCD_WR_CMD(0x004f,0);        //行首址0
000bec  2100              MOVS     r1,#0
000bee  204f              MOVS     r0,#0x4f
000bf0  f7fffffe          BL       LCD_WR_CMD
;;;607        LCD_WR_CMD(0x004e,0);        //列首址0
000bf4  2100              MOVS     r1,#0
000bf6  204e              MOVS     r0,#0x4e
000bf8  f7fffffe          BL       LCD_WR_CMD
                  |L1.3068|
;;;608    	}
;;;609    	    Delay(200);
000bfc  20c8              MOVS     r0,#0xc8
000bfe  f7fffffe          BL       Delay
;;;610    	color1=0;	
000c02  2000              MOVS     r0,#0
000c04  4962              LDR      r1,|L1.3472|
000c06  6008              STR      r0,[r1,#0]  ; color1
;;;611    	//while(1);					
;;;612    
;;;613    }
000c08  bd10              POP      {r4,pc}
;;;614    
                          ENDP

                  lcd_wr_pixel PROC
;;;617    //+++++++++++++++++++++++LCD写字符子程序
;;;618    void lcd_wr_pixel(unsigned int a, unsigned int b, unsigned int e)    
000c0a  b570              PUSH     {r4-r6,lr}
;;;619    // X， Y，颜色
;;;620    {
000c0c  4604              MOV      r4,r0
000c0e  460e              MOV      r6,r1
000c10  4615              MOV      r5,r2
;;;621    //	LCD_WR_CMD(0x02,a);
;;;622    //	LCD_WR_CMD(0x03,b);  
;;;623    //	LCD_WR_CMD(0x04,239);
;;;624    //	LCD_WR_CMD(0x05,319);		
;;;625    //	LCD_WR_REG(0x0E); 
;;;626    
;;;627    	LCD_WR_CMD(0x20, a);
000c12  4621              MOV      r1,r4
000c14  2020              MOVS     r0,#0x20
000c16  f7fffffe          BL       LCD_WR_CMD
;;;628        LCD_WR_CMD(0x21, b);
000c1a  4631              MOV      r1,r6
000c1c  2021              MOVS     r0,#0x21
000c1e  f7fffffe          BL       LCD_WR_CMD
;;;629    	LCD_WR_Data(e);
000c22  4628              MOV      r0,r5
000c24  f7fffffe          BL       LCD_WR_Data
;;;630    }
000c28  bd70              POP      {r4-r6,pc}
;;;631    
                          ENDP

                  TFT_CLEAR PROC
;;;632    void TFT_CLEAR(u8 x,u16 y,u8 len,u16 wid)	//清屏
000c2a  e92d43f0          PUSH     {r4-r9,lr}
;;;633    {                    
000c2e  4606              MOV      r6,r0
000c30  4689              MOV      r9,r1
000c32  4617              MOV      r7,r2
000c34  4698              MOV      r8,r3
;;;634    	u32 n,temp;
;;;635        
;;;636    	if(LCD_IDP==0x9325||LCD_IDP==0x9328||LCD_IDP==0x9320)    //条件编译
000c36  4855              LDR      r0,|L1.3468|
000c38  6800              LDR      r0,[r0,#0]  ; LCD_IDP
000c3a  f5a04113          SUB      r1,r0,#0x9300
000c3e  3925              SUBS     r1,r1,#0x25
000c40  d00b              BEQ      |L1.3162|
000c42  4852              LDR      r0,|L1.3468|
000c44  6800              LDR      r0,[r0,#0]  ; LCD_IDP
000c46  f5a04113          SUB      r1,r0,#0x9300
000c4a  3928              SUBS     r1,r1,#0x28
000c4c  d005              BEQ      |L1.3162|
000c4e  484f              LDR      r0,|L1.3468|
000c50  6800              LDR      r0,[r0,#0]  ; LCD_IDP
000c52  f5a04113          SUB      r1,r0,#0x9300
000c56  3920              SUBS     r1,r1,#0x20
000c58  d121              BNE      |L1.3230|
                  |L1.3162|
;;;637        {
;;;638    	LCD_WR_CMD(0x0050, x); // Horizontal GRAM Start Address
000c5a  4631              MOV      r1,r6
000c5c  2050              MOVS     r0,#0x50
000c5e  f7fffffe          BL       LCD_WR_CMD
;;;639    	LCD_WR_CMD(0x0051, x+len-1); // Horizontal GRAM End Address
000c62  19f0              ADDS     r0,r6,r7
000c64  1e41              SUBS     r1,r0,#1
000c66  2051              MOVS     r0,#0x51
000c68  f7fffffe          BL       LCD_WR_CMD
;;;640    	LCD_WR_CMD(0x0052, y); // Vertical GRAM Start Address
000c6c  4649              MOV      r1,r9
000c6e  2052              MOVS     r0,#0x52
000c70  f7fffffe          BL       LCD_WR_CMD
;;;641    	LCD_WR_CMD(0x0053, y+wid-1); // Vertical GRAM Start Address
000c74  eb090008          ADD      r0,r9,r8
000c78  1e41              SUBS     r1,r0,#1
000c7a  2053              MOVS     r0,#0x53
000c7c  f7fffffe          BL       LCD_WR_CMD
;;;642    	LCD_WR_REG(34);
000c80  2022              MOVS     r0,#0x22
000c82  f7fffffe          BL       LCD_WR_REG
;;;643    
;;;644    	temp=(u32)len*wid;    
000c86  fb07f508          MUL      r5,r7,r8
;;;645    	for(n=0;n<temp;n++)LCD_WR_Data(0xffff);//显示白色 
000c8a  2400              MOVS     r4,#0
000c8c  e004              B        |L1.3224|
                  |L1.3214|
000c8e  f64f70ff          MOV      r0,#0xffff
000c92  f7fffffe          BL       LCD_WR_Data
000c96  1c64              ADDS     r4,r4,#1
                  |L1.3224|
000c98  42ac              CMP      r4,r5
000c9a  d3f8              BCC      |L1.3214|
000c9c  e02a              B        |L1.3316|
                  |L1.3230|
;;;646    	}
;;;647    
;;;648        else if(LCD_IDP==0x8989)			//条件编译		  */
000c9e  483b              LDR      r0,|L1.3468|
000ca0  6800              LDR      r0,[r0,#0]  ; LCD_IDP
000ca2  f5a04109          SUB      r1,r0,#0x8900
000ca6  3989              SUBS     r1,r1,#0x89
000ca8  d124              BNE      |L1.3316|
;;;649    	{
;;;650    	   for(temp=y;temp<wid;temp++)
000caa  464d              MOV      r5,r9
000cac  e020              B        |L1.3312|
                  |L1.3246|
;;;651    	    {
;;;652    		   for(n=x;n<len;n++)
000cae  4634              MOV      r4,r6
000cb0  e01b              B        |L1.3306|
                  |L1.3250|
;;;653    		   {
;;;654    	        LCD_WR_CMD(0x0044,n+1);
000cb2  1c61              ADDS     r1,r4,#1
000cb4  2044              MOVS     r0,#0x44
000cb6  f7fffffe          BL       LCD_WR_CMD
;;;655               	LCD_WR_CMD(0x0045,temp);
000cba  4629              MOV      r1,r5
000cbc  2045              MOVS     r0,#0x45
000cbe  f7fffffe          BL       LCD_WR_CMD
;;;656               	LCD_WR_CMD(0x0046,temp+1);
000cc2  1c69              ADDS     r1,r5,#1
000cc4  2046              MOVS     r0,#0x46
000cc6  f7fffffe          BL       LCD_WR_CMD
;;;657               	LCD_WR_CMD(0x004e,n);
000cca  4621              MOV      r1,r4
000ccc  204e              MOVS     r0,#0x4e
000cce  f7fffffe          BL       LCD_WR_CMD
;;;658               	LCD_WR_CMD(0x004f,temp);
000cd2  4629              MOV      r1,r5
000cd4  204f              MOVS     r0,#0x4f
000cd6  f7fffffe          BL       LCD_WR_CMD
;;;659            	LCD_WR_REG(34);	 
000cda  2022              MOVS     r0,#0x22
000cdc  f7fffffe          BL       LCD_WR_REG
;;;660    	        LCD_WR_Data(0xffff);   
000ce0  f64f70ff          MOV      r0,#0xffff
000ce4  f7fffffe          BL       LCD_WR_Data
000ce8  1c64              ADDS     r4,r4,#1              ;652
                  |L1.3306|
000cea  42bc              CMP      r4,r7                 ;652
000cec  d3e1              BCC      |L1.3250|
000cee  1c6d              ADDS     r5,r5,#1              ;650
                  |L1.3312|
000cf0  4545              CMP      r5,r8                 ;650
000cf2  d3dc              BCC      |L1.3246|
                  |L1.3316|
;;;661    		   }
;;;662    		}
;;;663    	}
;;;664    }
000cf4  e8bd83f0          POP      {r4-r9,pc}
;;;665    
                          ENDP

                  TFT_DrawPoint PROC
;;;670    //POINT_COLOR:此点的颜色
;;;671    void TFT_DrawPoint(u8 x,u16 y)
000cf8  b530              PUSH     {r4,r5,lr}
;;;672    {
000cfa  4604              MOV      r4,r0
000cfc  460d              MOV      r5,r1
;;;673    
;;;674        if (LCD_IDP==0x9325||LCD_IDP==0x9328||LCD_IDP==0x9320)    //条件编译
000cfe  4823              LDR      r0,|L1.3468|
000d00  6800              LDR      r0,[r0,#0]  ; LCD_IDP
000d02  f5a04113          SUB      r1,r0,#0x9300
000d06  3925              SUBS     r1,r1,#0x25
000d08  d00b              BEQ      |L1.3362|
000d0a  4820              LDR      r0,|L1.3468|
000d0c  6800              LDR      r0,[r0,#0]  ; LCD_IDP
000d0e  f5a04113          SUB      r1,r0,#0x9300
000d12  3928              SUBS     r1,r1,#0x28
000d14  d005              BEQ      |L1.3362|
000d16  481d              LDR      r0,|L1.3468|
000d18  6800              LDR      r0,[r0,#0]  ; LCD_IDP
000d1a  f5a04113          SUB      r1,r0,#0x9300
000d1e  3920              SUBS     r1,r1,#0x20
000d20  d120              BNE      |L1.3428|
                  |L1.3362|
;;;675    	{
;;;676        LCD_WR_CMD(0x0050, x); // Horizontal GRAM Start Address
000d22  4621              MOV      r1,r4
000d24  2050              MOVS     r0,#0x50
000d26  f7fffffe          BL       LCD_WR_CMD
;;;677    	LCD_WR_CMD(0x0051, 0x00EF); // Horizontal GRAM End Address
000d2a  21ef              MOVS     r1,#0xef
000d2c  2051              MOVS     r0,#0x51
000d2e  f7fffffe          BL       LCD_WR_CMD
;;;678    	LCD_WR_CMD(0x0052, y); // Vertical GRAM Start Address
000d32  4629              MOV      r1,r5
000d34  2052              MOVS     r0,#0x52
000d36  f7fffffe          BL       LCD_WR_CMD
;;;679    	LCD_WR_CMD(0x0053, 0x013F); // Vertical GRAM Start Address
000d3a  f240113f          MOV      r1,#0x13f
000d3e  2053              MOVS     r0,#0x53
000d40  f7fffffe          BL       LCD_WR_CMD
;;;680    	LCD_WR_CMD(32, x); // Horizontal GRAM Start Address		
000d44  4621              MOV      r1,r4
000d46  2020              MOVS     r0,#0x20
000d48  f7fffffe          BL       LCD_WR_CMD
;;;681    	LCD_WR_CMD(33, y); // Vertical GRAM Start Address
000d4c  4629              MOV      r1,r5
000d4e  2021              MOVS     r0,#0x21
000d50  f7fffffe          BL       LCD_WR_CMD
;;;682    	LCD_WR_REG(34);
000d54  2022              MOVS     r0,#0x22
000d56  f7fffffe          BL       LCD_WR_REG
;;;683    	LCD_WR_Data(POINT_COLOR); 
000d5a  480e              LDR      r0,|L1.3476|
000d5c  8800              LDRH     r0,[r0,#0]  ; POINT_COLOR
000d5e  f7fffffe          BL       LCD_WR_Data
000d62  e027              B        |L1.3508|
                  |L1.3428|
;;;684    	}
;;;685        
;;;686    	
;;;687    	else if(LCD_IDP==0x8989)			//条件编译
000d64  4809              LDR      r0,|L1.3468|
000d66  6800              LDR      r0,[r0,#0]  ; LCD_IDP
000d68  f5a04109          SUB      r1,r0,#0x8900
000d6c  3989              SUBS     r1,r1,#0x89
000d6e  d121              BNE      |L1.3508|
;;;688    	{
;;;689    	LCD_WR_CMD(0x0044,x+1);
000d70  1c61              ADDS     r1,r4,#1
000d72  2044              MOVS     r0,#0x44
000d74  f7fffffe          BL       LCD_WR_CMD
;;;690    	LCD_WR_CMD(0x0045,y);
000d78  4629              MOV      r1,r5
000d7a  2045              MOVS     r0,#0x45
000d7c  f7fffffe          BL       LCD_WR_CMD
;;;691    	LCD_WR_CMD(0x0046,y+1);
000d80  1c69              ADDS     r1,r5,#1
000d82  2046              MOVS     r0,#0x46
000d84  f7fffffe          BL       LCD_WR_CMD
;;;692    	LCD_WR_CMD(0x004e,x);
000d88  4621              MOV      r1,r4
000d8a  e005              B        |L1.3480|
                  |L1.3468|
                          DCD      LCD_IDP
                  |L1.3472|
                          DCD      color1
                  |L1.3476|
                          DCD      POINT_COLOR
                  |L1.3480|
000d98  204e              MOVS     r0,#0x4e
000d9a  f7fffffe          BL       LCD_WR_CMD
;;;693    	LCD_WR_CMD(0x004f,y);
000d9e  4629              MOV      r1,r5
000da0  204f              MOVS     r0,#0x4f
000da2  f7fffffe          BL       LCD_WR_CMD
;;;694    	LCD_WR_REG(34);		
000da6  2022              MOVS     r0,#0x22
000da8  f7fffffe          BL       LCD_WR_REG
;;;695    	LCD_WR_Data(POINT_COLOR); 
000dac  48ab              LDR      r0,|L1.4188|
000dae  8800              LDRH     r0,[r0,#0]  ; POINT_COLOR
000db0  f7fffffe          BL       LCD_WR_Data
                  |L1.3508|
;;;696    	}
;;;697    } 
000db4  bd30              POP      {r4,r5,pc}
;;;698    //取绝对值函数
                          ENDP

                  abs PROC
;;;699    //位宽:32bit
;;;700    u32 abs(s32 res)
000db6  4601              MOV      r1,r0
;;;701    {
;;;702    	if(res<0)return -res;
000db8  2900              CMP      r1,#0
000dba  da01              BGE      |L1.3520|
000dbc  4248              RSBS     r0,r1,#0
                  |L1.3518|
;;;703    	else return res;
;;;704    }  
000dbe  4770              BX       lr
                  |L1.3520|
000dc0  4608              MOV      r0,r1                 ;703
000dc2  e7fc              B        |L1.3518|
;;;705     
                          ENDP

                  TFT_DrawLine PROC
;;;708    //x2,y2:终点坐标  
;;;709    void TFT_DrawLine(u8 x1, u16 y1, u8 x2, u16 y2)
000dc4  e92d47f0          PUSH     {r4-r10,lr}
;;;710    {
000dc8  4604              MOV      r4,r0
000dca  460d              MOV      r5,r1
000dcc  4616              MOV      r6,r2
000dce  461f              MOV      r7,r3
;;;711        u16 x, y, t;
;;;712    	if((x1==x2)&&(y1==y2))TFT_DrawPoint(x1, y1);
000dd0  42b4              CMP      r4,r6
000dd2  d106              BNE      |L1.3554|
000dd4  42bd              CMP      r5,r7
000dd6  d104              BNE      |L1.3554|
000dd8  4629              MOV      r1,r5
000dda  4620              MOV      r0,r4
000ddc  f7fffffe          BL       TFT_DrawPoint
000de0  e04c              B        |L1.3708|
                  |L1.3554|
;;;713    	else if(abs(y2-y1)>abs(x2-x1))//斜率大于1 
000de2  eba60004          SUB      r0,r6,r4
000de6  1b79              SUBS     r1,r7,r5
000de8  d401              BMI      |L1.3566|
000dea  460a              MOV      r2,r1
000dec  e000              B        |L1.3568|
                  |L1.3566|
000dee  424a              RSBS     r2,r1,#0
                  |L1.3568|
000df0  2800              CMP      r0,#0
000df2  db01              BLT      |L1.3576|
000df4  4603              MOV      r3,r0
000df6  e000              B        |L1.3578|
                  |L1.3576|
000df8  4243              RSBS     r3,r0,#0
                  |L1.3578|
000dfa  429a              CMP      r2,r3
000dfc  d91f              BLS      |L1.3646|
;;;714    	{
;;;715    		if(y1>y2) 
000dfe  42bd              CMP      r5,r7
000e00  dd05              BLE      |L1.3598|
;;;716    		{
;;;717    			t=y1;
000e02  46aa              MOV      r10,r5
;;;718    			y1=y2;
000e04  463d              MOV      r5,r7
;;;719    			y2=t; 
000e06  4657              MOV      r7,r10
;;;720    			t=x1;
000e08  46a2              MOV      r10,r4
;;;721    			x1=x2;
000e0a  4634              MOV      r4,r6
;;;722    			x2=t; 
000e0c  4656              MOV      r6,r10
                  |L1.3598|
;;;723    		}
;;;724    		for(y=y1;y<y2;y++)//以y轴为基准 
000e0e  46a9              MOV      r9,r5
000e10  e012              B        |L1.3640|
                  |L1.3602|
;;;725    		{
;;;726    			x=(u32)(y-y1)*(x2-x1)/(y2-y1)+x1;
000e12  eba90005          SUB      r0,r9,r5
000e16  1b31              SUBS     r1,r6,r4
000e18  4348              MULS     r0,r1,r0
000e1a  1b79              SUBS     r1,r7,r5
000e1c  fbb0f0f1          UDIV     r0,r0,r1
000e20  4420              ADD      r0,r0,r4
000e22  fa1ff880          UXTH     r8,r0
;;;727    			TFT_DrawPoint(x, y);  
000e26  4649              MOV      r1,r9
000e28  f00800ff          AND      r0,r8,#0xff
000e2c  f7fffffe          BL       TFT_DrawPoint
000e30  f1090001          ADD      r0,r9,#1              ;724
000e34  fa1ff980          UXTH     r9,r0                 ;724
                  |L1.3640|
000e38  45b9              CMP      r9,r7                 ;724
000e3a  dbea              BLT      |L1.3602|
000e3c  e01e              B        |L1.3708|
                  |L1.3646|
;;;728    		}
;;;729    	}
;;;730    	else     //斜率小于等于1 
;;;731    	{
;;;732    		if(x1>x2)
000e3e  42b4              CMP      r4,r6
000e40  dd05              BLE      |L1.3662|
;;;733    		{
;;;734    			t=y1;
000e42  46aa              MOV      r10,r5
;;;735    			y1=y2;
000e44  463d              MOV      r5,r7
;;;736    			y2=t;
000e46  4657              MOV      r7,r10
;;;737    			t=x1;
000e48  46a2              MOV      r10,r4
;;;738    			x1=x2;
000e4a  4634              MOV      r4,r6
;;;739    			x2=t;
000e4c  4656              MOV      r6,r10
                  |L1.3662|
;;;740    		}   
;;;741    		for(x=x1;x<x2;x++)//以x轴为基准 
000e4e  46a0              MOV      r8,r4
000e50  e012              B        |L1.3704|
                  |L1.3666|
;;;742    		{
;;;743    			y =(u32)(x-x1)*(y2-y1)/(x2-x1)+y1;
000e52  eba80004          SUB      r0,r8,r4
000e56  1b79              SUBS     r1,r7,r5
000e58  4348              MULS     r0,r1,r0
000e5a  1b31              SUBS     r1,r6,r4
000e5c  fbb0f0f1          UDIV     r0,r0,r1
000e60  4428              ADD      r0,r0,r5
000e62  fa1ff980          UXTH     r9,r0
;;;744    			TFT_DrawPoint(x,y); 
000e66  4649              MOV      r1,r9
000e68  f00800ff          AND      r0,r8,#0xff
000e6c  f7fffffe          BL       TFT_DrawPoint
000e70  f1080001          ADD      r0,r8,#1              ;741
000e74  fa1ff880          UXTH     r8,r0                 ;741
                  |L1.3704|
000e78  45b0              CMP      r8,r6                 ;741
000e7a  dbea              BLT      |L1.3666|
                  |L1.3708|
;;;745    		}
;;;746    	} 
;;;747    }
000e7c  e8bd87f0          POP      {r4-r10,pc}
;;;748    //6*12大小
                          ENDP

                  TFT_ShowChar PROC
;;;752    //num:要显示的字符:" "--->"~"
;;;753    void TFT_ShowChar(u8 x,u16 y,u8 num)
000e80  e92d43f0          PUSH     {r4-r9,lr}
;;;754    {       
000e84  4604              MOV      r4,r0
000e86  460d              MOV      r5,r1
000e88  4617              MOV      r7,r2
;;;755    #define MAX_CHAR_POSX 232
;;;756    #define MAX_CHAR_POSY 304 
;;;757        u8 temp;
;;;758        u8 pos,t;      
;;;759        if(x>MAX_CHAR_POSX||y>MAX_CHAR_POSY)return;
000e8a  2ce8              CMP      r4,#0xe8
000e8c  dc02              BGT      |L1.3732|
000e8e  f5b57f98          CMP      r5,#0x130
000e92  dd01              BLE      |L1.3736|
                  |L1.3732|
;;;760        //设定一个字符所占的大小 
;;;761        //开辟空间
;;;762    	  
;;;763        if (LCD_IDP==0x9325||LCD_IDP==0x9328||LCD_IDP==0x9320)    //条件编译
;;;764    	{
;;;765    	LCD_WR_CMD(0x0050, x); // Horizontal GRAM Start Address
;;;766    	LCD_WR_CMD(0x0051, x+5); // Horizontal GRAM End Address
;;;767    	LCD_WR_CMD(0x0052, y); // Vertical GRAM Start Address
;;;768    	LCD_WR_CMD(0x0053, y+11); // Vertical GRAM Start Address	 
;;;769    	LCD_WR_CMD(32, x);
;;;770        LCD_WR_CMD(33, y);	// 
;;;771    	LCD_WR_REG(34);
;;;772       	}
;;;773       
;;;774       
;;;775    	else if(LCD_IDP==0x8989)			//条件编译
;;;776       {
;;;777       		LCD_WR_CMD(0x0044,(x+5<<8)+x);
;;;778    	LCD_WR_CMD(0x0045,y);
;;;779    	LCD_WR_CMD(0x0046,y+11);
;;;780    	LCD_WR_CMD(0x004e,x);
;;;781    	LCD_WR_CMD(0x004f,y);
;;;782        LCD_WR_REG(34);	     	  	 
;;;783    
;;;784       
;;;785     //  LCD_SetPos(x,x+5,y,y+11);//320x240
;;;786       }
;;;787    	
;;;788    	num=num-' ';//得到偏移后的值
;;;789    	for(pos=0;pos<12;pos++)
;;;790    	{
;;;791    	    temp=asc2_1206[num][pos];
;;;792    	    for(t=0;t<6;t++)
;;;793    	    {                 
;;;794    	        if(temp&0x01)LCD_WR_Data(POINT_COLOR);
;;;795    	        else LCD_WR_Data(0xffff);//白色    
;;;796    	        temp>>=1; 
;;;797    	    }
;;;798    	}
;;;799    }  	 
000e94  e8bd83f0          POP      {r4-r9,pc}
                  |L1.3736|
000e98  4871              LDR      r0,|L1.4192|
000e9a  6800              LDR      r0,[r0,#0]            ;763  ; LCD_IDP
000e9c  f5a04113          SUB      r1,r0,#0x9300         ;763
000ea0  3925              SUBS     r1,r1,#0x25           ;763
000ea2  d00b              BEQ      |L1.3772|
000ea4  486e              LDR      r0,|L1.4192|
000ea6  6800              LDR      r0,[r0,#0]            ;763  ; LCD_IDP
000ea8  f5a04113          SUB      r1,r0,#0x9300         ;763
000eac  3928              SUBS     r1,r1,#0x28           ;763
000eae  d005              BEQ      |L1.3772|
000eb0  486b              LDR      r0,|L1.4192|
000eb2  6800              LDR      r0,[r0,#0]            ;763  ; LCD_IDP
000eb4  f5a04113          SUB      r1,r0,#0x9300         ;763
000eb8  3920              SUBS     r1,r1,#0x20           ;763
000eba  d11c              BNE      |L1.3830|
                  |L1.3772|
000ebc  4621              MOV      r1,r4                 ;765
000ebe  2050              MOVS     r0,#0x50              ;765
000ec0  f7fffffe          BL       LCD_WR_CMD
000ec4  1d61              ADDS     r1,r4,#5              ;766
000ec6  2051              MOVS     r0,#0x51              ;766
000ec8  f7fffffe          BL       LCD_WR_CMD
000ecc  4629              MOV      r1,r5                 ;767
000ece  2052              MOVS     r0,#0x52              ;767
000ed0  f7fffffe          BL       LCD_WR_CMD
000ed4  f105010b          ADD      r1,r5,#0xb            ;768
000ed8  2053              MOVS     r0,#0x53              ;768
000eda  f7fffffe          BL       LCD_WR_CMD
000ede  4621              MOV      r1,r4                 ;769
000ee0  2020              MOVS     r0,#0x20              ;769
000ee2  f7fffffe          BL       LCD_WR_CMD
000ee6  4629              MOV      r1,r5                 ;770
000ee8  2021              MOVS     r0,#0x21              ;770
000eea  f7fffffe          BL       LCD_WR_CMD
000eee  2022              MOVS     r0,#0x22              ;771
000ef0  f7fffffe          BL       LCD_WR_REG
000ef4  e01f              B        |L1.3894|
                  |L1.3830|
000ef6  485a              LDR      r0,|L1.4192|
000ef8  6800              LDR      r0,[r0,#0]            ;775  ; LCD_IDP
000efa  f5a04109          SUB      r1,r0,#0x8900         ;775
000efe  3989              SUBS     r1,r1,#0x89           ;775
000f00  d119              BNE      |L1.3894|
000f02  1d60              ADDS     r0,r4,#5              ;777
000f04  eb042100          ADD      r1,r4,r0,LSL #8       ;777
000f08  2044              MOVS     r0,#0x44              ;777
000f0a  f7fffffe          BL       LCD_WR_CMD
000f0e  4629              MOV      r1,r5                 ;778
000f10  2045              MOVS     r0,#0x45              ;778
000f12  f7fffffe          BL       LCD_WR_CMD
000f16  f105010b          ADD      r1,r5,#0xb            ;779
000f1a  2046              MOVS     r0,#0x46              ;779
000f1c  f7fffffe          BL       LCD_WR_CMD
000f20  4621              MOV      r1,r4                 ;780
000f22  204e              MOVS     r0,#0x4e              ;780
000f24  f7fffffe          BL       LCD_WR_CMD
000f28  4629              MOV      r1,r5                 ;781
000f2a  204f              MOVS     r0,#0x4f              ;781
000f2c  f7fffffe          BL       LCD_WR_CMD
000f30  2022              MOVS     r0,#0x22              ;782
000f32  f7fffffe          BL       LCD_WR_REG
                  |L1.3894|
000f36  f1a70020          SUB      r0,r7,#0x20           ;788
000f3a  b2c7              UXTB     r7,r0                 ;788
000f3c  2600              MOVS     r6,#0                 ;789
000f3e  e020              B        |L1.3970|
                  |L1.3904|
000f40  eb070047          ADD      r0,r7,r7,LSL #1       ;791
000f44  4947              LDR      r1,|L1.4196|
000f46  eb010080          ADD      r0,r1,r0,LSL #2       ;791
000f4a  f8108006          LDRB     r8,[r0,r6]            ;791
000f4e  f04f0900          MOV      r9,#0                 ;792
000f52  e011              B        |L1.3960|
                  |L1.3924|
000f54  f0180f01          TST      r8,#1                 ;794
000f58  d004              BEQ      |L1.3940|
000f5a  4840              LDR      r0,|L1.4188|
000f5c  8800              LDRH     r0,[r0,#0]            ;794  ; POINT_COLOR
000f5e  f7fffffe          BL       LCD_WR_Data
000f62  e003              B        |L1.3948|
                  |L1.3940|
000f64  f64f70ff          MOV      r0,#0xffff            ;795
000f68  f7fffffe          BL       LCD_WR_Data
                  |L1.3948|
000f6c  ea4f0868          ASR      r8,r8,#1              ;796
000f70  f1090001          ADD      r0,r9,#1              ;792
000f74  f00009ff          AND      r9,r0,#0xff           ;792
                  |L1.3960|
000f78  f1b90f06          CMP      r9,#6                 ;792
000f7c  dbea              BLT      |L1.3924|
000f7e  1c70              ADDS     r0,r6,#1              ;789
000f80  b2c6              UXTB     r6,r0                 ;789
                  |L1.3970|
000f82  2e0c              CMP      r6,#0xc               ;789
000f84  dbdc              BLT      |L1.3904|
000f86  bf00              NOP      
000f88  e784              B        |L1.3732|
;;;800    //m^n函数
                          ENDP

                  mypow PROC
;;;801    u32 mypow(u8 m,u8 n)
000f8a  b510              PUSH     {r4,lr}
;;;802    {
000f8c  4602              MOV      r2,r0
;;;803    	u32 result=1;	 
000f8e  2001              MOVS     r0,#1
;;;804    	while(n--)result*=m;    
000f90  e000              B        |L1.3988|
                  |L1.3986|
000f92  4350              MULS     r0,r2,r0
                  |L1.3988|
000f94  000b              MOVS     r3,r1
000f96  f1a10401          SUB      r4,r1,#1
000f9a  b2e1              UXTB     r1,r4
000f9c  d1f9              BNE      |L1.3986|
;;;805    	return result;
;;;806    }
000f9e  bd10              POP      {r4,pc}
;;;807    //显示一个数字
                          ENDP

                  TFT_ShowNum PROC
;;;809    //num:数值(0~65536); 
;;;810    void TFT_ShowNum(u8 x,u16 y,u32 num)
000fa0  e92d47f0          PUSH     {r4-r10,lr}
;;;811    {      
000fa4  4607              MOV      r7,r0
000fa6  4688              MOV      r8,r1
000fa8  4615              MOV      r5,r2
;;;812    	u32 res;   	   
;;;813    	u8 t=0,t1=0;   
000faa  2400              MOVS     r4,#0
000fac  46a1              MOV      r9,r4
;;;814    	res=num;
000fae  462e              MOV      r6,r5
;;;815    	if(!num)TFT_ShowChar(x,y,'0');//显示0
000fb0  b925              CBNZ     r5,|L1.4028|
000fb2  2230              MOVS     r2,#0x30
000fb4  4641              MOV      r1,r8
000fb6  4638              MOV      r0,r7
000fb8  f7fffffe          BL       TFT_ShowChar
                  |L1.4028|
;;;816    	while(res)  //得到数字长度
000fbc  e004              B        |L1.4040|
                  |L1.4030|
;;;817    	{
;;;818    		res/=10;
000fbe  200a              MOVS     r0,#0xa
000fc0  fbb6f6f0          UDIV     r6,r6,r0
;;;819    		t++;
000fc4  1c60              ADDS     r0,r4,#1
000fc6  b2c4              UXTB     r4,r0
                  |L1.4040|
000fc8  2e00              CMP      r6,#0                 ;816
000fca  d1f8              BNE      |L1.4030|
;;;820    	}
;;;821    	t1=t;
000fcc  46a1              MOV      r9,r4
;;;822    	while(t)	//显示数字
000fce  e01c              B        |L1.4106|
                  |L1.4048|
;;;823    	{
;;;824    		res=mypow(10,t-1); 	 
000fd0  1e60              SUBS     r0,r4,#1
000fd2  b2c1              UXTB     r1,r0
000fd4  200a              MOVS     r0,#0xa
000fd6  f7fffffe          BL       mypow
000fda  4606              MOV      r6,r0
;;;825    	    TFT_ShowChar(x+(t1-t)*6,y,(num/res)%10+'0');
000fdc  fbb5f0f6          UDIV     r0,r5,r6
000fe0  210a              MOVS     r1,#0xa
000fe2  fbb0f2f1          UDIV     r2,r0,r1
000fe6  fb010012          MLS      r0,r1,r2,r0
000fea  3030              ADDS     r0,r0,#0x30
000fec  f0000aff          AND      r10,r0,#0xff
000ff0  eba90104          SUB      r1,r9,r4
000ff4  eb010141          ADD      r1,r1,r1,LSL #1
000ff8  eb070141          ADD      r1,r7,r1,LSL #1
000ffc  b2c8              UXTB     r0,r1
000ffe  4652              MOV      r2,r10
001000  4641              MOV      r1,r8
001002  f7fffffe          BL       TFT_ShowChar
;;;826    		t--;
001006  1e60              SUBS     r0,r4,#1
001008  b2c4              UXTB     r4,r0
                  |L1.4106|
00100a  2c00              CMP      r4,#0                 ;822
00100c  d1e0              BNE      |L1.4048|
;;;827    	}				     
;;;828    } 
00100e  e8bd87f0          POP      {r4-r10,pc}
;;;829    //显示字符串
                          ENDP

                  TFT_ShowString PROC
;;;831    //*p:字符串起始地址
;;;832    void TFT_ShowString(u8 x,u16 y,const u8 *p)
001012  b570              PUSH     {r4-r6,lr}
;;;833    {         
001014  4605              MOV      r5,r0
001016  460e              MOV      r6,r1
001018  4614              MOV      r4,r2
;;;834        while(*p!='\0')
00101a  e01a              B        |L1.4178|
                  |L1.4124|
;;;835        {       
;;;836            if(x>MAX_CHAR_POSX){x=0;y+=12;}
00101c  2de8              CMP      r5,#0xe8
00101e  dd03              BLE      |L1.4136|
001020  2500              MOVS     r5,#0
001022  f106000c          ADD      r0,r6,#0xc
001026  b286              UXTH     r6,r0
                  |L1.4136|
;;;837            if(y>MAX_CHAR_POSY){y=x=0;TFT_CLEAR(0,0,240,320);}
001028  f5b67f98          CMP      r6,#0x130
00102c  dd09              BLE      |L1.4162|
00102e  2000              MOVS     r0,#0
001030  4605              MOV      r5,r0
001032  4606              MOV      r6,r0
001034  f44f73a0          MOV      r3,#0x140
001038  22f0              MOVS     r2,#0xf0
00103a  2100              MOVS     r1,#0
00103c  4608              MOV      r0,r1
00103e  f7fffffe          BL       TFT_CLEAR
                  |L1.4162|
;;;838            TFT_ShowChar(x,y,*p);
001042  7822              LDRB     r2,[r4,#0]
001044  4631              MOV      r1,r6
001046  4628              MOV      r0,r5
001048  f7fffffe          BL       TFT_ShowChar
;;;839            x+=6;
00104c  1da8              ADDS     r0,r5,#6
00104e  b2c5              UXTB     r5,r0
;;;840            p++;
001050  1c64              ADDS     r4,r4,#1
                  |L1.4178|
001052  7820              LDRB     r0,[r4,#0]            ;834
001054  2800              CMP      r0,#0                 ;834
001056  d1e1              BNE      |L1.4124|
;;;841        }  
;;;842    }
001058  bd70              POP      {r4-r6,pc}
;;;843     /*
                          ENDP

00105a  0000              DCW      0x0000
                  |L1.4188|
                          DCD      POINT_COLOR
                  |L1.4192|
                          DCD      LCD_IDP
                  |L1.4196|
                          DCD      asc2_1206

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  asc2_1206
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  00000404          DCB      0x00,0x00,0x04,0x04
000010  04040404          DCB      0x04,0x04,0x04,0x04
000014  00040000          DCB      0x00,0x04,0x00,0x00
000018  00140a0a          DCB      0x00,0x14,0x0a,0x0a
00001c  00000000          DCB      0x00,0x00,0x00,0x00
000020  00000000          DCB      0x00,0x00,0x00,0x00
000024  00001414          DCB      0x00,0x00,0x14,0x14
000028  3f140a3f          DCB      0x3f,0x14,0x0a,0x3f
00002c  0a0a0000          DCB      0x0a,0x0a,0x00,0x00
000030  00041e15          DCB      0x00,0x04,0x1e,0x15
000034  05060c14          DCB      0x05,0x06,0x0c,0x14
000038  150f0400          DCB      0x15,0x0f,0x04,0x00
00003c  00001215          DCB      0x00,0x00,0x12,0x15
000040  0d0a142c          DCB      0x0d,0x0a,0x14,0x2c
000044  2a120000          DCB      0x2a,0x12,0x00,0x00
000048  0000040a          DCB      0x00,0x00,0x04,0x0a
00004c  0a1e1515          DCB      0x0a,0x1e,0x15,0x15
000050  09360000          DCB      0x09,0x36,0x00,0x00
000054  00020201          DCB      0x00,0x02,0x02,0x01
000058  00000000          DCB      0x00,0x00,0x00,0x00
00005c  00000000          DCB      0x00,0x00,0x00,0x00
000060  00201008          DCB      0x00,0x20,0x10,0x08
000064  08080808          DCB      0x08,0x08,0x08,0x08
000068  08102000          DCB      0x08,0x10,0x20,0x00
00006c  00020408          DCB      0x00,0x02,0x04,0x08
000070  08080808          DCB      0x08,0x08,0x08,0x08
000074  08040200          DCB      0x08,0x04,0x02,0x00
000078  00000004          DCB      0x00,0x00,0x00,0x04
00007c  150e0e15          DCB      0x15,0x0e,0x0e,0x15
000080  04000000          DCB      0x04,0x00,0x00,0x00
000084  00000404          DCB      0x00,0x00,0x04,0x04
000088  041f0404          DCB      0x04,0x1f,0x04,0x04
00008c  04000000          DCB      0x04,0x00,0x00,0x00
000090  00000000          DCB      0x00,0x00,0x00,0x00
000094  00000000          DCB      0x00,0x00,0x00,0x00
000098  00020201          DCB      0x00,0x02,0x02,0x01
00009c  00000000          DCB      0x00,0x00,0x00,0x00
0000a0  001f0000          DCB      0x00,0x1f,0x00,0x00
0000a4  00000000          DCB      0x00,0x00,0x00,0x00
0000a8  00000000          DCB      0x00,0x00,0x00,0x00
0000ac  00000000          DCB      0x00,0x00,0x00,0x00
0000b0  00020000          DCB      0x00,0x02,0x00,0x00
0000b4  00100808          DCB      0x00,0x10,0x08,0x08
0000b8  08040402          DCB      0x08,0x04,0x04,0x02
0000bc  02020100          DCB      0x02,0x02,0x01,0x00
0000c0  00000e11          DCB      0x00,0x00,0x0e,0x11
0000c4  11111111          DCB      0x11,0x11,0x11,0x11
0000c8  110e0000          DCB      0x11,0x0e,0x00,0x00
0000cc  00000406          DCB      0x00,0x00,0x04,0x06
0000d0  04040404          DCB      0x04,0x04,0x04,0x04
0000d4  040e0000          DCB      0x04,0x0e,0x00,0x00
0000d8  00000e11          DCB      0x00,0x00,0x0e,0x11
0000dc  11080402          DCB      0x11,0x08,0x04,0x02
0000e0  011f0000          DCB      0x01,0x1f,0x00,0x00
0000e4  00000e11          DCB      0x00,0x00,0x0e,0x11
0000e8  100c1010          DCB      0x10,0x0c,0x10,0x10
0000ec  110e0000          DCB      0x11,0x0e,0x00,0x00
0000f0  0000080c          DCB      0x00,0x00,0x08,0x0c
0000f4  0a0a091e          DCB      0x0a,0x0a,0x09,0x1e
0000f8  08180000          DCB      0x08,0x18,0x00,0x00
0000fc  00001f01          DCB      0x00,0x00,0x1f,0x01
000100  010f1010          DCB      0x01,0x0f,0x10,0x10
000104  110e0000          DCB      0x11,0x0e,0x00,0x00
000108  00000e09          DCB      0x00,0x00,0x0e,0x09
00010c  010f1111          DCB      0x01,0x0f,0x11,0x11
000110  110e0000          DCB      0x11,0x0e,0x00,0x00
000114  00001f09          DCB      0x00,0x00,0x1f,0x09
000118  08040404          DCB      0x08,0x04,0x04,0x04
00011c  04040000          DCB      0x04,0x04,0x00,0x00
000120  00000e11          DCB      0x00,0x00,0x0e,0x11
000124  110e1111          DCB      0x11,0x0e,0x11,0x11
000128  110e0000          DCB      0x11,0x0e,0x00,0x00
00012c  00000e11          DCB      0x00,0x00,0x0e,0x11
000130  11111e10          DCB      0x11,0x11,0x1e,0x10
000134  120e0000          DCB      0x12,0x0e,0x00,0x00
000138  00000000          DCB      0x00,0x00,0x00,0x00
00013c  04000000          DCB      0x04,0x00,0x00,0x00
000140  00040000          DCB      0x00,0x04,0x00,0x00
000144  00000000          DCB      0x00,0x00,0x00,0x00
000148  00040000          DCB      0x00,0x04,0x00,0x00
00014c  00040400          DCB      0x00,0x04,0x04,0x00
000150  00201008          DCB      0x00,0x20,0x10,0x08
000154  04020408          DCB      0x04,0x02,0x04,0x08
000158  10200000          DCB      0x10,0x20,0x00,0x00
00015c  00000000          DCB      0x00,0x00,0x00,0x00
000160  1f00001f          DCB      0x1f,0x00,0x00,0x1f
000164  00000000          DCB      0x00,0x00,0x00,0x00
000168  00020408          DCB      0x00,0x02,0x04,0x08
00016c  10201008          DCB      0x10,0x20,0x10,0x08
000170  04020000          DCB      0x04,0x02,0x00,0x00
000174  00000e11          DCB      0x00,0x00,0x0e,0x11
000178  11080404          DCB      0x11,0x08,0x04,0x04
00017c  00040000          DCB      0x00,0x04,0x00,0x00
000180  00000e11          DCB      0x00,0x00,0x0e,0x11
000184  1915151d          DCB      0x19,0x15,0x15,0x1d
000188  011e0000          DCB      0x01,0x1e,0x00,0x00
00018c  00000404          DCB      0x00,0x00,0x04,0x04
000190  0c0a0a1e          DCB      0x0c,0x0a,0x0a,0x1e
000194  12330000          DCB      0x12,0x33,0x00,0x00
000198  00000f12          DCB      0x00,0x00,0x0f,0x12
00019c  120e1212          DCB      0x12,0x0e,0x12,0x12
0001a0  120f0000          DCB      0x12,0x0f,0x00,0x00
0001a4  00001e11          DCB      0x00,0x00,0x1e,0x11
0001a8  01010101          DCB      0x01,0x01,0x01,0x01
0001ac  110e0000          DCB      0x11,0x0e,0x00,0x00
0001b0  00000f12          DCB      0x00,0x00,0x0f,0x12
0001b4  12121212          DCB      0x12,0x12,0x12,0x12
0001b8  120f0000          DCB      0x12,0x0f,0x00,0x00
0001bc  00001f12          DCB      0x00,0x00,0x1f,0x12
0001c0  0a0e0a02          DCB      0x0a,0x0e,0x0a,0x02
0001c4  121f0000          DCB      0x12,0x1f,0x00,0x00
0001c8  00001f12          DCB      0x00,0x00,0x1f,0x12
0001cc  0a0e0a02          DCB      0x0a,0x0e,0x0a,0x02
0001d0  02070000          DCB      0x02,0x07,0x00,0x00
0001d4  00001c12          DCB      0x00,0x00,0x1c,0x12
0001d8  01013911          DCB      0x01,0x01,0x39,0x11
0001dc  120c0000          DCB      0x12,0x0c,0x00,0x00
0001e0  00003312          DCB      0x00,0x00,0x33,0x12
0001e4  121e1212          DCB      0x12,0x1e,0x12,0x12
0001e8  12330000          DCB      0x12,0x33,0x00,0x00
0001ec  00001f04          DCB      0x00,0x00,0x1f,0x04
0001f0  04040404          DCB      0x04,0x04,0x04,0x04
0001f4  041f0000          DCB      0x04,0x1f,0x00,0x00
0001f8  00003e08          DCB      0x00,0x00,0x3e,0x08
0001fc  08080808          DCB      0x08,0x08,0x08,0x08
000200  08090700          DCB      0x08,0x09,0x07,0x00
000204  00003712          DCB      0x00,0x00,0x37,0x12
000208  0a060a0a          DCB      0x0a,0x06,0x0a,0x0a
00020c  12370000          DCB      0x12,0x37,0x00,0x00
000210  00000702          DCB      0x00,0x00,0x07,0x02
000214  02020202          DCB      0x02,0x02,0x02,0x02
000218  223f0000          DCB      0x22,0x3f,0x00,0x00
00021c  00001b1b          DCB      0x00,0x00,0x1b,0x1b
000220  1b1b1515          DCB      0x1b,0x1b,0x15,0x15
000224  15150000          DCB      0x15,0x15,0x00,0x00
000228  00003b12          DCB      0x00,0x00,0x3b,0x12
00022c  16161a1a          DCB      0x16,0x16,0x1a,0x1a
000230  12170000          DCB      0x12,0x17,0x00,0x00
000234  00000e11          DCB      0x00,0x00,0x0e,0x11
000238  11111111          DCB      0x11,0x11,0x11,0x11
00023c  110e0000          DCB      0x11,0x0e,0x00,0x00
000240  00000f12          DCB      0x00,0x00,0x0f,0x12
000244  120e0202          DCB      0x12,0x0e,0x02,0x02
000248  02070000          DCB      0x02,0x07,0x00,0x00
00024c  00000e11          DCB      0x00,0x00,0x0e,0x11
000250  11111117          DCB      0x11,0x11,0x11,0x17
000254  190e1800          DCB      0x19,0x0e,0x18,0x00
000258  00000f12          DCB      0x00,0x00,0x0f,0x12
00025c  120e0a12          DCB      0x12,0x0e,0x0a,0x12
000260  12370000          DCB      0x12,0x37,0x00,0x00
000264  00001e11          DCB      0x00,0x00,0x1e,0x11
000268  01060810          DCB      0x01,0x06,0x08,0x10
00026c  110f0000          DCB      0x11,0x0f,0x00,0x00
000270  00001f15          DCB      0x00,0x00,0x1f,0x15
000274  04040404          DCB      0x04,0x04,0x04,0x04
000278  040e0000          DCB      0x04,0x0e,0x00,0x00
00027c  00003312          DCB      0x00,0x00,0x33,0x12
000280  12121212          DCB      0x12,0x12,0x12,0x12
000284  120c0000          DCB      0x12,0x0c,0x00,0x00
000288  00003312          DCB      0x00,0x00,0x33,0x12
00028c  120a0a0c          DCB      0x12,0x0a,0x0a,0x0c
000290  04040000          DCB      0x04,0x04,0x00,0x00
000294  00001515          DCB      0x00,0x00,0x15,0x15
000298  150e0a0a          DCB      0x15,0x0e,0x0a,0x0a
00029c  0a0a0000          DCB      0x0a,0x0a,0x00,0x00
0002a0  00001b0a          DCB      0x00,0x00,0x1b,0x0a
0002a4  0a04040a          DCB      0x0a,0x04,0x04,0x0a
0002a8  0a1b0000          DCB      0x0a,0x1b,0x00,0x00
0002ac  00001b0a          DCB      0x00,0x00,0x1b,0x0a
0002b0  0a040404          DCB      0x0a,0x04,0x04,0x04
0002b4  040e0000          DCB      0x04,0x0e,0x00,0x00
0002b8  00001f09          DCB      0x00,0x00,0x1f,0x09
0002bc  08040402          DCB      0x08,0x04,0x04,0x02
0002c0  121f0000          DCB      0x12,0x1f,0x00,0x00
0002c4  001c0404          DCB      0x00,0x1c,0x04,0x04
0002c8  04040404          DCB      0x04,0x04,0x04,0x04
0002cc  04041c00          DCB      0x04,0x04,0x1c,0x00
0002d0  00020202          DCB      0x00,0x02,0x02,0x02
0002d4  04040808          DCB      0x04,0x04,0x08,0x08
0002d8  08100000          DCB      0x08,0x10,0x00,0x00
0002dc  000e0808          DCB      0x00,0x0e,0x08,0x08
0002e0  08080808          DCB      0x08,0x08,0x08,0x08
0002e4  08080e00          DCB      0x08,0x08,0x0e,0x00
0002e8  00040a00          DCB      0x00,0x04,0x0a,0x00
0002ec  00000000          DCB      0x00,0x00,0x00,0x00
0002f0  00000000          DCB      0x00,0x00,0x00,0x00
0002f4  00000000          DCB      0x00,0x00,0x00,0x00
0002f8  00000000          DCB      0x00,0x00,0x00,0x00
0002fc  0000003f          DCB      0x00,0x00,0x00,0x3f
000300  00040000          DCB      0x00,0x04,0x00,0x00
000304  00000000          DCB      0x00,0x00,0x00,0x00
000308  00000000          DCB      0x00,0x00,0x00,0x00
00030c  00000000          DCB      0x00,0x00,0x00,0x00
000310  000c121c          DCB      0x00,0x0c,0x12,0x1c
000314  123c0000          DCB      0x12,0x3c,0x00,0x00
000318  00000302          DCB      0x00,0x00,0x03,0x02
00031c  020e1212          DCB      0x02,0x0e,0x12,0x12
000320  120e0000          DCB      0x12,0x0e,0x00,0x00
000324  00000000          DCB      0x00,0x00,0x00,0x00
000328  001c1202          DCB      0x00,0x1c,0x12,0x02
00032c  021c0000          DCB      0x02,0x1c,0x00,0x00
000330  00001810          DCB      0x00,0x00,0x18,0x10
000334  101c1212          DCB      0x10,0x1c,0x12,0x12
000338  123c0000          DCB      0x12,0x3c,0x00,0x00
00033c  00000000          DCB      0x00,0x00,0x00,0x00
000340  000c121e          DCB      0x00,0x0c,0x12,0x1e
000344  021c0000          DCB      0x02,0x1c,0x00,0x00
000348  00003804          DCB      0x00,0x00,0x38,0x04
00034c  041e0404          DCB      0x04,0x1e,0x04,0x04
000350  041e0000          DCB      0x04,0x1e,0x00,0x00
000354  00000000          DCB      0x00,0x00,0x00,0x00
000358  003c120c          DCB      0x00,0x3c,0x12,0x0c
00035c  021e221c          DCB      0x02,0x1e,0x22,0x1c
000360  00000302          DCB      0x00,0x00,0x03,0x02
000364  020e1212          DCB      0x02,0x0e,0x12,0x12
000368  12370000          DCB      0x12,0x37,0x00,0x00
00036c  00000400          DCB      0x00,0x00,0x04,0x00
000370  00060404          DCB      0x00,0x06,0x04,0x04
000374  040e0000          DCB      0x04,0x0e,0x00,0x00
000378  00000800          DCB      0x00,0x00,0x08,0x00
00037c  000c0808          DCB      0x00,0x0c,0x08,0x08
000380  08080807          DCB      0x08,0x08,0x08,0x07
000384  00000302          DCB      0x00,0x00,0x03,0x02
000388  023a0a0e          DCB      0x02,0x3a,0x0a,0x0e
00038c  12370000          DCB      0x12,0x37,0x00,0x00
000390  00000704          DCB      0x00,0x00,0x07,0x04
000394  04040404          DCB      0x04,0x04,0x04,0x04
000398  041f0000          DCB      0x04,0x1f,0x00,0x00
00039c  00000000          DCB      0x00,0x00,0x00,0x00
0003a0  000f1515          DCB      0x00,0x0f,0x15,0x15
0003a4  15150000          DCB      0x15,0x15,0x00,0x00
0003a8  00000000          DCB      0x00,0x00,0x00,0x00
0003ac  000f1212          DCB      0x00,0x0f,0x12,0x12
0003b0  12370000          DCB      0x12,0x37,0x00,0x00
0003b4  00000000          DCB      0x00,0x00,0x00,0x00
0003b8  000c1212          DCB      0x00,0x0c,0x12,0x12
0003bc  120c0000          DCB      0x12,0x0c,0x00,0x00
0003c0  00000000          DCB      0x00,0x00,0x00,0x00
0003c4  000f1212          DCB      0x00,0x0f,0x12,0x12
0003c8  120e0207          DCB      0x12,0x0e,0x02,0x07
0003cc  00000000          DCB      0x00,0x00,0x00,0x00
0003d0  001c1212          DCB      0x00,0x1c,0x12,0x12
0003d4  121c1038          DCB      0x12,0x1c,0x10,0x38
0003d8  00000000          DCB      0x00,0x00,0x00,0x00
0003dc  001b0602          DCB      0x00,0x1b,0x06,0x02
0003e0  02070000          DCB      0x02,0x07,0x00,0x00
0003e4  00000000          DCB      0x00,0x00,0x00,0x00
0003e8  001e020c          DCB      0x00,0x1e,0x02,0x0c
0003ec  101e0000          DCB      0x10,0x1e,0x00,0x00
0003f0  00000004          DCB      0x00,0x00,0x00,0x04
0003f4  040e0404          DCB      0x04,0x0e,0x04,0x04
0003f8  04180000          DCB      0x04,0x18,0x00,0x00
0003fc  00000000          DCB      0x00,0x00,0x00,0x00
000400  001b1212          DCB      0x00,0x1b,0x12,0x12
000404  123c0000          DCB      0x12,0x3c,0x00,0x00
000408  00000000          DCB      0x00,0x00,0x00,0x00
00040c  0037120a          DCB      0x00,0x37,0x12,0x0a
000410  0c040000          DCB      0x0c,0x04,0x00,0x00
000414  00000000          DCB      0x00,0x00,0x00,0x00
000418  0015150e          DCB      0x00,0x15,0x15,0x0e
00041c  0a0a0000          DCB      0x0a,0x0a,0x00,0x00
000420  00000000          DCB      0x00,0x00,0x00,0x00
000424  001b0a04          DCB      0x00,0x1b,0x0a,0x04
000428  0a1b0000          DCB      0x0a,0x1b,0x00,0x00
00042c  00000000          DCB      0x00,0x00,0x00,0x00
000430  0037120a          DCB      0x00,0x37,0x12,0x0a
000434  0c040403          DCB      0x0c,0x04,0x04,0x03
000438  00000000          DCB      0x00,0x00,0x00,0x00
00043c  001e0804          DCB      0x00,0x1e,0x08,0x04
000440  041e0000          DCB      0x04,0x1e,0x00,0x00
000444  00180808          DCB      0x00,0x18,0x08,0x08
000448  08040808          DCB      0x08,0x04,0x08,0x08
00044c  08081800          DCB      0x08,0x08,0x18,0x00
000450  08080808          DCB      0x08,0x08,0x08,0x08
000454  08080808          DCB      0x08,0x08,0x08,0x08
000458  08080808          DCB      0x08,0x08,0x08,0x08
00045c  00060404          DCB      0x00,0x06,0x04,0x04
000460  04080404          DCB      0x04,0x08,0x04,0x04
000464  04040600          DCB      0x04,0x04,0x06,0x00
000468  02251800          DCB      0x02,0x25,0x18,0x00
00046c  00000000          DCB      0x00,0x00,0x00,0x00
000470  00000000          DCB      0x00,0x00,0x00,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  color1
                          DCD      0x00000000
                  color
                          DCD      0x0000f800
                          DCD      0x000007e0
                          DCD      0x0000001f
                          DCD      0x0000ffe0
                          DCD      0x00000000
                          DCD      0x0000ffff
                          DCD      0x000007ff
                          DCD      0x0000f81f
                  POINT_COLOR
000024  f800              DCW      0xf800
000026  0000              DCB      0x00,0x00
                  LCD_IDP
                          DCD      0x00000000
